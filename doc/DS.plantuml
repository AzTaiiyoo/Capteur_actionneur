@startuml
' Définition du style
skinparam SequenceArrowColor Blue
skinparam ParticipantBackgroundColor LightBlue
skinparam ParticipantBorderColor Blue
skinparam SequenceDividerBackgroundColor LightGray

' Participants
participant "Main Loop" as Main
participant "HC_SR04_update" as HCSR04
participant "handleSerialCommunication" as Serial
participant "receiveMessage" as Receive
participant "processCommand" as Process
participant "parseCommand" as Parse
participant "updateSystem" as Update
participant "Servo_SetPosition" as Servo

' Séquence d'initialisation
== Initialisation ==
Main -> HCSR04: HC_SR04_init()
Main -> Servo: Servo_Init()
Main -> Servo: Servo_SetToMiddle()
Main -> Serial: sendMessage("System ready...")

' Boucle principale
== Boucle Principale ==
loop à chaque itération
    Main -> HCSR04: HC_SR04_update(sensor, mode)
    
    ' Communication série
    Main -> Serial: handleSerialCommunication()
    activate Serial
    Serial -> Receive: receiveMessage(cmdBuffer, size)
    alt commande complète reçue
        Serial -> Process: processCommand(cmdBuffer)
        activate Process
        Process -> Parse: parseCommand(command)
        
        alt mode1 détecté
            Process -> Process: currentState = STATE_MODE1, mode = 1
            Process -> Serial: sendMessage("Mode 1 activated...")
        else mode2 détecté
            Process -> Process: currentState = STATE_MODE2, mode = 2
            Process -> Serial: sendMessage("Mode 2 activated...")
        else quit détecté
            Process -> Process: currentState = STATE_IDLE
            Process -> Serial: sendMessage("Returned to idle state")
        else valeur 1-12 détectée
            alt si en MODE2
                Process -> Process: servoPosition = value
                Process -> Serial: sendMessage("Servo position set...")
            else
                Process -> Serial: sendMessage("Error: Can only set...")
            end
        else
            Process -> Serial: sendMessage("Unknown command...")
        end
        deactivate Process
    end
    deactivate Serial
    
    ' Mise à jour du système
    Main -> Update: updateSystem()
    activate Update
    
    alt currentState == STATE_IDLE
        Update -> Servo: Servo_SetToMiddle()
    else currentState == STATE_MODE1
        alt distance dans la plage valide
            Update -> Servo: position = Servo_DistanceToPosition(distance)
            Update -> Servo: Servo_SetPosition(position)
        else
            Update -> Servo: Servo_SetToMiddle()
        end
    else currentState == STATE_MODE2
        Update -> Servo: position = Servo_ValueToPosition(servoPosition)
        Update -> Servo: Servo_SetPosition(position)
    end
    deactivate Update
    
    Main -> Main: HAL_Delay(10)
end

@enduml