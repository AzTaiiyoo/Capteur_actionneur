ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Src/main.c"
  20              		.section	.rodata.parseCommand.str1.4,"aMS",%progbits,1
  21              		.align	2
  22              	.LC0:
  23 0000 6D6F6465 		.ascii	"mode1\000"
  23      3100
  24 0006 0000     		.align	2
  25              	.LC1:
  26 0008 6D6F6465 		.ascii	"mode2\000"
  26      3200
  27 000e 0000     		.align	2
  28              	.LC2:
  29 0010 71756974 		.ascii	"quit\000"
  29      00
  30 0015 000000   		.align	2
  31              	.LC3:
  32 0018 64656D6F 		.ascii	"demo\000"
  32      00
  33 001d 000000   		.align	2
  34              	.LC4:
  35 0020 256400   		.ascii	"%d\000"
  36              		.section	.text.parseCommand,"ax",%progbits
  37              		.align	1
  38              		.global	parseCommand
  39              		.syntax unified
  40              		.thumb
  41              		.thumb_func
  43              	parseCommand:
  44              	.LVL0:
  45              	.LFB140:
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * Copyright (c) 2025 STMicroelectronics.
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 2


  10:Src/main.c    ****   * All rights reserved.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Src/main.c    ****   * in the root directory of this software component.
  14:Src/main.c    ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   ******************************************************************************
  17:Src/main.c    ****   */
  18:Src/main.c    **** /* USER CODE END Header */
  19:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  20:Src/main.c    **** #include "main.h"
  21:Src/main.c    **** #include "tim.h"
  22:Src/main.c    **** #include "usart.h"
  23:Src/main.c    **** #include "gpio.h"
  24:Src/main.c    **** 
  25:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  26:Src/main.c    **** /* USER CODE BEGIN Includes */
  27:Src/main.c    **** #include <stdint.h>
  28:Src/main.c    **** #include <stdio.h>
  29:Src/main.c    **** #include <string.h>
  30:Src/main.c    **** #include "module/hcsr04.h"
  31:Src/main.c    **** #include "module/servo.h"
  32:Src/main.c    **** #include "module/usart_comm.h"
  33:Src/main.c    **** /* USER CODE END Includes */
  34:Src/main.c    **** 
  35:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  36:Src/main.c    **** /* USER CODE BEGIN PTD */
  37:Src/main.c    **** /**
  38:Src/main.c    ****  * @typedef SystemState
  39:Src/main.c    ****  * @brief Énumération des états possibles du système
  40:Src/main.c    ****  */
  41:Src/main.c    **** typedef enum {
  42:Src/main.c    ****   STATE_IDLE,    /**< État initial/neutre */
  43:Src/main.c    ****   STATE_MODE1,   /**< Mode 1: LED bleue + servo positionné selon distance HCSR04 */
  44:Src/main.c    ****   STATE_MODE2,
  45:Src/main.c    ****   STATE_DEMO    /**< Mode 2: LED verte + servo positionné selon consigne série */
  46:Src/main.c    **** } SystemState;
  47:Src/main.c    **** 
  48:Src/main.c    **** /**
  49:Src/main.c    ****  * @typedef Command
  50:Src/main.c    ****  * @brief Énumération des commandes reconnues par le système
  51:Src/main.c    ****  */
  52:Src/main.c    **** typedef enum {
  53:Src/main.c    ****   CMD_NONE,     /**< Aucune commande ou commande non reconnue */
  54:Src/main.c    ****   CMD_MODE1,    /**< Commande pour activer le mode 1 */
  55:Src/main.c    ****   CMD_MODE2,    /**< Commande pour activer le mode 2 */
  56:Src/main.c    ****   CMD_QUIT,     /**< Commande pour revenir à l'état IDLE */
  57:Src/main.c    ****   CMD_DEMO,
  58:Src/main.c    ****   CMD_VALUE     /**< Valeur numérique pour positionner le servo en mode 2 */
  59:Src/main.c    **** } Command;
  60:Src/main.c    **** 
  61:Src/main.c    **** /**
  62:Src/main.c    ****  * @var currentState
  63:Src/main.c    ****  * @brief État actuel du système
  64:Src/main.c    ****  */
  65:Src/main.c    **** SystemState currentState = STATE_IDLE;
  66:Src/main.c    **** 
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 3


  67:Src/main.c    **** /**
  68:Src/main.c    ****  * @var servoPosition
  69:Src/main.c    ****  * @brief Position actuelle demandée pour le servo (de 1 à 12)
  70:Src/main.c    ****  */
  71:Src/main.c    **** uint8_t servoPosition = 6;  // Position par défaut (milieu)
  72:Src/main.c    **** 
  73:Src/main.c    **** /**
  74:Src/main.c    ****  * @var mode
  75:Src/main.c    ****  * @brief Mode de fonctionnement actuel (0 = IDLE, 1 = MODE1, 2 = MODE2)
  76:Src/main.c    ****  */
  77:Src/main.c    **** static int mode; 
  78:Src/main.c    **** /* USER CODE END PTD */
  79:Src/main.c    **** 
  80:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  81:Src/main.c    **** /* USER CODE BEGIN PD */
  82:Src/main.c    **** /**
  83:Src/main.c    ****  * @brief Traite une commande reçue via la communication série
  84:Src/main.c    ****  * @param command Chaîne de caractères contenant la commande à traiter
  85:Src/main.c    ****  */
  86:Src/main.c    **** void processCommand(char* command);
  87:Src/main.c    **** 
  88:Src/main.c    **** /**
  89:Src/main.c    ****  * @brief Analyse une chaîne de caractères pour identifier la commande
  90:Src/main.c    ****  * @param command Chaîne de caractères à analyser
  91:Src/main.c    ****  * @return Type de commande identifiée
  92:Src/main.c    ****  */
  93:Src/main.c    **** Command parseCommand(char* command);
  94:Src/main.c    **** 
  95:Src/main.c    **** /**
  96:Src/main.c    ****  * @brief Met à jour l'état du système en fonction du mode actuel
  97:Src/main.c    ****  */
  98:Src/main.c    **** void updateSystem(void);
  99:Src/main.c    **** 
 100:Src/main.c    **** /**
 101:Src/main.c    ****  * @brief Gère la réception des commandes via la liaison série
 102:Src/main.c    ****  */
 103:Src/main.c    **** void handleSerialCommunication(void);
 104:Src/main.c    **** /* USER CODE END PD */
 105:Src/main.c    **** 
 106:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
 107:Src/main.c    **** /* USER CODE BEGIN PM */
 108:Src/main.c    **** 
 109:Src/main.c    **** /* USER CODE END PM */
 110:Src/main.c    **** 
 111:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
 112:Src/main.c    **** 
 113:Src/main.c    **** /* USER CODE BEGIN PV */
 114:Src/main.c    **** 
 115:Src/main.c    **** /* USER CODE END PV */
 116:Src/main.c    **** 
 117:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 118:Src/main.c    **** void SystemClock_Config(void);
 119:Src/main.c    **** /* USER CODE BEGIN PFP */
 120:Src/main.c    **** 
 121:Src/main.c    **** /* USER CODE END PFP */
 122:Src/main.c    **** 
 123:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 4


 124:Src/main.c    **** /* USER CODE BEGIN 0 */
 125:Src/main.c    **** 
 126:Src/main.c    **** /* USER CODE END 0 */
 127:Src/main.c    **** 
 128:Src/main.c    **** /**
 129:Src/main.c    ****   * @brief  The application entry point.
 130:Src/main.c    ****   * @retval int
 131:Src/main.c    ****   */
 132:Src/main.c    **** int main(void)
 133:Src/main.c    **** {
 134:Src/main.c    **** 
 135:Src/main.c    ****   /* USER CODE BEGIN 1 */
 136:Src/main.c    ****   
 137:Src/main.c    ****   /* USER CODE END 1 */
 138:Src/main.c    **** 
 139:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 140:Src/main.c    **** 
 141:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 142:Src/main.c    ****   HAL_Init();
 143:Src/main.c    **** 
 144:Src/main.c    ****   /* USER CODE BEGIN Init */
 145:Src/main.c    **** 
 146:Src/main.c    ****   /* USER CODE END Init */
 147:Src/main.c    **** 
 148:Src/main.c    ****   /* Configure the system clock */
 149:Src/main.c    ****   SystemClock_Config();
 150:Src/main.c    **** 
 151:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 152:Src/main.c    **** 
 153:Src/main.c    ****   /* USER CODE END SysInit */
 154:Src/main.c    **** 
 155:Src/main.c    ****   /* Initialize all configured peripherals */
 156:Src/main.c    ****   MX_GPIO_Init();
 157:Src/main.c    ****   MX_TIM1_Init();
 158:Src/main.c    ****   MX_TIM3_Init();
 159:Src/main.c    ****   MX_USART2_UART_Init();
 160:Src/main.c    ****   /* USER CODE BEGIN 2 */
 161:Src/main.c    ****   // Initialisation du capteur HC-SR04
 162:Src/main.c    ****   HC_SR04* sensor = HC_SR04_get_instance();  // Obtenir l'instance du capteur HC-SR04
 163:Src/main.c    ****   if (!sensor) {
 164:Src/main.c    ****     Error_Handler();  // Si l'initialisation échoue, appeler Error_Handler
 165:Src/main.c    ****   }
 166:Src/main.c    ****   
 167:Src/main.c    ****   // Lancement de la PWM sur le canal 1 de TIM1
 168:Src/main.c    ****   // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Start PWM on TIM1 Channel 1
 169:Src/main.c    ****   // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3); // Set initial duty cycle to 0%
 170:Src/main.c    **** 
 171:Src/main.c    ****   // Démarrer la PWM pour le servo-moteur
 172:Src/main.c    ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 173:Src/main.c    ****   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500); // Position initiale au centre
 174:Src/main.c    ****   
 175:Src/main.c    ****   HC_SR04_init(); // Initialisation du capteur HC-SR04
 176:Src/main.c    **** 
 177:Src/main.c    ****   // Initialiser le servo
 178:Src/main.c    ****   Servo_Init();
 179:Src/main.c    ****   Servo_SetToMiddle(); // Mettre en position neutre au démarrage
 180:Src/main.c    **** 
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 5


 181:Src/main.c    ****   sendMessage("System ready. Available commands: mode1, mode2, quit, demo");
 182:Src/main.c    ****   /* USER CODE END 2 */
 183:Src/main.c    **** 
 184:Src/main.c    ****   /* Infinite loop */
 185:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 186:Src/main.c    ****   while (1)
 187:Src/main.c    ****   {
 188:Src/main.c    ****     // Obtenir l'instance du capteur
 189:Src/main.c    ****     HC_SR04* sensor = HC_SR04_get_instance();
 190:Src/main.c    ****     
 191:Src/main.c    ****     // Mettre à jour la distance et contrôler les LEDs
 192:Src/main.c    ****     HC_SR04_update(sensor, mode);
 193:Src/main.c    ****     
 194:Src/main.c    ****     // Gérer la communication série pour les commandes
 195:Src/main.c    ****     handleSerialCommunication();
 196:Src/main.c    ****     
 197:Src/main.c    ****     // Mettre à jour l'état du système en fonction du mode
 198:Src/main.c    ****     updateSystem();
 199:Src/main.c    ****     
 200:Src/main.c    ****     // Petite pause pour éviter de surcharger le CPU
 201:Src/main.c    ****     // HAL_Delay(10);
 202:Src/main.c    ****     /* USER CODE END WHILE */
 203:Src/main.c    **** 
 204:Src/main.c    ****     /* USER CODE BEGIN 3 */
 205:Src/main.c    ****   }
 206:Src/main.c    ****   // Ne devrait jamais arriver
 207:Src/main.c    ****   // Error_Handler();
 208:Src/main.c    ****   /* USER CODE END 3 */
 209:Src/main.c    **** }
 210:Src/main.c    **** 
 211:Src/main.c    **** /**
 212:Src/main.c    ****   * @brief System Clock Configuration
 213:Src/main.c    ****   * @retval None
 214:Src/main.c    ****   */
 215:Src/main.c    **** void SystemClock_Config(void)
 216:Src/main.c    **** {
 217:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 218:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 219:Src/main.c    **** 
 220:Src/main.c    ****   /** Configure the main internal regulator output voltage
 221:Src/main.c    ****   */
 222:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 223:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 224:Src/main.c    **** 
 225:Src/main.c    ****   /** Initializes the RCC Oscillators according to the specified parameters
 226:Src/main.c    ****   * in the RCC_OscInitTypeDef structure.
 227:Src/main.c    ****   */
 228:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 229:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 230:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 231:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 232:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 233:Src/main.c    ****   {
 234:Src/main.c    ****     Error_Handler();
 235:Src/main.c    ****   }
 236:Src/main.c    **** 
 237:Src/main.c    ****   /** Initializes the CPU, AHB and APB buses clocks
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 6


 238:Src/main.c    ****   */
 239:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 240:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 241:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 242:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 243:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 244:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 245:Src/main.c    **** 
 246:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 247:Src/main.c    ****   {
 248:Src/main.c    ****     Error_Handler();
 249:Src/main.c    ****   }
 250:Src/main.c    **** }
 251:Src/main.c    **** 
 252:Src/main.c    **** /* USER CODE BEGIN 4 */
 253:Src/main.c    **** /**
 254:Src/main.c    ****  * @brief Gère la réception des commandes via la liaison série
 255:Src/main.c    ****  * @details Cette fonction attend de façon non-bloquante une commande sur la 
 256:Src/main.c    ****  * liaison série. Lorsqu'une commande complète est reçue, elle est passée
 257:Src/main.c    ****  * à la fonction processCommand pour traitement.
 258:Src/main.c    ****  */
 259:Src/main.c    **** void handleSerialCommunication(void) {
 260:Src/main.c    ****   char cmdBuffer[32];
 261:Src/main.c    ****   
 262:Src/main.c    ****   // Essayer de recevoir une commande (non-bloquant maintenant)
 263:Src/main.c    ****   int result = receiveMessage(cmdBuffer, sizeof(cmdBuffer));
 264:Src/main.c    ****   
 265:Src/main.c    ****   if (result >= 0) {
 266:Src/main.c    ****       // Commande complète reçue, la traiter
 267:Src/main.c    ****       processCommand(cmdBuffer);
 268:Src/main.c    ****   }
 269:Src/main.c    ****   // Si result < 0, aucune commande complète n'a été reçue, on continue l'exécution
 270:Src/main.c    **** }
 271:Src/main.c    **** 
 272:Src/main.c    **** /**
 273:Src/main.c    ****  * @brief Analyse la commande reçue
 274:Src/main.c    ****  * @param command Chaîne de caractères contenant la commande
 275:Src/main.c    ****  * @return Type de commande identifiée
 276:Src/main.c    ****  * @details Reconnaît les commandes "mode1", "mode2", "quit" et les valeurs numériques
 277:Src/main.c    ****  * entre 1 et 12 pour le positionnement du servo en mode 2
 278:Src/main.c    ****  */
 279:Src/main.c    **** Command parseCommand(char* command)
 280:Src/main.c    **** {
  46              		.loc 1 280 1 view -0
  47              		.cfi_startproc
  48              		@ args = 0, pretend = 0, frame = 8
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50              		.loc 1 280 1 is_stmt 0 view .LVU1
  51 0000 10B5     		push	{r4, lr}
  52              	.LCFI0:
  53              		.cfi_def_cfa_offset 8
  54              		.cfi_offset 4, -8
  55              		.cfi_offset 14, -4
  56 0002 82B0     		sub	sp, sp, #8
  57              	.LCFI1:
  58              		.cfi_def_cfa_offset 16
  59 0004 0446     		mov	r4, r0
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 7


 281:Src/main.c    ****   if (strcmp(command, "mode1") == 0) {
  60              		.loc 1 281 3 is_stmt 1 view .LVU2
  61              		.loc 1 281 7 is_stmt 0 view .LVU3
  62 0006 1649     		ldr	r1, .L10
  63 0008 FFF7FEFF 		bl	strcmp
  64              	.LVL1:
  65              		.loc 1 281 6 discriminator 1 view .LVU4
  66 000c F8B1     		cbz	r0, .L4
 282:Src/main.c    ****     return CMD_MODE1;
 283:Src/main.c    ****   }
 284:Src/main.c    ****   else if (strcmp(command, "mode2") == 0) {
  67              		.loc 1 284 8 is_stmt 1 view .LVU5
  68              		.loc 1 284 12 is_stmt 0 view .LVU6
  69 000e 1549     		ldr	r1, .L10+4
  70 0010 2046     		mov	r0, r4
  71 0012 FFF7FEFF 		bl	strcmp
  72              	.LVL2:
  73              		.loc 1 284 11 discriminator 1 view .LVU7
  74 0016 E8B1     		cbz	r0, .L5
 285:Src/main.c    ****     return CMD_MODE2;
 286:Src/main.c    ****   }
 287:Src/main.c    ****   else if (strcmp(command, "quit") == 0) {
  75              		.loc 1 287 8 is_stmt 1 view .LVU8
  76              		.loc 1 287 12 is_stmt 0 view .LVU9
  77 0018 1349     		ldr	r1, .L10+8
  78 001a 2046     		mov	r0, r4
  79 001c FFF7FEFF 		bl	strcmp
  80              	.LVL3:
  81              		.loc 1 287 11 discriminator 1 view .LVU10
  82 0020 D0B1     		cbz	r0, .L6
 288:Src/main.c    ****     return CMD_QUIT;
 289:Src/main.c    ****   }
 290:Src/main.c    ****   else if (strcmp(command, "demo") == 0){
  83              		.loc 1 290 8 is_stmt 1 view .LVU11
  84              		.loc 1 290 12 is_stmt 0 view .LVU12
  85 0022 1249     		ldr	r1, .L10+12
  86 0024 2046     		mov	r0, r4
  87 0026 FFF7FEFF 		bl	strcmp
  88              	.LVL4:
  89              		.loc 1 290 11 discriminator 1 view .LVU13
  90 002a B8B1     		cbz	r0, .L7
  91              	.LBB4:
 291:Src/main.c    ****     return CMD_DEMO;
 292:Src/main.c    ****   }
 293:Src/main.c    ****   else {
 294:Src/main.c    ****     // Vérifier si c'est une valeur numérique (pour le mode 2)
 295:Src/main.c    ****     int value;
  92              		.loc 1 295 5 is_stmt 1 view .LVU14
 296:Src/main.c    ****     if (sscanf(command, "%d", &value) == 1) {
  93              		.loc 1 296 5 view .LVU15
  94              		.loc 1 296 9 is_stmt 0 view .LVU16
  95 002c 01AA     		add	r2, sp, #4
  96 002e 1049     		ldr	r1, .L10+16
  97 0030 2046     		mov	r0, r4
  98 0032 FFF7FEFF 		bl	sscanf
  99              	.LVL5:
 100              		.loc 1 296 8 discriminator 1 view .LVU17
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 8


 101 0036 0128     		cmp	r0, #1
 102 0038 01D0     		beq	.L9
 103              	.L3:
 104              	.LBE4:
 297:Src/main.c    ****       if (value >= 1 && value <= 12) {
 298:Src/main.c    ****         servoPosition = value;
 299:Src/main.c    ****         return CMD_VALUE;
 300:Src/main.c    ****       }
 301:Src/main.c    ****     }
 302:Src/main.c    ****   }
 303:Src/main.c    ****   
 304:Src/main.c    ****   return CMD_NONE;
 105              		.loc 1 304 3 is_stmt 1 view .LVU18
 106              		.loc 1 304 10 is_stmt 0 view .LVU19
 107 003a 0020     		movs	r0, #0
 108 003c 08E0     		b	.L2
 109              	.L9:
 110              	.LBB5:
 297:Src/main.c    ****       if (value >= 1 && value <= 12) {
 111              		.loc 1 297 7 is_stmt 1 view .LVU20
 297:Src/main.c    ****       if (value >= 1 && value <= 12) {
 112              		.loc 1 297 22 is_stmt 0 view .LVU21
 113 003e 019B     		ldr	r3, [sp, #4]
 114 0040 5A1E     		subs	r2, r3, #1
 297:Src/main.c    ****       if (value >= 1 && value <= 12) {
 115              		.loc 1 297 10 view .LVU22
 116 0042 0B2A     		cmp	r2, #11
 117 0044 F9D8     		bhi	.L3
 298:Src/main.c    ****         return CMD_VALUE;
 118              		.loc 1 298 9 is_stmt 1 view .LVU23
 298:Src/main.c    ****         return CMD_VALUE;
 119              		.loc 1 298 23 is_stmt 0 view .LVU24
 120 0046 0B4A     		ldr	r2, .L10+20
 121 0048 1370     		strb	r3, [r2]
 299:Src/main.c    ****       }
 122              		.loc 1 299 9 is_stmt 1 view .LVU25
 299:Src/main.c    ****       }
 123              		.loc 1 299 16 is_stmt 0 view .LVU26
 124 004a 0520     		movs	r0, #5
 125 004c 00E0     		b	.L2
 126              	.L4:
 127              	.LBE5:
 282:Src/main.c    ****   }
 128              		.loc 1 282 12 view .LVU27
 129 004e 0120     		movs	r0, #1
 130              	.L2:
 305:Src/main.c    **** }
 131              		.loc 1 305 1 view .LVU28
 132 0050 02B0     		add	sp, sp, #8
 133              	.LCFI2:
 134              		.cfi_remember_state
 135              		.cfi_def_cfa_offset 8
 136              		@ sp needed
 137 0052 10BD     		pop	{r4, pc}
 138              	.LVL6:
 139              	.L5:
 140              	.LCFI3:
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 9


 141              		.cfi_restore_state
 285:Src/main.c    ****   }
 142              		.loc 1 285 12 view .LVU29
 143 0054 0220     		movs	r0, #2
 144 0056 FBE7     		b	.L2
 145              	.L6:
 288:Src/main.c    ****   }
 146              		.loc 1 288 12 view .LVU30
 147 0058 0320     		movs	r0, #3
 148 005a F9E7     		b	.L2
 149              	.L7:
 291:Src/main.c    ****   }
 150              		.loc 1 291 12 view .LVU31
 151 005c 0420     		movs	r0, #4
 152 005e F7E7     		b	.L2
 153              	.L11:
 154              		.align	2
 155              	.L10:
 156 0060 00000000 		.word	.LC0
 157 0064 08000000 		.word	.LC1
 158 0068 10000000 		.word	.LC2
 159 006c 18000000 		.word	.LC3
 160 0070 20000000 		.word	.LC4
 161 0074 00000000 		.word	servoPosition
 162              		.cfi_endproc
 163              	.LFE140:
 165              		.section	.rodata.processCommand.str1.4,"aMS",%progbits,1
 166              		.align	2
 167              	.LC5:
 168 0000 4D6F6465 		.ascii	"Mode 1 activated: LED blue + servo follows ultrason"
 168      20312061 
 168      63746976 
 168      61746564 
 168      3A204C45 
 169 0033 69632073 		.ascii	"ic sensor\000"
 169      656E736F 
 169      7200
 170 003d 000000   		.align	2
 171              	.LC6:
 172 0040 416C7265 		.ascii	"Already in Mode 1\000"
 172      61647920 
 172      696E204D 
 172      6F646520 
 172      3100
 173 0052 0000     		.align	2
 174              	.LC7:
 175 0054 4D6F6465 		.ascii	"Mode 2 activated: LED green + servo follows serial "
 175      20322061 
 175      63746976 
 175      61746564 
 175      3A204C45 
 176 0087 696E7075 		.ascii	"input (1-12)\000"
 176      74202831 
 176      2D313229 
 176      00
 177              		.align	2
 178              	.LC8:
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 10


 179 0094 416C7265 		.ascii	"Already in Mode 2\000"
 179      61647920 
 179      696E204D 
 179      6F646520 
 179      3200
 180 00a6 0000     		.align	2
 181              	.LC9:
 182 00a8 52657475 		.ascii	"Returned to idle state\000"
 182      726E6564 
 182      20746F20 
 182      69646C65 
 182      20737461 
 183 00bf 00       		.align	2
 184              	.LC10:
 185 00c0 416C7265 		.ascii	"Already in idle state\000"
 185      61647920 
 185      696E2069 
 185      646C6520 
 185      73746174 
 186 00d6 0000     		.align	2
 187              	.LC11:
 188 00d8 44656D6F 		.ascii	"Demo mode activated: LED blue + servo follows ultra"
 188      206D6F64 
 188      65206163 
 188      74697661 
 188      7465643A 
 189 010b 736F6E69 		.ascii	"sonic sensor\000"
 189      63207365 
 189      6E736F72 
 189      00
 190              		.align	2
 191              	.LC12:
 192 0118 416C7265 		.ascii	"Already in demo mode\000"
 192      61647920 
 192      696E2064 
 192      656D6F20 
 192      6D6F6465 
 193 012d 000000   		.align	2
 194              	.LC13:
 195 0130 53657276 		.ascii	"Servo position set to %d\000"
 195      6F20706F 
 195      73697469 
 195      6F6E2073 
 195      65742074 
 196 0149 000000   		.align	2
 197              	.LC14:
 198 014c 4572726F 		.ascii	"Error: Can only set servo position in Mode 2\000"
 198      723A2043 
 198      616E206F 
 198      6E6C7920 
 198      73657420 
 199 0179 000000   		.align	2
 200              	.LC15:
 201 017c 556E6B6E 		.ascii	"Unknown command. Available: mode1, mode2, quit, or "
 201      6F776E20 
 201      636F6D6D 
 201      616E642E 
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 11


 201      20417661 
 202 01af 76616C75 		.ascii	"value (1-12) in Mode 2\000"
 202      65202831 
 202      2D313229 
 202      20696E20 
 202      4D6F6465 
 203              		.section	.text.processCommand,"ax",%progbits
 204              		.align	1
 205              		.global	processCommand
 206              		.syntax unified
 207              		.thumb
 208              		.thumb_func
 210              	processCommand:
 211              	.LVL7:
 212              	.LFB141:
 306:Src/main.c    **** 
 307:Src/main.c    **** /**
 308:Src/main.c    ****  * @brief Traite la commande reçue et met à jour l'état du système
 309:Src/main.c    ****  * @param command Chaîne de caractères contenant la commande
 310:Src/main.c    ****  * @details Selon la commande identifiée, change l'état du système et
 311:Src/main.c    ****  * envoie un message de confirmation ou d'erreur
 312:Src/main.c    ****  */
 313:Src/main.c    **** void processCommand(char* command)
 314:Src/main.c    **** {
 213              		.loc 1 314 1 is_stmt 1 view -0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 56
 216              		@ frame_needed = 0, uses_anonymous_args = 0
 217              		.loc 1 314 1 is_stmt 0 view .LVU33
 218 0000 10B5     		push	{r4, lr}
 219              	.LCFI4:
 220              		.cfi_def_cfa_offset 8
 221              		.cfi_offset 4, -8
 222              		.cfi_offset 14, -4
 223 0002 8EB0     		sub	sp, sp, #56
 224              	.LCFI5:
 225              		.cfi_def_cfa_offset 64
 315:Src/main.c    ****   Command cmd = parseCommand(command);
 226              		.loc 1 315 3 is_stmt 1 view .LVU34
 227              		.loc 1 315 17 is_stmt 0 view .LVU35
 228 0004 FFF7FEFF 		bl	parseCommand
 229              	.LVL8:
 316:Src/main.c    ****   
 317:Src/main.c    ****   switch (cmd) {
 230              		.loc 1 317 3 is_stmt 1 view .LVU36
 231 0008 0528     		cmp	r0, #5
 232 000a 59D8     		bhi	.L12
 233 000c DFE800F0 		tbb	[pc, r0]
 234              	.L15:
 235 0010 55       		.byte	(.L20-.L15)/2
 236 0011 03       		.byte	(.L19-.L15)/2
 237 0012 14       		.byte	(.L18-.L15)/2
 238 0013 25       		.byte	(.L17-.L15)/2
 239 0014 33       		.byte	(.L16-.L15)/2
 240 0015 42       		.byte	(.L14-.L15)/2
 241              		.p2align 1
 242              	.L19:
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 12


 318:Src/main.c    ****     case CMD_MODE1:
 319:Src/main.c    ****       if (currentState != STATE_MODE1) {
 243              		.loc 1 319 7 view .LVU37
 244              		.loc 1 319 24 is_stmt 0 view .LVU38
 245 0016 2B4B     		ldr	r3, .L29
 246 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 247              		.loc 1 319 10 view .LVU39
 248 001a 012B     		cmp	r3, #1
 249 001c 08D0     		beq	.L21
 320:Src/main.c    ****         currentState = STATE_MODE1;
 250              		.loc 1 320 9 is_stmt 1 view .LVU40
 251              		.loc 1 320 22 is_stmt 0 view .LVU41
 252 001e 0123     		movs	r3, #1
 253 0020 284A     		ldr	r2, .L29
 254 0022 1370     		strb	r3, [r2]
 321:Src/main.c    ****         mode = 1;
 255              		.loc 1 321 9 is_stmt 1 view .LVU42
 256              		.loc 1 321 14 is_stmt 0 view .LVU43
 257 0024 284A     		ldr	r2, .L29+4
 258 0026 1360     		str	r3, [r2]
 322:Src/main.c    ****         sendMessage("Mode 1 activated: LED blue + servo follows ultrasonic sensor");
 259              		.loc 1 322 9 is_stmt 1 view .LVU44
 260 0028 2848     		ldr	r0, .L29+8
 261              	.LVL9:
 262              		.loc 1 322 9 is_stmt 0 view .LVU45
 263 002a FFF7FEFF 		bl	sendMessage
 264              	.LVL10:
 265 002e 47E0     		b	.L12
 266              	.LVL11:
 267              	.L21:
 323:Src/main.c    ****       } else {
 324:Src/main.c    ****         sendMessage("Already in Mode 1");
 268              		.loc 1 324 9 is_stmt 1 view .LVU46
 269 0030 2748     		ldr	r0, .L29+12
 270              	.LVL12:
 271              		.loc 1 324 9 is_stmt 0 view .LVU47
 272 0032 FFF7FEFF 		bl	sendMessage
 273              	.LVL13:
 274 0036 43E0     		b	.L12
 275              	.LVL14:
 276              	.L18:
 325:Src/main.c    ****       }
 326:Src/main.c    ****       break;
 327:Src/main.c    ****       
 328:Src/main.c    ****     case CMD_MODE2:
 329:Src/main.c    ****       if (currentState != STATE_MODE2) {
 277              		.loc 1 329 7 is_stmt 1 view .LVU48
 278              		.loc 1 329 24 is_stmt 0 view .LVU49
 279 0038 224B     		ldr	r3, .L29
 280 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 281              		.loc 1 329 10 view .LVU50
 282 003c 022B     		cmp	r3, #2
 283 003e 08D0     		beq	.L22
 330:Src/main.c    ****         currentState = STATE_MODE2;
 284              		.loc 1 330 9 is_stmt 1 view .LVU51
 285              		.loc 1 330 22 is_stmt 0 view .LVU52
 286 0040 0223     		movs	r3, #2
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 13


 287 0042 204A     		ldr	r2, .L29
 288 0044 1370     		strb	r3, [r2]
 331:Src/main.c    ****         mode = 2;
 289              		.loc 1 331 9 is_stmt 1 view .LVU53
 290              		.loc 1 331 14 is_stmt 0 view .LVU54
 291 0046 204A     		ldr	r2, .L29+4
 292 0048 1360     		str	r3, [r2]
 332:Src/main.c    ****         sendMessage("Mode 2 activated: LED green + servo follows serial input (1-12)");
 293              		.loc 1 332 9 is_stmt 1 view .LVU55
 294 004a 2248     		ldr	r0, .L29+16
 295              	.LVL15:
 296              		.loc 1 332 9 is_stmt 0 view .LVU56
 297 004c FFF7FEFF 		bl	sendMessage
 298              	.LVL16:
 299 0050 36E0     		b	.L12
 300              	.LVL17:
 301              	.L22:
 333:Src/main.c    ****       } else {
 334:Src/main.c    ****         sendMessage("Already in Mode 2");
 302              		.loc 1 334 9 is_stmt 1 view .LVU57
 303 0052 2148     		ldr	r0, .L29+20
 304              	.LVL18:
 305              		.loc 1 334 9 is_stmt 0 view .LVU58
 306 0054 FFF7FEFF 		bl	sendMessage
 307              	.LVL19:
 308 0058 32E0     		b	.L12
 309              	.LVL20:
 310              	.L17:
 335:Src/main.c    ****       }
 336:Src/main.c    ****       break;
 337:Src/main.c    ****       
 338:Src/main.c    ****     case CMD_QUIT:
 339:Src/main.c    ****       if (currentState != STATE_IDLE) {
 311              		.loc 1 339 7 is_stmt 1 view .LVU59
 312              		.loc 1 339 24 is_stmt 0 view .LVU60
 313 005a 1A4B     		ldr	r3, .L29
 314 005c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 315              		.loc 1 339 10 view .LVU61
 316 005e 33B1     		cbz	r3, .L23
 340:Src/main.c    ****         currentState = STATE_IDLE;
 317              		.loc 1 340 9 is_stmt 1 view .LVU62
 318              		.loc 1 340 22 is_stmt 0 view .LVU63
 319 0060 184B     		ldr	r3, .L29
 320 0062 0022     		movs	r2, #0
 321 0064 1A70     		strb	r2, [r3]
 341:Src/main.c    ****         sendMessage("Returned to idle state");
 322              		.loc 1 341 9 is_stmt 1 view .LVU64
 323 0066 1D48     		ldr	r0, .L29+24
 324              	.LVL21:
 325              		.loc 1 341 9 is_stmt 0 view .LVU65
 326 0068 FFF7FEFF 		bl	sendMessage
 327              	.LVL22:
 328 006c 28E0     		b	.L12
 329              	.LVL23:
 330              	.L23:
 342:Src/main.c    ****       } else {
 343:Src/main.c    ****         sendMessage("Already in idle state");
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 14


 331              		.loc 1 343 9 is_stmt 1 view .LVU66
 332 006e 1C48     		ldr	r0, .L29+28
 333              	.LVL24:
 334              		.loc 1 343 9 is_stmt 0 view .LVU67
 335 0070 FFF7FEFF 		bl	sendMessage
 336              	.LVL25:
 337 0074 24E0     		b	.L12
 338              	.LVL26:
 339              	.L16:
 344:Src/main.c    ****       }
 345:Src/main.c    ****       break;
 346:Src/main.c    ****     case CMD_DEMO:
 347:Src/main.c    ****       if (currentState != STATE_DEMO) {
 340              		.loc 1 347 7 is_stmt 1 view .LVU68
 341              		.loc 1 347 24 is_stmt 0 view .LVU69
 342 0076 134B     		ldr	r3, .L29
 343 0078 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 344              		.loc 1 347 10 view .LVU70
 345 007a 032B     		cmp	r3, #3
 346 007c 06D0     		beq	.L24
 348:Src/main.c    ****         currentState = STATE_DEMO;
 347              		.loc 1 348 9 is_stmt 1 view .LVU71
 348              		.loc 1 348 22 is_stmt 0 view .LVU72
 349 007e 114B     		ldr	r3, .L29
 350 0080 0322     		movs	r2, #3
 351 0082 1A70     		strb	r2, [r3]
 349:Src/main.c    ****         sendMessage("Demo mode activated: LED blue + servo follows ultrasonic sensor");
 352              		.loc 1 349 9 is_stmt 1 view .LVU73
 353 0084 1748     		ldr	r0, .L29+32
 354              	.LVL27:
 355              		.loc 1 349 9 is_stmt 0 view .LVU74
 356 0086 FFF7FEFF 		bl	sendMessage
 357              	.LVL28:
 358 008a 19E0     		b	.L12
 359              	.LVL29:
 360              	.L24:
 350:Src/main.c    ****       } else {
 351:Src/main.c    ****         sendMessage("Already in demo mode");
 361              		.loc 1 351 9 is_stmt 1 view .LVU75
 362 008c 1648     		ldr	r0, .L29+36
 363              	.LVL30:
 364              		.loc 1 351 9 is_stmt 0 view .LVU76
 365 008e FFF7FEFF 		bl	sendMessage
 366              	.LVL31:
 367 0092 15E0     		b	.L12
 368              	.LVL32:
 369              	.L14:
 352:Src/main.c    ****       }
 353:Src/main.c    ****       break;
 354:Src/main.c    ****     case CMD_VALUE:
 355:Src/main.c    ****       if (currentState == STATE_MODE2) {
 370              		.loc 1 355 7 is_stmt 1 view .LVU77
 371              		.loc 1 355 24 is_stmt 0 view .LVU78
 372 0094 0B4B     		ldr	r3, .L29
 373 0096 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 374              		.loc 1 355 10 view .LVU79
 375 0098 022B     		cmp	r3, #2
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 15


 376 009a 03D0     		beq	.L28
 356:Src/main.c    ****         char response[50];
 357:Src/main.c    ****         sprintf(response, "Servo position set to %d", servoPosition);
 358:Src/main.c    ****         sendMessage(response);
 359:Src/main.c    ****       } else {
 360:Src/main.c    ****         sendMessage("Error: Can only set servo position in Mode 2");
 377              		.loc 1 360 9 is_stmt 1 view .LVU80
 378 009c 1348     		ldr	r0, .L29+40
 379              	.LVL33:
 380              		.loc 1 360 9 is_stmt 0 view .LVU81
 381 009e FFF7FEFF 		bl	sendMessage
 382              	.LVL34:
 383 00a2 0DE0     		b	.L12
 384              	.LVL35:
 385              	.L28:
 386              	.LBB6:
 356:Src/main.c    ****         char response[50];
 387              		.loc 1 356 9 is_stmt 1 view .LVU82
 357:Src/main.c    ****         sendMessage(response);
 388              		.loc 1 357 9 view .LVU83
 389 00a4 01AC     		add	r4, sp, #4
 390 00a6 124B     		ldr	r3, .L29+44
 391 00a8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 392 00aa 1249     		ldr	r1, .L29+48
 393 00ac 2046     		mov	r0, r4
 394              	.LVL36:
 357:Src/main.c    ****         sendMessage(response);
 395              		.loc 1 357 9 is_stmt 0 view .LVU84
 396 00ae FFF7FEFF 		bl	sprintf
 397              	.LVL37:
 358:Src/main.c    ****       } else {
 398              		.loc 1 358 9 is_stmt 1 view .LVU85
 399 00b2 2046     		mov	r0, r4
 400 00b4 FFF7FEFF 		bl	sendMessage
 401              	.LVL38:
 402              	.LBE6:
 403 00b8 02E0     		b	.L12
 404              	.LVL39:
 405              	.L20:
 361:Src/main.c    ****       }
 362:Src/main.c    ****       break;
 363:Src/main.c    ****       
 364:Src/main.c    ****     case CMD_NONE:
 365:Src/main.c    ****       sendMessage("Unknown command. Available: mode1, mode2, quit, or value (1-12) in Mode 2");
 406              		.loc 1 365 7 view .LVU86
 407 00ba 0F48     		ldr	r0, .L29+52
 408              	.LVL40:
 409              		.loc 1 365 7 is_stmt 0 view .LVU87
 410 00bc FFF7FEFF 		bl	sendMessage
 411              	.LVL41:
 366:Src/main.c    ****       break;
 412              		.loc 1 366 7 is_stmt 1 view .LVU88
 413              	.L12:
 367:Src/main.c    ****   }
 368:Src/main.c    **** }
 414              		.loc 1 368 1 is_stmt 0 view .LVU89
 415 00c0 0EB0     		add	sp, sp, #56
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 16


 416              	.LCFI6:
 417              		.cfi_def_cfa_offset 8
 418              		@ sp needed
 419 00c2 10BD     		pop	{r4, pc}
 420              	.L30:
 421              		.align	2
 422              	.L29:
 423 00c4 00000000 		.word	currentState
 424 00c8 00000000 		.word	mode
 425 00cc 00000000 		.word	.LC5
 426 00d0 40000000 		.word	.LC6
 427 00d4 54000000 		.word	.LC7
 428 00d8 94000000 		.word	.LC8
 429 00dc A8000000 		.word	.LC9
 430 00e0 C0000000 		.word	.LC10
 431 00e4 D8000000 		.word	.LC11
 432 00e8 18010000 		.word	.LC12
 433 00ec 4C010000 		.word	.LC14
 434 00f0 00000000 		.word	servoPosition
 435 00f4 30010000 		.word	.LC13
 436 00f8 7C010000 		.word	.LC15
 437              		.cfi_endproc
 438              	.LFE141:
 440              		.section	.text.handleSerialCommunication,"ax",%progbits
 441              		.align	1
 442              		.global	handleSerialCommunication
 443              		.syntax unified
 444              		.thumb
 445              		.thumb_func
 447              	handleSerialCommunication:
 448              	.LFB139:
 259:Src/main.c    ****   char cmdBuffer[32];
 449              		.loc 1 259 38 is_stmt 1 view -0
 450              		.cfi_startproc
 451              		@ args = 0, pretend = 0, frame = 32
 452              		@ frame_needed = 0, uses_anonymous_args = 0
 453 0000 00B5     		push	{lr}
 454              	.LCFI7:
 455              		.cfi_def_cfa_offset 4
 456              		.cfi_offset 14, -4
 457 0002 89B0     		sub	sp, sp, #36
 458              	.LCFI8:
 459              		.cfi_def_cfa_offset 40
 260:Src/main.c    ****   
 460              		.loc 1 260 3 view .LVU91
 263:Src/main.c    ****   
 461              		.loc 1 263 3 view .LVU92
 263:Src/main.c    ****   
 462              		.loc 1 263 16 is_stmt 0 view .LVU93
 463 0004 2021     		movs	r1, #32
 464 0006 6846     		mov	r0, sp
 465 0008 FFF7FEFF 		bl	receiveMessage
 466              	.LVL42:
 265:Src/main.c    ****       // Commande complète reçue, la traiter
 467              		.loc 1 265 3 is_stmt 1 view .LVU94
 265:Src/main.c    ****       // Commande complète reçue, la traiter
 468              		.loc 1 265 6 is_stmt 0 view .LVU95
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 17


 469 000c 0028     		cmp	r0, #0
 470 000e 02DA     		bge	.L34
 471              	.LVL43:
 472              	.L31:
 270:Src/main.c    **** 
 473              		.loc 1 270 1 view .LVU96
 474 0010 09B0     		add	sp, sp, #36
 475              	.LCFI9:
 476              		.cfi_remember_state
 477              		.cfi_def_cfa_offset 4
 478              		@ sp needed
 479 0012 5DF804FB 		ldr	pc, [sp], #4
 480              	.LVL44:
 481              	.L34:
 482              	.LCFI10:
 483              		.cfi_restore_state
 267:Src/main.c    ****   }
 484              		.loc 1 267 7 is_stmt 1 view .LVU97
 485 0016 6846     		mov	r0, sp
 486              	.LVL45:
 267:Src/main.c    ****   }
 487              		.loc 1 267 7 is_stmt 0 view .LVU98
 488 0018 FFF7FEFF 		bl	processCommand
 489              	.LVL46:
 270:Src/main.c    **** 
 490              		.loc 1 270 1 view .LVU99
 491 001c F8E7     		b	.L31
 492              		.cfi_endproc
 493              	.LFE139:
 495              		.section	.rodata.updateSystem.str1.4,"aMS",%progbits,1
 496              		.align	2
 497              	.LC16:
 498 0000 53746172 		.ascii	"Starting Demo mode\000"
 498      74696E67 
 498      2044656D 
 498      6F206D6F 
 498      646500
 499 0013 00       		.align	2
 500              	.LC17:
 501 0014 44656D6F 		.ascii	"Demo cancelled - returning to IDLE state\000"
 501      2063616E 
 501      63656C6C 
 501      6564202D 
 501      20726574 
 502 003d 000000   		.align	2
 503              	.LC18:
 504 0040 44656D6F 		.ascii	"Demo completed. Returning to IDLE state.\000"
 504      20636F6D 
 504      706C6574 
 504      65642E20 
 504      52657475 
 505              		.section	.text.updateSystem,"ax",%progbits
 506              		.align	1
 507              		.global	updateSystem
 508              		.syntax unified
 509              		.thumb
 510              		.thumb_func
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 18


 512              	updateSystem:
 513              	.LFB142:
 369:Src/main.c    **** 
 370:Src/main.c    **** /**
 371:Src/main.c    ****  * @brief Met à jour l'état du système en fonction du mode actuel
 372:Src/main.c    ****  * @details Exécutée périodiquement dans la boucle principale, cette fonction
 373:Src/main.c    ****  * met à jour les LEDs et la position du servo selon l'état actuel du système
 374:Src/main.c    ****  */
 375:Src/main.c    **** void updateSystem(void)
 376:Src/main.c    **** {
 514              		.loc 1 376 1 is_stmt 1 view -0
 515              		.cfi_startproc
 516              		@ args = 0, pretend = 0, frame = 0
 517              		@ frame_needed = 0, uses_anonymous_args = 0
 518 0000 38B5     		push	{r3, r4, r5, lr}
 519              	.LCFI11:
 520              		.cfi_def_cfa_offset 16
 521              		.cfi_offset 3, -16
 522              		.cfi_offset 4, -12
 523              		.cfi_offset 5, -8
 524              		.cfi_offset 14, -4
 377:Src/main.c    ****   static uint32_t lastUpdate = 0;
 525              		.loc 1 377 3 view .LVU101
 378:Src/main.c    ****   uint32_t currentTime = HAL_GetTick();
 526              		.loc 1 378 3 view .LVU102
 527              		.loc 1 378 26 is_stmt 0 view .LVU103
 528 0002 FFF7FEFF 		bl	HAL_GetTick
 529              	.LVL47:
 379:Src/main.c    ****   static uint8_t demoState = 0;  // État de la démo (0: initial, 1: USART, 2: HC-SR04, 3: Servo)
 530              		.loc 1 379 3 is_stmt 1 view .LVU104
 380:Src/main.c    ****   static uint32_t demoStateStartTime = 0;  // Temps de début de l'état actuel de la démo
 531              		.loc 1 380 3 view .LVU105
 381:Src/main.c    ****   
 382:Src/main.c    ****   if (currentTime - lastUpdate >= 100) {
 532              		.loc 1 382 3 view .LVU106
 533              		.loc 1 382 19 is_stmt 0 view .LVU107
 534 0006 524B     		ldr	r3, .L58
 535 0008 1B68     		ldr	r3, [r3]
 536 000a C31A     		subs	r3, r0, r3
 537              		.loc 1 382 6 view .LVU108
 538 000c 632B     		cmp	r3, #99
 539 000e 00D8     		bhi	.L56
 540              	.LVL48:
 541              	.L35:
 383:Src/main.c    ****     lastUpdate = currentTime;
 384:Src/main.c    ****     
 385:Src/main.c    ****     HC_SR04* sensor = HC_SR04_get_instance();
 386:Src/main.c    ****     
 387:Src/main.c    ****     switch (currentState) {
 388:Src/main.c    ****       case STATE_IDLE:
 389:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_BLEU_Pin, GPIO_PIN_RESET);
 390:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_VERT_Pin, GPIO_PIN_RESET);
 391:Src/main.c    ****         Servo_SetToMiddle();
 392:Src/main.c    ****         // Réinitialiser l'état de la démo
 393:Src/main.c    ****         demoState = 0;
 394:Src/main.c    ****         break;
 395:Src/main.c    ****         
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 19


 396:Src/main.c    ****       case STATE_MODE1:
 397:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_BLEU_Pin, GPIO_PIN_SET);
 398:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_VERT_Pin, GPIO_PIN_RESET);
 399:Src/main.c    ****         
 400:Src/main.c    ****         if (sensor->distance >= SERVO_MIN_DISTANCE && sensor->distance <= SERVO_MAX_DISTANCE) {
 401:Src/main.c    ****           uint32_t position = Servo_DistanceToPosition(sensor->distance);
 402:Src/main.c    ****           Servo_SetPosition(position);
 403:Src/main.c    ****         } else {
 404:Src/main.c    ****           Servo_SetToMiddle();
 405:Src/main.c    ****         }
 406:Src/main.c    ****         break;
 407:Src/main.c    ****         
 408:Src/main.c    ****       case STATE_MODE2:
 409:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_VERT_Pin, GPIO_PIN_SET);
 410:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_BLEU_Pin, GPIO_PIN_RESET);
 411:Src/main.c    ****         
 412:Src/main.c    ****         uint32_t position = Servo_ValueToPosition(servoPosition);
 413:Src/main.c    ****         Servo_SetPosition(position);
 414:Src/main.c    ****         break;
 415:Src/main.c    **** 
 416:Src/main.c    ****       case STATE_DEMO:
 417:Src/main.c    ****         // Gestion d'une séquence de démonstration
 418:Src/main.c    ****         switch(demoState) {
 419:Src/main.c    ****           case 0: // État initial: démarrer la démo USART
 420:Src/main.c    ****             HAL_GPIO_WritePin(GPIOD, LED_BLEU_Pin, GPIO_PIN_SET);
 421:Src/main.c    ****             HAL_GPIO_WritePin(GPIOD, LED_VERT_Pin, GPIO_PIN_SET);
 422:Src/main.c    ****             demoState = 1; // Passer à l'état USART
 423:Src/main.c    ****             demoStateStartTime = HAL_GetTick();
 424:Src/main.c    ****             sendMessage("Starting Demo mode");
 425:Src/main.c    ****             break;
 426:Src/main.c    ****             
 427:Src/main.c    ****           case 1: // USART: attendre une réponse
 428:Src/main.c    ****             if (USART_Demo()) {
 429:Src/main.c    ****               demoState = 2; // Passer à l'état HC-SR04
 430:Src/main.c    ****               demoStateStartTime = HAL_GetTick();
 431:Src/main.c    ****             } else {
 432:Src/main.c    ****               // En cas d'échec, revenir à l'état IDLE
 433:Src/main.c    ****               currentState = STATE_IDLE;
 434:Src/main.c    ****               sendMessage("Demo cancelled - returning to IDLE state");
 435:Src/main.c    ****             }
 436:Src/main.c    ****             break;
 437:Src/main.c    ****             
 438:Src/main.c    ****           case 2: // HC-SR04: test du capteur
 439:Src/main.c    ****             HC_SR04_Demo();
 440:Src/main.c    ****             demoState = 3; // Passer à l'état Servo
 441:Src/main.c    ****             demoStateStartTime = HAL_GetTick();
 442:Src/main.c    ****             break;
 443:Src/main.c    ****             
 444:Src/main.c    ****           case 3: // Servo: test du servo
 445:Src/main.c    ****             Servo_Demo();
 446:Src/main.c    ****             // Fin de la démo
 447:Src/main.c    ****             sendMessage("Demo completed. Returning to IDLE state.");
 448:Src/main.c    ****             currentState = STATE_IDLE;
 449:Src/main.c    ****             break;
 450:Src/main.c    ****         }
 451:Src/main.c    ****         break;
 452:Src/main.c    ****     }
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 20


 453:Src/main.c    ****   }
 454:Src/main.c    **** }
 542              		.loc 1 454 1 view .LVU109
 543 0010 38BD     		pop	{r3, r4, r5, pc}
 544              	.LVL49:
 545              	.L56:
 546              	.LBB7:
 383:Src/main.c    ****     lastUpdate = currentTime;
 547              		.loc 1 383 5 is_stmt 1 view .LVU110
 383:Src/main.c    ****     lastUpdate = currentTime;
 548              		.loc 1 383 16 is_stmt 0 view .LVU111
 549 0012 4F4B     		ldr	r3, .L58
 550 0014 1860     		str	r0, [r3]
 385:Src/main.c    ****     
 551              		.loc 1 385 5 is_stmt 1 view .LVU112
 385:Src/main.c    ****     
 552              		.loc 1 385 23 is_stmt 0 view .LVU113
 553 0016 FFF7FEFF 		bl	HC_SR04_get_instance
 554              	.LVL50:
 385:Src/main.c    ****     
 555              		.loc 1 385 23 view .LVU114
 556 001a 0446     		mov	r4, r0
 557              	.LVL51:
 387:Src/main.c    ****       case STATE_IDLE:
 558              		.loc 1 387 5 is_stmt 1 view .LVU115
 559 001c 4D4B     		ldr	r3, .L58+4
 560 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 561 0020 032B     		cmp	r3, #3
 562 0022 F5D8     		bhi	.L35
 563 0024 DFE803F0 		tbb	[pc, r3]
 564              	.L38:
 565 0028 02       		.byte	(.L41-.L38)/2
 566 0029 15       		.byte	(.L40-.L38)/2
 567 002a 3A       		.byte	(.L39-.L38)/2
 568 002b 4E       		.byte	(.L37-.L38)/2
 569              		.p2align 1
 570              	.L41:
 571              	.LBB8:
 389:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_VERT_Pin, GPIO_PIN_RESET);
 572              		.loc 1 389 9 view .LVU116
 573 002c 4A4C     		ldr	r4, .L58+8
 574 002e 0022     		movs	r2, #0
 575 0030 4FF40041 		mov	r1, #32768
 576 0034 2046     		mov	r0, r4
 577              	.LVL52:
 389:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_VERT_Pin, GPIO_PIN_RESET);
 578              		.loc 1 389 9 is_stmt 0 view .LVU117
 579 0036 FFF7FEFF 		bl	HAL_GPIO_WritePin
 580              	.LVL53:
 390:Src/main.c    ****         Servo_SetToMiddle();
 581              		.loc 1 390 9 is_stmt 1 view .LVU118
 582 003a 0022     		movs	r2, #0
 583 003c 4FF48051 		mov	r1, #4096
 584 0040 2046     		mov	r0, r4
 585 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
 586              	.LVL54:
 391:Src/main.c    ****         // Réinitialiser l'état de la démo
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 21


 587              		.loc 1 391 9 view .LVU119
 588 0046 FFF7FEFF 		bl	Servo_SetToMiddle
 589              	.LVL55:
 393:Src/main.c    ****         break;
 590              		.loc 1 393 9 view .LVU120
 393:Src/main.c    ****         break;
 591              		.loc 1 393 19 is_stmt 0 view .LVU121
 592 004a 444B     		ldr	r3, .L58+12
 593 004c 0022     		movs	r2, #0
 594 004e 1A70     		strb	r2, [r3]
 394:Src/main.c    ****         
 595              		.loc 1 394 9 is_stmt 1 view .LVU122
 596 0050 DEE7     		b	.L35
 597              	.LVL56:
 598              	.L40:
 397:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_VERT_Pin, GPIO_PIN_RESET);
 599              		.loc 1 397 9 view .LVU123
 600 0052 414D     		ldr	r5, .L58+8
 601 0054 0122     		movs	r2, #1
 602 0056 4FF40041 		mov	r1, #32768
 603 005a 2846     		mov	r0, r5
 604              	.LVL57:
 397:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_VERT_Pin, GPIO_PIN_RESET);
 605              		.loc 1 397 9 is_stmt 0 view .LVU124
 606 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
 607              	.LVL58:
 398:Src/main.c    ****         
 608              		.loc 1 398 9 is_stmt 1 view .LVU125
 609 0060 0022     		movs	r2, #0
 610 0062 4FF48051 		mov	r1, #4096
 611 0066 2846     		mov	r0, r5
 612 0068 FFF7FEFF 		bl	HAL_GPIO_WritePin
 613              	.LVL59:
 400:Src/main.c    ****           uint32_t position = Servo_DistanceToPosition(sensor->distance);
 614              		.loc 1 400 9 view .LVU126
 400:Src/main.c    ****           uint32_t position = Servo_DistanceToPosition(sensor->distance);
 615              		.loc 1 400 19 is_stmt 0 view .LVU127
 616 006c 94ED050A 		vldr.32	s0, [r4, #20]
 400:Src/main.c    ****           uint32_t position = Servo_DistanceToPosition(sensor->distance);
 617              		.loc 1 400 12 view .LVU128
 618 0070 F1EE047A 		vmov.f32	s15, #5.0e+0
 619 0074 B4EEE70A 		vcmpe.f32	s0, s15
 620 0078 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 621 007c 06DB     		blt	.L42
 400:Src/main.c    ****           uint32_t position = Servo_DistanceToPosition(sensor->distance);
 622              		.loc 1 400 52 discriminator 1 view .LVU129
 623 007e F3EE097A 		vmov.f32	s15, #2.5e+1
 624 0082 B4EEE70A 		vcmpe.f32	s0, s15
 625 0086 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 626 008a 02D9     		bls	.L57
 627              	.L42:
 404:Src/main.c    ****         }
 628              		.loc 1 404 11 is_stmt 1 view .LVU130
 629 008c FFF7FEFF 		bl	Servo_SetToMiddle
 630              	.LVL60:
 631 0090 BEE7     		b	.L35
 632              	.L57:
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 22


 633              	.LBB9:
 401:Src/main.c    ****           Servo_SetPosition(position);
 634              		.loc 1 401 11 view .LVU131
 401:Src/main.c    ****           Servo_SetPosition(position);
 635              		.loc 1 401 31 is_stmt 0 view .LVU132
 636 0092 FFF7FEFF 		bl	Servo_DistanceToPosition
 637              	.LVL61:
 402:Src/main.c    ****         } else {
 638              		.loc 1 402 11 is_stmt 1 view .LVU133
 639 0096 FFF7FEFF 		bl	Servo_SetPosition
 640              	.LVL62:
 402:Src/main.c    ****         } else {
 641              		.loc 1 402 11 is_stmt 0 view .LVU134
 642              	.LBE9:
 400:Src/main.c    ****           uint32_t position = Servo_DistanceToPosition(sensor->distance);
 643              		.loc 1 400 95 view .LVU135
 644 009a B9E7     		b	.L35
 645              	.LVL63:
 646              	.L39:
 409:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_BLEU_Pin, GPIO_PIN_RESET);
 647              		.loc 1 409 9 is_stmt 1 view .LVU136
 648 009c 2E4C     		ldr	r4, .L58+8
 649 009e 0122     		movs	r2, #1
 650 00a0 4FF48051 		mov	r1, #4096
 651 00a4 2046     		mov	r0, r4
 652              	.LVL64:
 409:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_BLEU_Pin, GPIO_PIN_RESET);
 653              		.loc 1 409 9 is_stmt 0 view .LVU137
 654 00a6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 655              	.LVL65:
 410:Src/main.c    ****         
 656              		.loc 1 410 9 is_stmt 1 view .LVU138
 657 00aa 0022     		movs	r2, #0
 658 00ac 4FF40041 		mov	r1, #32768
 659 00b0 2046     		mov	r0, r4
 660 00b2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 661              	.LVL66:
 412:Src/main.c    ****         Servo_SetPosition(position);
 662              		.loc 1 412 9 view .LVU139
 412:Src/main.c    ****         Servo_SetPosition(position);
 663              		.loc 1 412 29 is_stmt 0 view .LVU140
 664 00b6 2A4B     		ldr	r3, .L58+16
 665 00b8 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 666 00ba FFF7FEFF 		bl	Servo_ValueToPosition
 667              	.LVL67:
 413:Src/main.c    ****         break;
 668              		.loc 1 413 9 is_stmt 1 view .LVU141
 669 00be FFF7FEFF 		bl	Servo_SetPosition
 670              	.LVL68:
 414:Src/main.c    **** 
 671              		.loc 1 414 9 view .LVU142
 672 00c2 A5E7     		b	.L35
 673              	.LVL69:
 674              	.L37:
 418:Src/main.c    ****           case 0: // État initial: démarrer la démo USART
 675              		.loc 1 418 9 view .LVU143
 676 00c4 254B     		ldr	r3, .L58+12
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 23


 677 00c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 678 00c8 032B     		cmp	r3, #3
 679 00ca A1D8     		bhi	.L35
 680 00cc DFE803F0 		tbb	[pc, r3]
 681              	.L46:
 682 00d0 02       		.byte	(.L49-.L46)/2
 683 00d1 1A       		.byte	(.L48-.L46)/2
 684 00d2 2C       		.byte	(.L47-.L46)/2
 685 00d3 36       		.byte	(.L45-.L46)/2
 686              		.p2align 1
 687              	.L49:
 420:Src/main.c    ****             HAL_GPIO_WritePin(GPIOD, LED_VERT_Pin, GPIO_PIN_SET);
 688              		.loc 1 420 13 view .LVU144
 689 00d4 204C     		ldr	r4, .L58+8
 690 00d6 0122     		movs	r2, #1
 691 00d8 4FF40041 		mov	r1, #32768
 692 00dc 2046     		mov	r0, r4
 693              	.LVL70:
 420:Src/main.c    ****             HAL_GPIO_WritePin(GPIOD, LED_VERT_Pin, GPIO_PIN_SET);
 694              		.loc 1 420 13 is_stmt 0 view .LVU145
 695 00de FFF7FEFF 		bl	HAL_GPIO_WritePin
 696              	.LVL71:
 421:Src/main.c    ****             demoState = 1; // Passer à l'état USART
 697              		.loc 1 421 13 is_stmt 1 view .LVU146
 698 00e2 0122     		movs	r2, #1
 699 00e4 4FF48051 		mov	r1, #4096
 700 00e8 2046     		mov	r0, r4
 701 00ea FFF7FEFF 		bl	HAL_GPIO_WritePin
 702              	.LVL72:
 422:Src/main.c    ****             demoStateStartTime = HAL_GetTick();
 703              		.loc 1 422 13 view .LVU147
 422:Src/main.c    ****             demoStateStartTime = HAL_GetTick();
 704              		.loc 1 422 23 is_stmt 0 view .LVU148
 705 00ee 1B4B     		ldr	r3, .L58+12
 706 00f0 0122     		movs	r2, #1
 707 00f2 1A70     		strb	r2, [r3]
 423:Src/main.c    ****             sendMessage("Starting Demo mode");
 708              		.loc 1 423 13 is_stmt 1 view .LVU149
 423:Src/main.c    ****             sendMessage("Starting Demo mode");
 709              		.loc 1 423 34 is_stmt 0 view .LVU150
 710 00f4 FFF7FEFF 		bl	HAL_GetTick
 711              	.LVL73:
 423:Src/main.c    ****             sendMessage("Starting Demo mode");
 712              		.loc 1 423 32 discriminator 1 view .LVU151
 713 00f8 1A4B     		ldr	r3, .L58+20
 714 00fa 1860     		str	r0, [r3]
 424:Src/main.c    ****             break;
 715              		.loc 1 424 13 is_stmt 1 view .LVU152
 716 00fc 1A48     		ldr	r0, .L58+24
 717 00fe FFF7FEFF 		bl	sendMessage
 718              	.LVL74:
 425:Src/main.c    ****             
 719              		.loc 1 425 13 view .LVU153
 720 0102 85E7     		b	.L35
 721              	.LVL75:
 722              	.L48:
 428:Src/main.c    ****               demoState = 2; // Passer à l'état HC-SR04
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 24


 723              		.loc 1 428 13 view .LVU154
 428:Src/main.c    ****               demoState = 2; // Passer à l'état HC-SR04
 724              		.loc 1 428 17 is_stmt 0 view .LVU155
 725 0104 FFF7FEFF 		bl	USART_Demo
 726              	.LVL76:
 428:Src/main.c    ****               demoState = 2; // Passer à l'état HC-SR04
 727              		.loc 1 428 16 discriminator 1 view .LVU156
 728 0108 38B1     		cbz	r0, .L50
 429:Src/main.c    ****               demoStateStartTime = HAL_GetTick();
 729              		.loc 1 429 15 is_stmt 1 view .LVU157
 429:Src/main.c    ****               demoStateStartTime = HAL_GetTick();
 730              		.loc 1 429 25 is_stmt 0 view .LVU158
 731 010a 144B     		ldr	r3, .L58+12
 732 010c 0222     		movs	r2, #2
 733 010e 1A70     		strb	r2, [r3]
 430:Src/main.c    ****             } else {
 734              		.loc 1 430 15 is_stmt 1 view .LVU159
 430:Src/main.c    ****             } else {
 735              		.loc 1 430 36 is_stmt 0 view .LVU160
 736 0110 FFF7FEFF 		bl	HAL_GetTick
 737              	.LVL77:
 430:Src/main.c    ****             } else {
 738              		.loc 1 430 34 discriminator 1 view .LVU161
 739 0114 134B     		ldr	r3, .L58+20
 740 0116 1860     		str	r0, [r3]
 741 0118 7AE7     		b	.L35
 742              	.L50:
 433:Src/main.c    ****               sendMessage("Demo cancelled - returning to IDLE state");
 743              		.loc 1 433 15 is_stmt 1 view .LVU162
 433:Src/main.c    ****               sendMessage("Demo cancelled - returning to IDLE state");
 744              		.loc 1 433 28 is_stmt 0 view .LVU163
 745 011a 0E4B     		ldr	r3, .L58+4
 746 011c 0022     		movs	r2, #0
 747 011e 1A70     		strb	r2, [r3]
 434:Src/main.c    ****             }
 748              		.loc 1 434 15 is_stmt 1 view .LVU164
 749 0120 1248     		ldr	r0, .L58+28
 750 0122 FFF7FEFF 		bl	sendMessage
 751              	.LVL78:
 752 0126 73E7     		b	.L35
 753              	.LVL79:
 754              	.L47:
 439:Src/main.c    ****             demoState = 3; // Passer à l'état Servo
 755              		.loc 1 439 13 view .LVU165
 756 0128 FFF7FEFF 		bl	HC_SR04_Demo
 757              	.LVL80:
 440:Src/main.c    ****             demoStateStartTime = HAL_GetTick();
 758              		.loc 1 440 13 view .LVU166
 440:Src/main.c    ****             demoStateStartTime = HAL_GetTick();
 759              		.loc 1 440 23 is_stmt 0 view .LVU167
 760 012c 0B4B     		ldr	r3, .L58+12
 761 012e 0322     		movs	r2, #3
 762 0130 1A70     		strb	r2, [r3]
 441:Src/main.c    ****             break;
 763              		.loc 1 441 13 is_stmt 1 view .LVU168
 441:Src/main.c    ****             break;
 764              		.loc 1 441 34 is_stmt 0 view .LVU169
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 25


 765 0132 FFF7FEFF 		bl	HAL_GetTick
 766              	.LVL81:
 441:Src/main.c    ****             break;
 767              		.loc 1 441 32 discriminator 1 view .LVU170
 768 0136 0B4B     		ldr	r3, .L58+20
 769 0138 1860     		str	r0, [r3]
 442:Src/main.c    ****             
 770              		.loc 1 442 13 is_stmt 1 view .LVU171
 771 013a 69E7     		b	.L35
 772              	.LVL82:
 773              	.L45:
 445:Src/main.c    ****             // Fin de la démo
 774              		.loc 1 445 13 view .LVU172
 775 013c FFF7FEFF 		bl	Servo_Demo
 776              	.LVL83:
 447:Src/main.c    ****             currentState = STATE_IDLE;
 777              		.loc 1 447 13 view .LVU173
 778 0140 0B48     		ldr	r0, .L58+32
 779 0142 FFF7FEFF 		bl	sendMessage
 780              	.LVL84:
 448:Src/main.c    ****             break;
 781              		.loc 1 448 13 view .LVU174
 448:Src/main.c    ****             break;
 782              		.loc 1 448 26 is_stmt 0 view .LVU175
 783 0146 034B     		ldr	r3, .L58+4
 784 0148 0022     		movs	r2, #0
 785 014a 1A70     		strb	r2, [r3]
 449:Src/main.c    ****         }
 786              		.loc 1 449 13 is_stmt 1 view .LVU176
 787              	.LBE8:
 788              	.LBE7:
 789              		.loc 1 454 1 is_stmt 0 view .LVU177
 790 014c 60E7     		b	.L35
 791              	.L59:
 792 014e 00BF     		.align	2
 793              	.L58:
 794 0150 00000000 		.word	lastUpdate.2
 795 0154 00000000 		.word	currentState
 796 0158 000C0240 		.word	1073875968
 797 015c 00000000 		.word	demoState.1
 798 0160 00000000 		.word	servoPosition
 799 0164 00000000 		.word	demoStateStartTime.0
 800 0168 00000000 		.word	.LC16
 801 016c 14000000 		.word	.LC17
 802 0170 40000000 		.word	.LC18
 803              		.cfi_endproc
 804              	.LFE142:
 806              		.section	.text.Error_Handler,"ax",%progbits
 807              		.align	1
 808              		.global	Error_Handler
 809              		.syntax unified
 810              		.thumb
 811              		.thumb_func
 813              	Error_Handler:
 814              	.LFB143:
 455:Src/main.c    **** /* USER CODE END 4 */
 456:Src/main.c    **** 
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 26


 457:Src/main.c    **** /**
 458:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 459:Src/main.c    ****   * @retval None
 460:Src/main.c    ****   */
 461:Src/main.c    **** void Error_Handler(void)
 462:Src/main.c    **** {
 815              		.loc 1 462 1 is_stmt 1 view -0
 816              		.cfi_startproc
 817              		@ Volatile: function does not return.
 818              		@ args = 0, pretend = 0, frame = 0
 819              		@ frame_needed = 0, uses_anonymous_args = 0
 820              		@ link register save eliminated.
 463:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 464:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 465:Src/main.c    ****   __disable_irq();
 821              		.loc 1 465 3 view .LVU179
 822              	.LBB10:
 823              	.LBI10:
 824              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 27


  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 28


  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 29


 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 30


 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 31


 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 32


 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 33


 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 34


 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 35


 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 36


 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 37


 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 38


 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 39


 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 40


 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 41


 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 42


 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 43


 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 825              		.loc 2 960 27 view .LVU180
 826              	.LBB11:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 827              		.loc 2 962 3 view .LVU181
 828              		.syntax unified
 829              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 830 0000 72B6     		cpsid i
 831              	@ 0 "" 2
 832              		.thumb
 833              		.syntax unified
 834              	.L61:
 835              	.LBE11:
 836              	.LBE10:
 466:Src/main.c    ****   while (1)
 837              		.loc 1 466 3 view .LVU182
 467:Src/main.c    ****   {
 468:Src/main.c    ****   }
 838              		.loc 1 468 3 view .LVU183
 466:Src/main.c    ****   while (1)
 839              		.loc 1 466 9 view .LVU184
 840 0002 FEE7     		b	.L61
 841              		.cfi_endproc
 842              	.LFE143:
 844              		.section	.text.SystemClock_Config,"ax",%progbits
 845              		.align	1
 846              		.global	SystemClock_Config
 847              		.syntax unified
 848              		.thumb
 849              		.thumb_func
 851              	SystemClock_Config:
 852              	.LFB138:
 216:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 853              		.loc 1 216 1 view -0
 854              		.cfi_startproc
 855              		@ args = 0, pretend = 0, frame = 80
 856              		@ frame_needed = 0, uses_anonymous_args = 0
 857 0000 10B5     		push	{r4, lr}
 858              	.LCFI12:
 859              		.cfi_def_cfa_offset 8
 860              		.cfi_offset 4, -8
 861              		.cfi_offset 14, -4
 862 0002 94B0     		sub	sp, sp, #80
 863              	.LCFI13:
 864              		.cfi_def_cfa_offset 88
 217:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 865              		.loc 1 217 3 view .LVU186
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 44


 217:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 866              		.loc 1 217 22 is_stmt 0 view .LVU187
 867 0004 08AC     		add	r4, sp, #32
 868 0006 3022     		movs	r2, #48
 869 0008 0021     		movs	r1, #0
 870 000a 2046     		mov	r0, r4
 871 000c FFF7FEFF 		bl	memset
 872              	.LVL85:
 218:Src/main.c    **** 
 873              		.loc 1 218 3 is_stmt 1 view .LVU188
 218:Src/main.c    **** 
 874              		.loc 1 218 22 is_stmt 0 view .LVU189
 875 0010 0023     		movs	r3, #0
 876 0012 0393     		str	r3, [sp, #12]
 877 0014 0493     		str	r3, [sp, #16]
 878 0016 0593     		str	r3, [sp, #20]
 879 0018 0693     		str	r3, [sp, #24]
 880 001a 0793     		str	r3, [sp, #28]
 222:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 881              		.loc 1 222 3 is_stmt 1 view .LVU190
 882              	.LBB12:
 222:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 883              		.loc 1 222 3 view .LVU191
 884 001c 0193     		str	r3, [sp, #4]
 222:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 885              		.loc 1 222 3 view .LVU192
 886 001e 184A     		ldr	r2, .L68
 887 0020 116C     		ldr	r1, [r2, #64]
 888 0022 41F08051 		orr	r1, r1, #268435456
 889 0026 1164     		str	r1, [r2, #64]
 222:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 890              		.loc 1 222 3 view .LVU193
 891 0028 126C     		ldr	r2, [r2, #64]
 892 002a 02F08052 		and	r2, r2, #268435456
 893 002e 0192     		str	r2, [sp, #4]
 222:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 894              		.loc 1 222 3 view .LVU194
 895 0030 019A     		ldr	r2, [sp, #4]
 896              	.LBE12:
 222:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 897              		.loc 1 222 3 view .LVU195
 223:Src/main.c    **** 
 898              		.loc 1 223 3 view .LVU196
 899              	.LBB13:
 223:Src/main.c    **** 
 900              		.loc 1 223 3 view .LVU197
 901 0032 0293     		str	r3, [sp, #8]
 223:Src/main.c    **** 
 902              		.loc 1 223 3 view .LVU198
 903 0034 134A     		ldr	r2, .L68+4
 904 0036 1168     		ldr	r1, [r2]
 905 0038 41F48041 		orr	r1, r1, #16384
 906 003c 1160     		str	r1, [r2]
 223:Src/main.c    **** 
 907              		.loc 1 223 3 view .LVU199
 908 003e 1268     		ldr	r2, [r2]
 909 0040 02F48042 		and	r2, r2, #16384
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 45


 910 0044 0292     		str	r2, [sp, #8]
 223:Src/main.c    **** 
 911              		.loc 1 223 3 view .LVU200
 912 0046 029A     		ldr	r2, [sp, #8]
 913              	.LBE13:
 223:Src/main.c    **** 
 914              		.loc 1 223 3 view .LVU201
 228:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 915              		.loc 1 228 3 view .LVU202
 228:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 916              		.loc 1 228 36 is_stmt 0 view .LVU203
 917 0048 0222     		movs	r2, #2
 918 004a 0892     		str	r2, [sp, #32]
 229:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 919              		.loc 1 229 3 is_stmt 1 view .LVU204
 229:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 920              		.loc 1 229 30 is_stmt 0 view .LVU205
 921 004c 0122     		movs	r2, #1
 922 004e 0B92     		str	r2, [sp, #44]
 230:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 923              		.loc 1 230 3 is_stmt 1 view .LVU206
 230:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 924              		.loc 1 230 41 is_stmt 0 view .LVU207
 925 0050 1022     		movs	r2, #16
 926 0052 0C92     		str	r2, [sp, #48]
 231:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 927              		.loc 1 231 3 is_stmt 1 view .LVU208
 231:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 928              		.loc 1 231 34 is_stmt 0 view .LVU209
 929 0054 0E93     		str	r3, [sp, #56]
 232:Src/main.c    ****   {
 930              		.loc 1 232 3 is_stmt 1 view .LVU210
 232:Src/main.c    ****   {
 931              		.loc 1 232 7 is_stmt 0 view .LVU211
 932 0056 2046     		mov	r0, r4
 933 0058 FFF7FEFF 		bl	HAL_RCC_OscConfig
 934              	.LVL86:
 232:Src/main.c    ****   {
 935              		.loc 1 232 6 discriminator 1 view .LVU212
 936 005c 60B9     		cbnz	r0, .L66
 239:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 937              		.loc 1 239 3 is_stmt 1 view .LVU213
 239:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 938              		.loc 1 239 31 is_stmt 0 view .LVU214
 939 005e 0F23     		movs	r3, #15
 940 0060 0393     		str	r3, [sp, #12]
 241:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 941              		.loc 1 241 3 is_stmt 1 view .LVU215
 241:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 942              		.loc 1 241 34 is_stmt 0 view .LVU216
 943 0062 0021     		movs	r1, #0
 944 0064 0491     		str	r1, [sp, #16]
 242:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 945              		.loc 1 242 3 is_stmt 1 view .LVU217
 242:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 946              		.loc 1 242 35 is_stmt 0 view .LVU218
 947 0066 0591     		str	r1, [sp, #20]
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 46


 243:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 948              		.loc 1 243 3 is_stmt 1 view .LVU219
 243:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 949              		.loc 1 243 36 is_stmt 0 view .LVU220
 950 0068 0691     		str	r1, [sp, #24]
 244:Src/main.c    **** 
 951              		.loc 1 244 3 is_stmt 1 view .LVU221
 244:Src/main.c    **** 
 952              		.loc 1 244 36 is_stmt 0 view .LVU222
 953 006a 0791     		str	r1, [sp, #28]
 246:Src/main.c    ****   {
 954              		.loc 1 246 3 is_stmt 1 view .LVU223
 246:Src/main.c    ****   {
 955              		.loc 1 246 7 is_stmt 0 view .LVU224
 956 006c 03A8     		add	r0, sp, #12
 957 006e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 958              	.LVL87:
 246:Src/main.c    ****   {
 959              		.loc 1 246 6 discriminator 1 view .LVU225
 960 0072 18B9     		cbnz	r0, .L67
 250:Src/main.c    **** 
 961              		.loc 1 250 1 view .LVU226
 962 0074 14B0     		add	sp, sp, #80
 963              	.LCFI14:
 964              		.cfi_remember_state
 965              		.cfi_def_cfa_offset 8
 966              		@ sp needed
 967 0076 10BD     		pop	{r4, pc}
 968              	.L66:
 969              	.LCFI15:
 970              		.cfi_restore_state
 234:Src/main.c    ****   }
 971              		.loc 1 234 5 is_stmt 1 view .LVU227
 972 0078 FFF7FEFF 		bl	Error_Handler
 973              	.LVL88:
 974              	.L67:
 248:Src/main.c    ****   }
 975              		.loc 1 248 5 view .LVU228
 976 007c FFF7FEFF 		bl	Error_Handler
 977              	.LVL89:
 978              	.L69:
 979              		.align	2
 980              	.L68:
 981 0080 00380240 		.word	1073887232
 982 0084 00700040 		.word	1073770496
 983              		.cfi_endproc
 984              	.LFE138:
 986              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 987              		.align	2
 988              	.LC19:
 989 0000 53797374 		.ascii	"System ready. Available commands: mode1, mode2, qui"
 989      656D2072 
 989      65616479 
 989      2E204176 
 989      61696C61 
 990 0033 742C2064 		.ascii	"t, demo\000"
 990      656D6F00 
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 47


 991              		.section	.text.main,"ax",%progbits
 992              		.align	1
 993              		.global	main
 994              		.syntax unified
 995              		.thumb
 996              		.thumb_func
 998              	main:
 999              	.LFB137:
 133:Src/main.c    **** 
 1000              		.loc 1 133 1 view -0
 1001              		.cfi_startproc
 1002              		@ args = 0, pretend = 0, frame = 0
 1003              		@ frame_needed = 0, uses_anonymous_args = 0
 1004 0000 10B5     		push	{r4, lr}
 1005              	.LCFI16:
 1006              		.cfi_def_cfa_offset 8
 1007              		.cfi_offset 4, -8
 1008              		.cfi_offset 14, -4
 142:Src/main.c    **** 
 1009              		.loc 1 142 3 view .LVU230
 1010 0002 FFF7FEFF 		bl	HAL_Init
 1011              	.LVL90:
 149:Src/main.c    **** 
 1012              		.loc 1 149 3 view .LVU231
 1013 0006 FFF7FEFF 		bl	SystemClock_Config
 1014              	.LVL91:
 156:Src/main.c    ****   MX_TIM1_Init();
 1015              		.loc 1 156 3 view .LVU232
 1016 000a FFF7FEFF 		bl	MX_GPIO_Init
 1017              	.LVL92:
 157:Src/main.c    ****   MX_TIM3_Init();
 1018              		.loc 1 157 3 view .LVU233
 1019 000e FFF7FEFF 		bl	MX_TIM1_Init
 1020              	.LVL93:
 158:Src/main.c    ****   MX_USART2_UART_Init();
 1021              		.loc 1 158 3 view .LVU234
 1022 0012 FFF7FEFF 		bl	MX_TIM3_Init
 1023              	.LVL94:
 159:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1024              		.loc 1 159 3 view .LVU235
 1025 0016 FFF7FEFF 		bl	MX_USART2_UART_Init
 1026              	.LVL95:
 162:Src/main.c    ****   if (!sensor) {
 1027              		.loc 1 162 3 view .LVU236
 162:Src/main.c    ****   if (!sensor) {
 1028              		.loc 1 162 21 is_stmt 0 view .LVU237
 1029 001a FFF7FEFF 		bl	HC_SR04_get_instance
 1030              	.LVL96:
 163:Src/main.c    ****     Error_Handler();  // Si l'initialisation échoue, appeler Error_Handler
 1031              		.loc 1 163 3 is_stmt 1 view .LVU238
 163:Src/main.c    ****     Error_Handler();  // Si l'initialisation échoue, appeler Error_Handler
 1032              		.loc 1 163 6 is_stmt 0 view .LVU239
 1033 001e E0B1     		cbz	r0, .L74
 172:Src/main.c    ****   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500); // Position initiale au centre
 1034              		.loc 1 172 3 is_stmt 1 view .LVU240
 1035 0020 0F4C     		ldr	r4, .L75
 1036 0022 0021     		movs	r1, #0
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 48


 1037 0024 2046     		mov	r0, r4
 1038              	.LVL97:
 172:Src/main.c    ****   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500); // Position initiale au centre
 1039              		.loc 1 172 3 is_stmt 0 view .LVU241
 1040 0026 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1041              	.LVL98:
 173:Src/main.c    ****   
 1042              		.loc 1 173 3 is_stmt 1 view .LVU242
 1043 002a 2368     		ldr	r3, [r4]
 1044 002c 40F2DC52 		movw	r2, #1500
 1045 0030 5A63     		str	r2, [r3, #52]
 175:Src/main.c    **** 
 1046              		.loc 1 175 3 view .LVU243
 1047 0032 FFF7FEFF 		bl	HC_SR04_init
 1048              	.LVL99:
 178:Src/main.c    ****   Servo_SetToMiddle(); // Mettre en position neutre au démarrage
 1049              		.loc 1 178 3 view .LVU244
 1050 0036 FFF7FEFF 		bl	Servo_Init
 1051              	.LVL100:
 179:Src/main.c    **** 
 1052              		.loc 1 179 3 view .LVU245
 1053 003a FFF7FEFF 		bl	Servo_SetToMiddle
 1054              	.LVL101:
 181:Src/main.c    ****   /* USER CODE END 2 */
 1055              		.loc 1 181 3 view .LVU246
 1056 003e 0948     		ldr	r0, .L75+4
 1057 0040 FFF7FEFF 		bl	sendMessage
 1058              	.LVL102:
 1059              	.L72:
 186:Src/main.c    ****   {
 1060              		.loc 1 186 3 view .LVU247
 1061              	.LBB14:
 189:Src/main.c    ****     
 1062              		.loc 1 189 5 view .LVU248
 189:Src/main.c    ****     
 1063              		.loc 1 189 23 is_stmt 0 view .LVU249
 1064 0044 FFF7FEFF 		bl	HC_SR04_get_instance
 1065              	.LVL103:
 192:Src/main.c    ****     
 1066              		.loc 1 192 5 is_stmt 1 view .LVU250
 1067 0048 074B     		ldr	r3, .L75+8
 1068 004a 1968     		ldr	r1, [r3]
 1069 004c FFF7FEFF 		bl	HC_SR04_update
 1070              	.LVL104:
 195:Src/main.c    ****     
 1071              		.loc 1 195 5 view .LVU251
 1072 0050 FFF7FEFF 		bl	handleSerialCommunication
 1073              	.LVL105:
 198:Src/main.c    ****     
 1074              		.loc 1 198 5 discriminator 1 view .LVU252
 1075 0054 FFF7FEFF 		bl	updateSystem
 1076              	.LVL106:
 1077              	.LBE14:
 186:Src/main.c    ****   {
 1078              		.loc 1 186 9 view .LVU253
 1079 0058 F4E7     		b	.L72
 1080              	.LVL107:
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 49


 1081              	.L74:
 164:Src/main.c    ****   }
 1082              		.loc 1 164 5 view .LVU254
 1083 005a FFF7FEFF 		bl	Error_Handler
 1084              	.LVL108:
 1085              	.L76:
 164:Src/main.c    ****   }
 1086              		.loc 1 164 5 is_stmt 0 view .LVU255
 1087 005e 00BF     		.align	2
 1088              	.L75:
 1089 0060 00000000 		.word	htim3
 1090 0064 00000000 		.word	.LC19
 1091 0068 00000000 		.word	mode
 1092              		.cfi_endproc
 1093              	.LFE137:
 1095              		.section	.bss.demoStateStartTime.0,"aw",%nobits
 1096              		.align	2
 1099              	demoStateStartTime.0:
 1100 0000 00000000 		.space	4
 1101              		.section	.bss.demoState.1,"aw",%nobits
 1104              	demoState.1:
 1105 0000 00       		.space	1
 1106              		.section	.bss.lastUpdate.2,"aw",%nobits
 1107              		.align	2
 1110              	lastUpdate.2:
 1111 0000 00000000 		.space	4
 1112              		.section	.bss.mode,"aw",%nobits
 1113              		.align	2
 1116              	mode:
 1117 0000 00000000 		.space	4
 1118              		.global	servoPosition
 1119              		.section	.data.servoPosition,"aw"
 1122              	servoPosition:
 1123 0000 06       		.byte	6
 1124              		.global	currentState
 1125              		.section	.bss.currentState,"aw",%nobits
 1128              	currentState:
 1129 0000 00       		.space	1
 1130              		.text
 1131              	.Letext0:
 1132              		.file 3 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/machine/_defa
 1133              		.file 4 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 1134              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 1135              		.file 6 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/includ
 1136              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1137              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1138              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1139              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1140              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1141              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1142              		.file 13 "Src/module/hcsr04.h"
 1143              		.file 14 "Inc/tim.h"
 1144              		.file 15 "Src/module/servo.h"
 1145              		.file 16 "Src/module/usart_comm.h"
 1146              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1147              		.file 18 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/stdio.h"
 1148              		.file 19 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/string.h"
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 50


 1149              		.file 20 "Inc/usart.h"
 1150              		.file 21 "Inc/gpio.h"
 1151              		.file 22 "<built-in>"
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 51


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:21     .rodata.parseCommand.str1.4:00000000 $d
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:37     .text.parseCommand:00000000 $t
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:43     .text.parseCommand:00000000 parseCommand
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:156    .text.parseCommand:00000060 $d
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:1122   .data.servoPosition:00000000 servoPosition
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:166    .rodata.processCommand.str1.4:00000000 $d
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:204    .text.processCommand:00000000 $t
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:210    .text.processCommand:00000000 processCommand
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:235    .text.processCommand:00000010 $d
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:241    .text.processCommand:00000016 $t
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:423    .text.processCommand:000000c4 $d
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:1128   .bss.currentState:00000000 currentState
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:1116   .bss.mode:00000000 mode
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:441    .text.handleSerialCommunication:00000000 $t
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:447    .text.handleSerialCommunication:00000000 handleSerialCommunication
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:496    .rodata.updateSystem.str1.4:00000000 $d
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:506    .text.updateSystem:00000000 $t
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:512    .text.updateSystem:00000000 updateSystem
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:565    .text.updateSystem:00000028 $d
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:569    .text.updateSystem:0000002c $t
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:682    .text.updateSystem:000000d0 $d
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:686    .text.updateSystem:000000d4 $t
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:794    .text.updateSystem:00000150 $d
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:1110   .bss.lastUpdate.2:00000000 lastUpdate.2
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:1104   .bss.demoState.1:00000000 demoState.1
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:1099   .bss.demoStateStartTime.0:00000000 demoStateStartTime.0
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:807    .text.Error_Handler:00000000 $t
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:813    .text.Error_Handler:00000000 Error_Handler
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:845    .text.SystemClock_Config:00000000 $t
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:851    .text.SystemClock_Config:00000000 SystemClock_Config
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:981    .text.SystemClock_Config:00000080 $d
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:987    .rodata.main.str1.4:00000000 $d
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:992    .text.main:00000000 $t
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:998    .text.main:00000000 main
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:1089   .text.main:00000060 $d
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:1096   .bss.demoStateStartTime.0:00000000 $d
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:1105   .bss.demoState.1:00000000 $d
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:1107   .bss.lastUpdate.2:00000000 $d
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:1113   .bss.mode:00000000 $d
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s:1129   .bss.currentState:00000000 $d

UNDEFINED SYMBOLS
strcmp
sscanf
sendMessage
sprintf
receiveMessage
HAL_GetTick
HC_SR04_get_instance
HAL_GPIO_WritePin
Servo_SetToMiddle
Servo_DistanceToPosition
Servo_SetPosition
Servo_ValueToPosition
USART_Demo
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cckWhBEf.s 			page 52


HC_SR04_Demo
Servo_Demo
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_GPIO_Init
MX_TIM1_Init
MX_TIM3_Init
MX_USART2_UART_Init
HAL_TIM_PWM_Start
HC_SR04_init
Servo_Init
HC_SR04_update
htim3
