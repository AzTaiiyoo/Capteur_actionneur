ARM GAS  /tmp/ccSXuRjF.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Src/main.c"
  20              		.section	.rodata.parseCommand.str1.4,"aMS",%progbits,1
  21              		.align	2
  22              	.LC0:
  23 0000 6D6F6465 		.ascii	"mode1\000"
  23      3100
  24 0006 0000     		.align	2
  25              	.LC1:
  26 0008 6D6F6465 		.ascii	"mode2\000"
  26      3200
  27 000e 0000     		.align	2
  28              	.LC2:
  29 0010 71756974 		.ascii	"quit\000"
  29      00
  30 0015 000000   		.align	2
  31              	.LC3:
  32 0018 256400   		.ascii	"%d\000"
  33              		.section	.text.parseCommand,"ax",%progbits
  34              		.align	1
  35              		.global	parseCommand
  36              		.syntax unified
  37              		.thumb
  38              		.thumb_func
  40              	parseCommand:
  41              	.LVL0:
  42              	.LFB140:
   1:Src/main.c    **** /**
   2:Src/main.c    ****  * @file main.c
   3:Src/main.c    ****  * @brief Programme principal pour le système de positionnement servo par distance et commande sé
   4:Src/main.c    ****  * @details Ce fichier contient le programme principal qui contrôle un servo-moteur selon deux
   5:Src/main.c    ****  * modes d'opération: un mode basé sur la distance mesurée par un capteur HC-SR04 et
   6:Src/main.c    ****  * un mode basé sur des commandes reçues via la liaison série.
   7:Src/main.c    ****  * @author STM32 Team
   8:Src/main.c    ****  * @date 2025
   9:Src/main.c    ****  */
  10:Src/main.c    **** 
  11:Src/main.c    **** /* USER CODE BEGIN Header */
  12:Src/main.c    **** /**
  13:Src/main.c    ****   ******************************************************************************
ARM GAS  /tmp/ccSXuRjF.s 			page 2


  14:Src/main.c    ****   * @file           : main.c
  15:Src/main.c    ****   * @brief          : Main program body
  16:Src/main.c    ****   ******************************************************************************
  17:Src/main.c    ****   * @attention
  18:Src/main.c    ****   *
  19:Src/main.c    ****   * Copyright (c) 2025 STMicroelectronics.
  20:Src/main.c    ****   * All rights reserved.
  21:Src/main.c    ****   *
  22:Src/main.c    ****   * This software is licensed under terms that can be found in the LICENSE file
  23:Src/main.c    ****   * in the root directory of this software component.
  24:Src/main.c    ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   ******************************************************************************
  27:Src/main.c    ****   */
  28:Src/main.c    **** /* USER CODE END Header */
  29:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  30:Src/main.c    **** #include "main.h"
  31:Src/main.c    **** #include "tim.h"
  32:Src/main.c    **** #include "usart.h"
  33:Src/main.c    **** #include "gpio.h"
  34:Src/main.c    **** #include "module/hcsr04.h"
  35:Src/main.c    **** #include "module/servo.h"
  36:Src/main.c    **** #include "module/usart_comm.h"
  37:Src/main.c    **** 
  38:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  39:Src/main.c    **** /* USER CODE BEGIN Includes */
  40:Src/main.c    **** #include <stdint.h>
  41:Src/main.c    **** #include <stdio.h>
  42:Src/main.c    **** #include <string.h>
  43:Src/main.c    **** /* USER CODE END Includes */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  46:Src/main.c    **** /* USER CODE BEGIN PTD */
  47:Src/main.c    **** /**
  48:Src/main.c    ****  * @typedef SystemState
  49:Src/main.c    ****  * @brief Énumération des états possibles du système
  50:Src/main.c    ****  */
  51:Src/main.c    **** typedef enum {
  52:Src/main.c    ****   STATE_IDLE,    /**< État initial/neutre */
  53:Src/main.c    ****   STATE_MODE1,   /**< Mode 1: LED bleue + servo positionné selon distance HCSR04 */
  54:Src/main.c    ****   STATE_MODE2    /**< Mode 2: LED verte + servo positionné selon consigne série */
  55:Src/main.c    **** } SystemState;
  56:Src/main.c    **** 
  57:Src/main.c    **** /**
  58:Src/main.c    ****  * @typedef Command
  59:Src/main.c    ****  * @brief Énumération des commandes reconnues par le système
  60:Src/main.c    ****  */
  61:Src/main.c    **** typedef enum {
  62:Src/main.c    ****   CMD_NONE,     /**< Aucune commande ou commande non reconnue */
  63:Src/main.c    ****   CMD_MODE1,    /**< Commande pour activer le mode 1 */
  64:Src/main.c    ****   CMD_MODE2,    /**< Commande pour activer le mode 2 */
  65:Src/main.c    ****   CMD_QUIT,     /**< Commande pour revenir à l'état IDLE */
  66:Src/main.c    ****   CMD_VALUE     /**< Valeur numérique pour positionner le servo en mode 2 */
  67:Src/main.c    **** } Command;
  68:Src/main.c    **** 
  69:Src/main.c    **** /**
  70:Src/main.c    ****  * @var currentState
ARM GAS  /tmp/ccSXuRjF.s 			page 3


  71:Src/main.c    ****  * @brief État actuel du système
  72:Src/main.c    ****  */
  73:Src/main.c    **** SystemState currentState = STATE_IDLE;
  74:Src/main.c    **** 
  75:Src/main.c    **** /**
  76:Src/main.c    ****  * @var servoPosition
  77:Src/main.c    ****  * @brief Position actuelle demandée pour le servo (de 1 à 12)
  78:Src/main.c    ****  */
  79:Src/main.c    **** uint8_t servoPosition = 6;  // Position par défaut (milieu)
  80:Src/main.c    **** 
  81:Src/main.c    **** /**
  82:Src/main.c    ****  * @var mode
  83:Src/main.c    ****  * @brief Mode de fonctionnement actuel (0 = IDLE, 1 = MODE1, 2 = MODE2)
  84:Src/main.c    ****  */
  85:Src/main.c    **** static int mode; 
  86:Src/main.c    **** /* USER CODE END PTD */
  87:Src/main.c    **** 
  88:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  89:Src/main.c    **** /* USER CODE BEGIN PD */
  90:Src/main.c    **** /**
  91:Src/main.c    ****  * @brief Traite une commande reçue via la communication série
  92:Src/main.c    ****  * @param command Chaîne de caractères contenant la commande à traiter
  93:Src/main.c    ****  */
  94:Src/main.c    **** void processCommand(char* command);
  95:Src/main.c    **** 
  96:Src/main.c    **** /**
  97:Src/main.c    ****  * @brief Analyse une chaîne de caractères pour identifier la commande
  98:Src/main.c    ****  * @param command Chaîne de caractères à analyser
  99:Src/main.c    ****  * @return Type de commande identifiée
 100:Src/main.c    ****  */
 101:Src/main.c    **** Command parseCommand(char* command);
 102:Src/main.c    **** 
 103:Src/main.c    **** /**
 104:Src/main.c    ****  * @brief Met à jour l'état du système en fonction du mode actuel
 105:Src/main.c    ****  */
 106:Src/main.c    **** void updateSystem(void);
 107:Src/main.c    **** 
 108:Src/main.c    **** /**
 109:Src/main.c    ****  * @brief Gère la réception des commandes via la liaison série
 110:Src/main.c    ****  */
 111:Src/main.c    **** void handleSerialCommunication(void);
 112:Src/main.c    **** 
 113:Src/main.c    **** /* USER CODE END PD */
 114:Src/main.c    **** 
 115:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
 116:Src/main.c    **** /* USER CODE BEGIN PM */
 117:Src/main.c    **** 
 118:Src/main.c    **** /* USER CODE END PM */
 119:Src/main.c    **** 
 120:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
 121:Src/main.c    **** 
 122:Src/main.c    **** /* USER CODE BEGIN PV */
 123:Src/main.c    **** 
 124:Src/main.c    **** /* USER CODE END PV */
 125:Src/main.c    **** 
 126:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 127:Src/main.c    **** /**
ARM GAS  /tmp/ccSXuRjF.s 			page 4


 128:Src/main.c    ****  * @brief Configure l'horloge système
 129:Src/main.c    ****  */
 130:Src/main.c    **** void SystemClock_Config(void);
 131:Src/main.c    **** /* USER CODE BEGIN PFP */
 132:Src/main.c    **** 
 133:Src/main.c    **** /* USER CODE END PFP */
 134:Src/main.c    **** 
 135:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 136:Src/main.c    **** /* USER CODE BEGIN 0 */
 137:Src/main.c    **** 
 138:Src/main.c    **** /* USER CODE END 0 */
 139:Src/main.c    **** 
 140:Src/main.c    **** /**
 141:Src/main.c    ****   * @brief  Point d'entrée principal du programme
 142:Src/main.c    ****   * @retval int Valeur de retour (normalement jamais atteinte)
 143:Src/main.c    ****   */
 144:Src/main.c    **** int main(void)
 145:Src/main.c    **** {
 146:Src/main.c    **** 
 147:Src/main.c    ****   /* USER CODE BEGIN 1 */
 148:Src/main.c    ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 149:Src/main.c    ****   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 150:Src/main.c    ****   
 151:Src/main.c    ****   // Initialisation du capteur HC-SR04
 152:Src/main.c    ****   HC_SR04* sensor = HC_SR04_get_instance();  // Obtenir l'instance du capteur HC-SR04
 153:Src/main.c    ****   if (!sensor) {
 154:Src/main.c    ****     Error_Handler();  // Si l'initialisation échoue, appeler Error_Handler
 155:Src/main.c    ****   }
 156:Src/main.c    ****   /* USER CODE END 1 */
 157:Src/main.c    **** 
 158:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 159:Src/main.c    **** 
 160:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 161:Src/main.c    ****   HAL_Init();
 162:Src/main.c    **** 
 163:Src/main.c    ****   /* USER CODE BEGIN Init */
 164:Src/main.c    **** 
 165:Src/main.c    ****   /* USER CODE END Init */
 166:Src/main.c    **** 
 167:Src/main.c    ****   /* Configure the system clock */
 168:Src/main.c    ****   SystemClock_Config();
 169:Src/main.c    **** 
 170:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 171:Src/main.c    **** 
 172:Src/main.c    ****   /* USER CODE END SysInit */
 173:Src/main.c    **** 
 174:Src/main.c    ****   /* Initialize all configured peripherals */
 175:Src/main.c    ****   MX_GPIO_Init();
 176:Src/main.c    ****   // MX_TIM6_Init();
 177:Src/main.c    ****   MX_TIM1_Init();
 178:Src/main.c    ****   // MX_UART4_Init();
 179:Src/main.c    ****   MX_USART2_UART_Init();
 180:Src/main.c    ****   MX_TIM3_Init();
 181:Src/main.c    ****   /* USER CODE BEGIN 2 */
 182:Src/main.c    ****   
 183:Src/main.c    ****   // Lancement de la PWM sur le canal 1 de TIM1
 184:Src/main.c    ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Start PWM on TIM1 Channel 1
ARM GAS  /tmp/ccSXuRjF.s 			page 5


 185:Src/main.c    ****   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0); // Set initial duty cycle to 0%
 186:Src/main.c    **** 
 187:Src/main.c    ****   // Démarrer la PWM pour le servo-moteur
 188:Src/main.c    ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 189:Src/main.c    ****   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500); // Position initiale au centre
 190:Src/main.c    ****   
 191:Src/main.c    ****   /* USER CODE BEGIN 2 */
 192:Src/main.c    ****   HC_SR04_init(); // Initialisation du capteur HC-SR04
 193:Src/main.c    **** 
 194:Src/main.c    ****     // Initialiser le servo
 195:Src/main.c    ****   Servo_Init();
 196:Src/main.c    ****   Servo_SetToMiddle(); // Mettre en position neutre au démarrage
 197:Src/main.c    **** 
 198:Src/main.c    ****   sendMessage("System ready. Available commands: mode1, mode2, quit");
 199:Src/main.c    **** 
 200:Src/main.c    ****   /* USER CODE END 2 */
 201:Src/main.c    **** 
 202:Src/main.c    ****   /* Infinite loop */
 203:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 204:Src/main.c    ****   while (1)
 205:Src/main.c    **** {
 206:Src/main.c    ****   // Obtenir l'instance du capteur
 207:Src/main.c    ****   HC_SR04* sensor = HC_SR04_get_instance();
 208:Src/main.c    ****   
 209:Src/main.c    ****   // Mettre à jour la distance et contrôler les LEDs
 210:Src/main.c    ****   HC_SR04_update(sensor, mode);
 211:Src/main.c    ****   
 212:Src/main.c    ****   // Gérer la communication série pour les commandes
 213:Src/main.c    ****   handleSerialCommunication();
 214:Src/main.c    ****   
 215:Src/main.c    ****   // Mettre à jour l'état du système en fonction du mode
 216:Src/main.c    ****   updateSystem();
 217:Src/main.c    ****   
 218:Src/main.c    ****   // Petite pause pour éviter de surcharger le CPU
 219:Src/main.c    ****   HAL_Delay(10);
 220:Src/main.c    **** }
 221:Src/main.c    ****   /* USER CODE END WHILE */
 222:Src/main.c    **** 
 223:Src/main.c    ****   /* USER CODE BEGIN 3 */
 224:Src/main.c    ****   // Ne devrait jamais arriver
 225:Src/main.c    ****   // Error_Handler();
 226:Src/main.c    ****   /* USER CODE END 3 */
 227:Src/main.c    **** }
 228:Src/main.c    **** 
 229:Src/main.c    **** /**
 230:Src/main.c    ****   * @brief System Clock Configuration
 231:Src/main.c    ****   * @retval None
 232:Src/main.c    ****   */
 233:Src/main.c    **** void SystemClock_Config(void)
 234:Src/main.c    **** {
 235:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 236:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 237:Src/main.c    **** 
 238:Src/main.c    ****   /** Configure the main internal regulator output voltage
 239:Src/main.c    ****   */
 240:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 241:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
ARM GAS  /tmp/ccSXuRjF.s 			page 6


 242:Src/main.c    **** 
 243:Src/main.c    ****   /** Initializes the RCC Oscillators according to the specified parameters
 244:Src/main.c    ****   * in the RCC_OscInitTypeDef structure.
 245:Src/main.c    ****   */
 246:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 247:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 248:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 249:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 250:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 251:Src/main.c    ****   {
 252:Src/main.c    ****     Error_Handler();
 253:Src/main.c    ****   }
 254:Src/main.c    **** 
 255:Src/main.c    ****   /** Initializes the CPU, AHB and APB buses clocks
 256:Src/main.c    ****   */
 257:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 258:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 259:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 260:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 261:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 262:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 263:Src/main.c    **** 
 264:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 265:Src/main.c    ****   {
 266:Src/main.c    ****     Error_Handler();
 267:Src/main.c    ****   }
 268:Src/main.c    **** }
 269:Src/main.c    **** 
 270:Src/main.c    **** /* USER CODE BEGIN 4 */
 271:Src/main.c    **** /**
 272:Src/main.c    ****  * @brief Gère la réception des commandes via la liaison série
 273:Src/main.c    ****  * @details Cette fonction attend de façon non-bloquante une commande sur la 
 274:Src/main.c    ****  * liaison série. Lorsqu'une commande complète est reçue, elle est passée
 275:Src/main.c    ****  * à la fonction processCommand pour traitement.
 276:Src/main.c    ****  */
 277:Src/main.c    **** void handleSerialCommunication(void) {
 278:Src/main.c    ****   char cmdBuffer[32];
 279:Src/main.c    ****   
 280:Src/main.c    ****   // Essayer de recevoir une commande (non-bloquant maintenant)
 281:Src/main.c    ****   int result = receiveMessage(cmdBuffer, sizeof(cmdBuffer));
 282:Src/main.c    ****   
 283:Src/main.c    ****   if (result >= 0) {
 284:Src/main.c    ****       // Commande complète reçue, la traiter
 285:Src/main.c    ****       processCommand(cmdBuffer);
 286:Src/main.c    ****   }
 287:Src/main.c    ****   // Si result < 0, aucune commande complète n'a été reçue, on continue l'exécution
 288:Src/main.c    **** }
 289:Src/main.c    **** 
 290:Src/main.c    **** /**
 291:Src/main.c    ****  * @brief Analyse la commande reçue
 292:Src/main.c    ****  * @param command Chaîne de caractères contenant la commande
 293:Src/main.c    ****  * @return Type de commande identifiée
 294:Src/main.c    ****  * @details Reconnaît les commandes "mode1", "mode2", "quit" et les valeurs numériques
 295:Src/main.c    ****  * entre 1 et 12 pour le positionnement du servo en mode 2
 296:Src/main.c    ****  */
 297:Src/main.c    **** Command parseCommand(char* command)
 298:Src/main.c    **** {
ARM GAS  /tmp/ccSXuRjF.s 			page 7


  43              		.loc 1 298 1 view -0
  44              		.cfi_startproc
  45              		@ args = 0, pretend = 0, frame = 8
  46              		@ frame_needed = 0, uses_anonymous_args = 0
  47              		.loc 1 298 1 is_stmt 0 view .LVU1
  48 0000 10B5     		push	{r4, lr}
  49              	.LCFI0:
  50              		.cfi_def_cfa_offset 8
  51              		.cfi_offset 4, -8
  52              		.cfi_offset 14, -4
  53 0002 82B0     		sub	sp, sp, #8
  54              	.LCFI1:
  55              		.cfi_def_cfa_offset 16
  56 0004 0446     		mov	r4, r0
 299:Src/main.c    ****   if (strcmp(command, "mode1") == 0) {
  57              		.loc 1 299 3 is_stmt 1 view .LVU2
  58              		.loc 1 299 7 is_stmt 0 view .LVU3
  59 0006 1349     		ldr	r1, .L9
  60 0008 FFF7FEFF 		bl	strcmp
  61              	.LVL1:
  62              		.loc 1 299 6 discriminator 1 view .LVU4
  63 000c D0B1     		cbz	r0, .L4
 300:Src/main.c    ****     return CMD_MODE1;
 301:Src/main.c    ****   }
 302:Src/main.c    ****   else if (strcmp(command, "mode2") == 0) {
  64              		.loc 1 302 8 is_stmt 1 view .LVU5
  65              		.loc 1 302 12 is_stmt 0 view .LVU6
  66 000e 1249     		ldr	r1, .L9+4
  67 0010 2046     		mov	r0, r4
  68 0012 FFF7FEFF 		bl	strcmp
  69              	.LVL2:
  70              		.loc 1 302 11 discriminator 1 view .LVU7
  71 0016 C0B1     		cbz	r0, .L5
 303:Src/main.c    ****     return CMD_MODE2;
 304:Src/main.c    ****   }
 305:Src/main.c    ****   else if (strcmp(command, "quit") == 0) {
  72              		.loc 1 305 8 is_stmt 1 view .LVU8
  73              		.loc 1 305 12 is_stmt 0 view .LVU9
  74 0018 1049     		ldr	r1, .L9+8
  75 001a 2046     		mov	r0, r4
  76 001c FFF7FEFF 		bl	strcmp
  77              	.LVL3:
  78              		.loc 1 305 11 discriminator 1 view .LVU10
  79 0020 A8B1     		cbz	r0, .L6
  80              	.LBB4:
 306:Src/main.c    ****     return CMD_QUIT;
 307:Src/main.c    ****   }
 308:Src/main.c    ****   else {
 309:Src/main.c    ****     // Vérifier si c'est une valeur numérique (pour le mode 2)
 310:Src/main.c    ****     int value;
  81              		.loc 1 310 5 is_stmt 1 view .LVU11
 311:Src/main.c    ****     if (sscanf(command, "%d", &value) == 1) {
  82              		.loc 1 311 5 view .LVU12
  83              		.loc 1 311 9 is_stmt 0 view .LVU13
  84 0022 01AA     		add	r2, sp, #4
  85 0024 0E49     		ldr	r1, .L9+12
  86 0026 2046     		mov	r0, r4
ARM GAS  /tmp/ccSXuRjF.s 			page 8


  87 0028 FFF7FEFF 		bl	sscanf
  88              	.LVL4:
  89              		.loc 1 311 8 discriminator 1 view .LVU14
  90 002c 0128     		cmp	r0, #1
  91 002e 01D0     		beq	.L8
  92              	.L3:
  93              	.LBE4:
 312:Src/main.c    ****       if (value >= 1 && value <= 12) {
 313:Src/main.c    ****         servoPosition = value;
 314:Src/main.c    ****         return CMD_VALUE;
 315:Src/main.c    ****       }
 316:Src/main.c    ****     }
 317:Src/main.c    ****   }
 318:Src/main.c    ****   
 319:Src/main.c    ****   return CMD_NONE;
  94              		.loc 1 319 3 is_stmt 1 view .LVU15
  95              		.loc 1 319 10 is_stmt 0 view .LVU16
  96 0030 0020     		movs	r0, #0
  97 0032 08E0     		b	.L2
  98              	.L8:
  99              	.LBB5:
 312:Src/main.c    ****       if (value >= 1 && value <= 12) {
 100              		.loc 1 312 7 is_stmt 1 view .LVU17
 312:Src/main.c    ****       if (value >= 1 && value <= 12) {
 101              		.loc 1 312 22 is_stmt 0 view .LVU18
 102 0034 019B     		ldr	r3, [sp, #4]
 103 0036 5A1E     		subs	r2, r3, #1
 312:Src/main.c    ****       if (value >= 1 && value <= 12) {
 104              		.loc 1 312 10 view .LVU19
 105 0038 0B2A     		cmp	r2, #11
 106 003a F9D8     		bhi	.L3
 313:Src/main.c    ****         return CMD_VALUE;
 107              		.loc 1 313 9 is_stmt 1 view .LVU20
 313:Src/main.c    ****         return CMD_VALUE;
 108              		.loc 1 313 23 is_stmt 0 view .LVU21
 109 003c 094A     		ldr	r2, .L9+16
 110 003e 1370     		strb	r3, [r2]
 314:Src/main.c    ****       }
 111              		.loc 1 314 9 is_stmt 1 view .LVU22
 314:Src/main.c    ****       }
 112              		.loc 1 314 16 is_stmt 0 view .LVU23
 113 0040 0420     		movs	r0, #4
 114 0042 00E0     		b	.L2
 115              	.L4:
 116              	.LBE5:
 300:Src/main.c    ****   }
 117              		.loc 1 300 12 view .LVU24
 118 0044 0120     		movs	r0, #1
 119              	.L2:
 320:Src/main.c    **** }
 120              		.loc 1 320 1 view .LVU25
 121 0046 02B0     		add	sp, sp, #8
 122              	.LCFI2:
 123              		.cfi_remember_state
 124              		.cfi_def_cfa_offset 8
 125              		@ sp needed
 126 0048 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccSXuRjF.s 			page 9


 127              	.LVL5:
 128              	.L5:
 129              	.LCFI3:
 130              		.cfi_restore_state
 303:Src/main.c    ****   }
 131              		.loc 1 303 12 view .LVU26
 132 004a 0220     		movs	r0, #2
 133 004c FBE7     		b	.L2
 134              	.L6:
 306:Src/main.c    ****   }
 135              		.loc 1 306 12 view .LVU27
 136 004e 0320     		movs	r0, #3
 137 0050 F9E7     		b	.L2
 138              	.L10:
 139 0052 00BF     		.align	2
 140              	.L9:
 141 0054 00000000 		.word	.LC0
 142 0058 08000000 		.word	.LC1
 143 005c 10000000 		.word	.LC2
 144 0060 18000000 		.word	.LC3
 145 0064 00000000 		.word	servoPosition
 146              		.cfi_endproc
 147              	.LFE140:
 149              		.section	.rodata.processCommand.str1.4,"aMS",%progbits,1
 150              		.align	2
 151              	.LC4:
 152 0000 4D6F6465 		.ascii	"Mode 1 activated: LED blue + servo follows ultrason"
 152      20312061 
 152      63746976 
 152      61746564 
 152      3A204C45 
 153 0033 69632073 		.ascii	"ic sensor\000"
 153      656E736F 
 153      7200
 154 003d 000000   		.align	2
 155              	.LC5:
 156 0040 416C7265 		.ascii	"Already in Mode 1\000"
 156      61647920 
 156      696E204D 
 156      6F646520 
 156      3100
 157 0052 0000     		.align	2
 158              	.LC6:
 159 0054 4D6F6465 		.ascii	"Mode 2 activated: LED green + servo follows serial "
 159      20322061 
 159      63746976 
 159      61746564 
 159      3A204C45 
 160 0087 696E7075 		.ascii	"input (1-12)\000"
 160      74202831 
 160      2D313229 
 160      00
 161              		.align	2
 162              	.LC7:
 163 0094 416C7265 		.ascii	"Already in Mode 2\000"
 163      61647920 
 163      696E204D 
ARM GAS  /tmp/ccSXuRjF.s 			page 10


 163      6F646520 
 163      3200
 164 00a6 0000     		.align	2
 165              	.LC8:
 166 00a8 52657475 		.ascii	"Returned to idle state\000"
 166      726E6564 
 166      20746F20 
 166      69646C65 
 166      20737461 
 167 00bf 00       		.align	2
 168              	.LC9:
 169 00c0 416C7265 		.ascii	"Already in idle state\000"
 169      61647920 
 169      696E2069 
 169      646C6520 
 169      73746174 
 170 00d6 0000     		.align	2
 171              	.LC10:
 172 00d8 53657276 		.ascii	"Servo position set to %d\000"
 172      6F20706F 
 172      73697469 
 172      6F6E2073 
 172      65742074 
 173 00f1 000000   		.align	2
 174              	.LC11:
 175 00f4 4572726F 		.ascii	"Error: Can only set servo position in Mode 2\000"
 175      723A2043 
 175      616E206F 
 175      6E6C7920 
 175      73657420 
 176 0121 000000   		.align	2
 177              	.LC12:
 178 0124 556E6B6E 		.ascii	"Unknown command. Available: mode1, mode2, quit, or "
 178      6F776E20 
 178      636F6D6D 
 178      616E642E 
 178      20417661 
 179 0157 76616C75 		.ascii	"value (1-12) in Mode 2\000"
 179      65202831 
 179      2D313229 
 179      20696E20 
 179      4D6F6465 
 180              		.section	.text.processCommand,"ax",%progbits
 181              		.align	1
 182              		.global	processCommand
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 187              	processCommand:
 188              	.LVL6:
 189              	.LFB141:
 321:Src/main.c    **** 
 322:Src/main.c    **** /**
 323:Src/main.c    ****  * @brief Traite la commande reçue et met à jour l'état du système
 324:Src/main.c    ****  * @param command Chaîne de caractères contenant la commande
 325:Src/main.c    ****  * @details Selon la commande identifiée, change l'état du système et
 326:Src/main.c    ****  * envoie un message de confirmation ou d'erreur
ARM GAS  /tmp/ccSXuRjF.s 			page 11


 327:Src/main.c    ****  */
 328:Src/main.c    **** void processCommand(char* command)
 329:Src/main.c    **** {
 190              		.loc 1 329 1 is_stmt 1 view -0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 56
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              		.loc 1 329 1 is_stmt 0 view .LVU29
 195 0000 00B5     		push	{lr}
 196              	.LCFI4:
 197              		.cfi_def_cfa_offset 4
 198              		.cfi_offset 14, -4
 199 0002 8FB0     		sub	sp, sp, #60
 200              	.LCFI5:
 201              		.cfi_def_cfa_offset 64
 330:Src/main.c    ****   Command cmd = parseCommand(command);
 202              		.loc 1 330 3 is_stmt 1 view .LVU30
 203              		.loc 1 330 17 is_stmt 0 view .LVU31
 204 0004 FFF7FEFF 		bl	parseCommand
 205              	.LVL7:
 331:Src/main.c    ****   
 332:Src/main.c    ****   switch (cmd) {
 206              		.loc 1 332 3 is_stmt 1 view .LVU32
 207 0008 0428     		cmp	r0, #4
 208 000a 49D8     		bhi	.L11
 209 000c DFE800F0 		tbb	[pc, r0]
 210              	.L14:
 211 0010 45       		.byte	(.L18-.L14)/2
 212 0011 03       		.byte	(.L17-.L14)/2
 213 0012 14       		.byte	(.L16-.L14)/2
 214 0013 25       		.byte	(.L15-.L14)/2
 215 0014 33       		.byte	(.L13-.L14)/2
 216 0015 00       		.p2align 1
 217              	.L17:
 333:Src/main.c    ****     case CMD_MODE1:
 334:Src/main.c    ****       if (currentState != STATE_MODE1) {
 218              		.loc 1 334 7 view .LVU33
 219              		.loc 1 334 24 is_stmt 0 view .LVU34
 220 0016 244B     		ldr	r3, .L26
 221 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 222              		.loc 1 334 10 view .LVU35
 223 001a 012B     		cmp	r3, #1
 224 001c 08D0     		beq	.L19
 335:Src/main.c    ****         currentState = STATE_MODE1;
 225              		.loc 1 335 9 is_stmt 1 view .LVU36
 226              		.loc 1 335 22 is_stmt 0 view .LVU37
 227 001e 0123     		movs	r3, #1
 228 0020 214A     		ldr	r2, .L26
 229 0022 1370     		strb	r3, [r2]
 336:Src/main.c    ****         mode = 1;
 230              		.loc 1 336 9 is_stmt 1 view .LVU38
 231              		.loc 1 336 14 is_stmt 0 view .LVU39
 232 0024 214A     		ldr	r2, .L26+4
 233 0026 1360     		str	r3, [r2]
 337:Src/main.c    ****         sendMessage("Mode 1 activated: LED blue + servo follows ultrasonic sensor");
 234              		.loc 1 337 9 is_stmt 1 view .LVU40
 235 0028 2148     		ldr	r0, .L26+8
ARM GAS  /tmp/ccSXuRjF.s 			page 12


 236              	.LVL8:
 237              		.loc 1 337 9 is_stmt 0 view .LVU41
 238 002a FFF7FEFF 		bl	sendMessage
 239              	.LVL9:
 240 002e 37E0     		b	.L11
 241              	.LVL10:
 242              	.L19:
 338:Src/main.c    ****       } else {
 339:Src/main.c    ****         sendMessage("Already in Mode 1");
 243              		.loc 1 339 9 is_stmt 1 view .LVU42
 244 0030 2048     		ldr	r0, .L26+12
 245              	.LVL11:
 246              		.loc 1 339 9 is_stmt 0 view .LVU43
 247 0032 FFF7FEFF 		bl	sendMessage
 248              	.LVL12:
 249 0036 33E0     		b	.L11
 250              	.LVL13:
 251              	.L16:
 340:Src/main.c    ****       }
 341:Src/main.c    ****       break;
 342:Src/main.c    ****       
 343:Src/main.c    ****     case CMD_MODE2:
 344:Src/main.c    ****       if (currentState != STATE_MODE2) {
 252              		.loc 1 344 7 is_stmt 1 view .LVU44
 253              		.loc 1 344 24 is_stmt 0 view .LVU45
 254 0038 1B4B     		ldr	r3, .L26
 255 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 256              		.loc 1 344 10 view .LVU46
 257 003c 022B     		cmp	r3, #2
 258 003e 08D0     		beq	.L20
 345:Src/main.c    ****         currentState = STATE_MODE2;
 259              		.loc 1 345 9 is_stmt 1 view .LVU47
 260              		.loc 1 345 22 is_stmt 0 view .LVU48
 261 0040 0223     		movs	r3, #2
 262 0042 194A     		ldr	r2, .L26
 263 0044 1370     		strb	r3, [r2]
 346:Src/main.c    ****         mode = 2;
 264              		.loc 1 346 9 is_stmt 1 view .LVU49
 265              		.loc 1 346 14 is_stmt 0 view .LVU50
 266 0046 194A     		ldr	r2, .L26+4
 267 0048 1360     		str	r3, [r2]
 347:Src/main.c    ****         sendMessage("Mode 2 activated: LED green + servo follows serial input (1-12)");
 268              		.loc 1 347 9 is_stmt 1 view .LVU51
 269 004a 1B48     		ldr	r0, .L26+16
 270              	.LVL14:
 271              		.loc 1 347 9 is_stmt 0 view .LVU52
 272 004c FFF7FEFF 		bl	sendMessage
 273              	.LVL15:
 274 0050 26E0     		b	.L11
 275              	.LVL16:
 276              	.L20:
 348:Src/main.c    ****       } else {
 349:Src/main.c    ****         sendMessage("Already in Mode 2");
 277              		.loc 1 349 9 is_stmt 1 view .LVU53
 278 0052 1A48     		ldr	r0, .L26+20
 279              	.LVL17:
 280              		.loc 1 349 9 is_stmt 0 view .LVU54
ARM GAS  /tmp/ccSXuRjF.s 			page 13


 281 0054 FFF7FEFF 		bl	sendMessage
 282              	.LVL18:
 283 0058 22E0     		b	.L11
 284              	.LVL19:
 285              	.L15:
 350:Src/main.c    ****       }
 351:Src/main.c    ****       break;
 352:Src/main.c    ****       
 353:Src/main.c    ****     case CMD_QUIT:
 354:Src/main.c    ****       if (currentState != STATE_IDLE) {
 286              		.loc 1 354 7 is_stmt 1 view .LVU55
 287              		.loc 1 354 24 is_stmt 0 view .LVU56
 288 005a 134B     		ldr	r3, .L26
 289 005c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 290              		.loc 1 354 10 view .LVU57
 291 005e 33B1     		cbz	r3, .L21
 355:Src/main.c    ****         currentState = STATE_IDLE;
 292              		.loc 1 355 9 is_stmt 1 view .LVU58
 293              		.loc 1 355 22 is_stmt 0 view .LVU59
 294 0060 114B     		ldr	r3, .L26
 295 0062 0022     		movs	r2, #0
 296 0064 1A70     		strb	r2, [r3]
 356:Src/main.c    ****         sendMessage("Returned to idle state");
 297              		.loc 1 356 9 is_stmt 1 view .LVU60
 298 0066 1648     		ldr	r0, .L26+24
 299              	.LVL20:
 300              		.loc 1 356 9 is_stmt 0 view .LVU61
 301 0068 FFF7FEFF 		bl	sendMessage
 302              	.LVL21:
 303 006c 18E0     		b	.L11
 304              	.LVL22:
 305              	.L21:
 357:Src/main.c    ****       } else {
 358:Src/main.c    ****         sendMessage("Already in idle state");
 306              		.loc 1 358 9 is_stmt 1 view .LVU62
 307 006e 1548     		ldr	r0, .L26+28
 308              	.LVL23:
 309              		.loc 1 358 9 is_stmt 0 view .LVU63
 310 0070 FFF7FEFF 		bl	sendMessage
 311              	.LVL24:
 312 0074 14E0     		b	.L11
 313              	.LVL25:
 314              	.L13:
 359:Src/main.c    ****       }
 360:Src/main.c    ****       break;
 361:Src/main.c    ****       
 362:Src/main.c    ****     case CMD_VALUE:
 363:Src/main.c    ****       if (currentState == STATE_MODE2) {
 315              		.loc 1 363 7 is_stmt 1 view .LVU64
 316              		.loc 1 363 24 is_stmt 0 view .LVU65
 317 0076 0C4B     		ldr	r3, .L26
 318 0078 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 319              		.loc 1 363 10 view .LVU66
 320 007a 022B     		cmp	r3, #2
 321 007c 03D0     		beq	.L25
 364:Src/main.c    ****         char response[50];
 365:Src/main.c    ****         sprintf(response, "Servo position set to %d", servoPosition);
ARM GAS  /tmp/ccSXuRjF.s 			page 14


 366:Src/main.c    ****         sendMessage(response);
 367:Src/main.c    ****       } else {
 368:Src/main.c    ****         sendMessage("Error: Can only set servo position in Mode 2");
 322              		.loc 1 368 9 is_stmt 1 view .LVU67
 323 007e 1248     		ldr	r0, .L26+32
 324              	.LVL26:
 325              		.loc 1 368 9 is_stmt 0 view .LVU68
 326 0080 FFF7FEFF 		bl	sendMessage
 327              	.LVL27:
 328 0084 0CE0     		b	.L11
 329              	.LVL28:
 330              	.L25:
 331              	.LBB6:
 364:Src/main.c    ****         char response[50];
 332              		.loc 1 364 9 is_stmt 1 view .LVU69
 365:Src/main.c    ****         sendMessage(response);
 333              		.loc 1 365 9 view .LVU70
 334 0086 114B     		ldr	r3, .L26+36
 335 0088 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 336 008a 1149     		ldr	r1, .L26+40
 337 008c 01A8     		add	r0, sp, #4
 338              	.LVL29:
 365:Src/main.c    ****         sendMessage(response);
 339              		.loc 1 365 9 is_stmt 0 view .LVU71
 340 008e FFF7FEFF 		bl	sprintf
 341              	.LVL30:
 366:Src/main.c    ****       } else {
 342              		.loc 1 366 9 is_stmt 1 view .LVU72
 343 0092 01A8     		add	r0, sp, #4
 344 0094 FFF7FEFF 		bl	sendMessage
 345              	.LVL31:
 346              	.LBE6:
 347 0098 02E0     		b	.L11
 348              	.LVL32:
 349              	.L18:
 369:Src/main.c    ****       }
 370:Src/main.c    ****       break;
 371:Src/main.c    ****       
 372:Src/main.c    ****     case CMD_NONE:
 373:Src/main.c    ****       sendMessage("Unknown command. Available: mode1, mode2, quit, or value (1-12) in Mode 2");
 350              		.loc 1 373 7 view .LVU73
 351 009a 0E48     		ldr	r0, .L26+44
 352              	.LVL33:
 353              		.loc 1 373 7 is_stmt 0 view .LVU74
 354 009c FFF7FEFF 		bl	sendMessage
 355              	.LVL34:
 374:Src/main.c    ****       break;
 356              		.loc 1 374 7 is_stmt 1 view .LVU75
 357              	.L11:
 375:Src/main.c    ****   }
 376:Src/main.c    **** }
 358              		.loc 1 376 1 is_stmt 0 view .LVU76
 359 00a0 0FB0     		add	sp, sp, #60
 360              	.LCFI6:
 361              		.cfi_def_cfa_offset 4
 362              		@ sp needed
 363 00a2 5DF804FB 		ldr	pc, [sp], #4
ARM GAS  /tmp/ccSXuRjF.s 			page 15


 364              	.L27:
 365 00a6 00BF     		.align	2
 366              	.L26:
 367 00a8 00000000 		.word	currentState
 368 00ac 00000000 		.word	mode
 369 00b0 00000000 		.word	.LC4
 370 00b4 40000000 		.word	.LC5
 371 00b8 54000000 		.word	.LC6
 372 00bc 94000000 		.word	.LC7
 373 00c0 A8000000 		.word	.LC8
 374 00c4 C0000000 		.word	.LC9
 375 00c8 F4000000 		.word	.LC11
 376 00cc 00000000 		.word	servoPosition
 377 00d0 D8000000 		.word	.LC10
 378 00d4 24010000 		.word	.LC12
 379              		.cfi_endproc
 380              	.LFE141:
 382              		.section	.text.handleSerialCommunication,"ax",%progbits
 383              		.align	1
 384              		.global	handleSerialCommunication
 385              		.syntax unified
 386              		.thumb
 387              		.thumb_func
 389              	handleSerialCommunication:
 390              	.LFB139:
 277:Src/main.c    ****   char cmdBuffer[32];
 391              		.loc 1 277 38 is_stmt 1 view -0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 32
 394              		@ frame_needed = 0, uses_anonymous_args = 0
 395 0000 00B5     		push	{lr}
 396              	.LCFI7:
 397              		.cfi_def_cfa_offset 4
 398              		.cfi_offset 14, -4
 399 0002 89B0     		sub	sp, sp, #36
 400              	.LCFI8:
 401              		.cfi_def_cfa_offset 40
 278:Src/main.c    ****   
 402              		.loc 1 278 3 view .LVU78
 281:Src/main.c    ****   
 403              		.loc 1 281 3 view .LVU79
 281:Src/main.c    ****   
 404              		.loc 1 281 16 is_stmt 0 view .LVU80
 405 0004 2021     		movs	r1, #32
 406 0006 6846     		mov	r0, sp
 407 0008 FFF7FEFF 		bl	receiveMessage
 408              	.LVL35:
 283:Src/main.c    ****       // Commande complète reçue, la traiter
 409              		.loc 1 283 3 is_stmt 1 view .LVU81
 283:Src/main.c    ****       // Commande complète reçue, la traiter
 410              		.loc 1 283 6 is_stmt 0 view .LVU82
 411 000c 0028     		cmp	r0, #0
 412 000e 02DA     		bge	.L31
 413              	.LVL36:
 414              	.L28:
 288:Src/main.c    **** 
 415              		.loc 1 288 1 view .LVU83
ARM GAS  /tmp/ccSXuRjF.s 			page 16


 416 0010 09B0     		add	sp, sp, #36
 417              	.LCFI9:
 418              		.cfi_remember_state
 419              		.cfi_def_cfa_offset 4
 420              		@ sp needed
 421 0012 5DF804FB 		ldr	pc, [sp], #4
 422              	.LVL37:
 423              	.L31:
 424              	.LCFI10:
 425              		.cfi_restore_state
 285:Src/main.c    ****   }
 426              		.loc 1 285 7 is_stmt 1 view .LVU84
 427 0016 6846     		mov	r0, sp
 428              	.LVL38:
 285:Src/main.c    ****   }
 429              		.loc 1 285 7 is_stmt 0 view .LVU85
 430 0018 FFF7FEFF 		bl	processCommand
 431              	.LVL39:
 288:Src/main.c    **** 
 432              		.loc 1 288 1 view .LVU86
 433 001c F8E7     		b	.L28
 434              		.cfi_endproc
 435              	.LFE139:
 437              		.section	.text.updateSystem,"ax",%progbits
 438              		.align	1
 439              		.global	updateSystem
 440              		.syntax unified
 441              		.thumb
 442              		.thumb_func
 444              	updateSystem:
 445              	.LFB142:
 377:Src/main.c    **** 
 378:Src/main.c    **** /**
 379:Src/main.c    ****  * @brief Met à jour l'état du système en fonction du mode actuel
 380:Src/main.c    ****  * @details Exécutée périodiquement dans la boucle principale, cette fonction
 381:Src/main.c    ****  * met à jour les LEDs et la position du servo selon l'état actuel du système
 382:Src/main.c    ****  */
 383:Src/main.c    **** void updateSystem(void)
 384:Src/main.c    **** {
 446              		.loc 1 384 1 is_stmt 1 view -0
 447              		.cfi_startproc
 448              		@ args = 0, pretend = 0, frame = 0
 449              		@ frame_needed = 0, uses_anonymous_args = 0
 450 0000 38B5     		push	{r3, r4, r5, lr}
 451              	.LCFI11:
 452              		.cfi_def_cfa_offset 16
 453              		.cfi_offset 3, -16
 454              		.cfi_offset 4, -12
 455              		.cfi_offset 5, -8
 456              		.cfi_offset 14, -4
 385:Src/main.c    ****   static uint32_t lastUpdate = 0;
 457              		.loc 1 385 3 view .LVU88
 386:Src/main.c    ****   uint32_t currentTime = HAL_GetTick();
 458              		.loc 1 386 3 view .LVU89
 459              		.loc 1 386 26 is_stmt 0 view .LVU90
 460 0002 FFF7FEFF 		bl	HAL_GetTick
 461              	.LVL40:
ARM GAS  /tmp/ccSXuRjF.s 			page 17


 387:Src/main.c    ****   
 388:Src/main.c    ****   if (currentTime - lastUpdate >= 100) {
 462              		.loc 1 388 3 is_stmt 1 view .LVU91
 463              		.loc 1 388 19 is_stmt 0 view .LVU92
 464 0006 2E4B     		ldr	r3, .L44
 465 0008 1B68     		ldr	r3, [r3]
 466 000a C31A     		subs	r3, r0, r3
 467              		.loc 1 388 6 view .LVU93
 468 000c 632B     		cmp	r3, #99
 469 000e 00D8     		bhi	.L42
 470              	.LVL41:
 471              	.L32:
 389:Src/main.c    ****     lastUpdate = currentTime;
 390:Src/main.c    ****     
 391:Src/main.c    ****     HC_SR04* sensor = HC_SR04_get_instance();
 392:Src/main.c    ****     
 393:Src/main.c    ****     switch (currentState) {
 394:Src/main.c    ****       case STATE_IDLE:
 395:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_BLEU_Pin, GPIO_PIN_RESET);
 396:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_VERT_Pin, GPIO_PIN_RESET);
 397:Src/main.c    ****         Servo_SetToMiddle();
 398:Src/main.c    ****         break;
 399:Src/main.c    ****         
 400:Src/main.c    ****       case STATE_MODE1:
 401:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_BLEU_Pin, GPIO_PIN_SET);
 402:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_VERT_Pin, GPIO_PIN_RESET);
 403:Src/main.c    ****         
 404:Src/main.c    ****         if (sensor->distance >= SERVO_MIN_DISTANCE && sensor->distance <= SERVO_MAX_DISTANCE) {
 405:Src/main.c    ****           uint32_t position = Servo_DistanceToPosition(sensor->distance);
 406:Src/main.c    ****           Servo_SetPosition(position);
 407:Src/main.c    ****         } else {
 408:Src/main.c    ****           Servo_SetToMiddle();
 409:Src/main.c    ****         }
 410:Src/main.c    ****         break;
 411:Src/main.c    ****         
 412:Src/main.c    ****       case STATE_MODE2:
 413:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_VERT_Pin, GPIO_PIN_SET);
 414:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_BLEU_Pin, GPIO_PIN_RESET);
 415:Src/main.c    ****         
 416:Src/main.c    ****         uint32_t position = Servo_ValueToPosition(servoPosition);
 417:Src/main.c    ****         Servo_SetPosition(position);
 418:Src/main.c    ****         break;
 419:Src/main.c    ****     }
 420:Src/main.c    ****   }
 421:Src/main.c    **** }
 472              		.loc 1 421 1 view .LVU94
 473 0010 38BD     		pop	{r3, r4, r5, pc}
 474              	.LVL42:
 475              	.L42:
 476              	.LBB7:
 389:Src/main.c    ****     lastUpdate = currentTime;
 477              		.loc 1 389 5 is_stmt 1 view .LVU95
 389:Src/main.c    ****     lastUpdate = currentTime;
 478              		.loc 1 389 16 is_stmt 0 view .LVU96
 479 0012 2B4B     		ldr	r3, .L44
 480 0014 1860     		str	r0, [r3]
 391:Src/main.c    ****     
ARM GAS  /tmp/ccSXuRjF.s 			page 18


 481              		.loc 1 391 5 is_stmt 1 view .LVU97
 391:Src/main.c    ****     
 482              		.loc 1 391 23 is_stmt 0 view .LVU98
 483 0016 FFF7FEFF 		bl	HC_SR04_get_instance
 484              	.LVL43:
 391:Src/main.c    ****     
 485              		.loc 1 391 23 view .LVU99
 486 001a 0446     		mov	r4, r0
 487              	.LVL44:
 393:Src/main.c    ****       case STATE_IDLE:
 488              		.loc 1 393 5 is_stmt 1 view .LVU100
 489 001c 294B     		ldr	r3, .L44+4
 490 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 491 0020 012B     		cmp	r3, #1
 492 0022 13D0     		beq	.L34
 493 0024 022B     		cmp	r3, #2
 494 0026 36D0     		beq	.L35
 495 0028 002B     		cmp	r3, #0
 496 002a F1D1     		bne	.L32
 497              	.LBB8:
 395:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_VERT_Pin, GPIO_PIN_RESET);
 498              		.loc 1 395 9 view .LVU101
 499 002c 264C     		ldr	r4, .L44+8
 500 002e 0022     		movs	r2, #0
 501 0030 4FF40041 		mov	r1, #32768
 502 0034 2046     		mov	r0, r4
 503              	.LVL45:
 395:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_VERT_Pin, GPIO_PIN_RESET);
 504              		.loc 1 395 9 is_stmt 0 view .LVU102
 505 0036 FFF7FEFF 		bl	HAL_GPIO_WritePin
 506              	.LVL46:
 396:Src/main.c    ****         Servo_SetToMiddle();
 507              		.loc 1 396 9 is_stmt 1 view .LVU103
 508 003a 0022     		movs	r2, #0
 509 003c 4FF48051 		mov	r1, #4096
 510 0040 2046     		mov	r0, r4
 511 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
 512              	.LVL47:
 397:Src/main.c    ****         break;
 513              		.loc 1 397 9 view .LVU104
 514 0046 FFF7FEFF 		bl	Servo_SetToMiddle
 515              	.LVL48:
 398:Src/main.c    ****         
 516              		.loc 1 398 9 view .LVU105
 517 004a E1E7     		b	.L32
 518              	.LVL49:
 519              	.L34:
 401:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_VERT_Pin, GPIO_PIN_RESET);
 520              		.loc 1 401 9 view .LVU106
 521 004c 1E4D     		ldr	r5, .L44+8
 522 004e 0122     		movs	r2, #1
 523 0050 4FF40041 		mov	r1, #32768
 524 0054 2846     		mov	r0, r5
 525              	.LVL50:
 401:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_VERT_Pin, GPIO_PIN_RESET);
 526              		.loc 1 401 9 is_stmt 0 view .LVU107
 527 0056 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccSXuRjF.s 			page 19


 528              	.LVL51:
 402:Src/main.c    ****         
 529              		.loc 1 402 9 is_stmt 1 view .LVU108
 530 005a 0022     		movs	r2, #0
 531 005c 4FF48051 		mov	r1, #4096
 532 0060 2846     		mov	r0, r5
 533 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
 534              	.LVL52:
 404:Src/main.c    ****           uint32_t position = Servo_DistanceToPosition(sensor->distance);
 535              		.loc 1 404 9 view .LVU109
 404:Src/main.c    ****           uint32_t position = Servo_DistanceToPosition(sensor->distance);
 536              		.loc 1 404 19 is_stmt 0 view .LVU110
 537 0066 94ED050A 		vldr.32	s0, [r4, #20]
 404:Src/main.c    ****           uint32_t position = Servo_DistanceToPosition(sensor->distance);
 538              		.loc 1 404 12 view .LVU111
 539 006a F1EE047A 		vmov.f32	s15, #5.0e+0
 540 006e B4EEE70A 		vcmpe.f32	s0, s15
 541 0072 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 542 0076 06DB     		blt	.L36
 404:Src/main.c    ****           uint32_t position = Servo_DistanceToPosition(sensor->distance);
 543              		.loc 1 404 52 discriminator 1 view .LVU112
 544 0078 F3EE097A 		vmov.f32	s15, #2.5e+1
 545 007c B4EEE70A 		vcmpe.f32	s0, s15
 546 0080 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 547 0084 02D9     		bls	.L43
 548              	.L36:
 408:Src/main.c    ****         }
 549              		.loc 1 408 11 is_stmt 1 view .LVU113
 550 0086 FFF7FEFF 		bl	Servo_SetToMiddle
 551              	.LVL53:
 552 008a C1E7     		b	.L32
 553              	.L43:
 554              	.LBB9:
 405:Src/main.c    ****           Servo_SetPosition(position);
 555              		.loc 1 405 11 view .LVU114
 405:Src/main.c    ****           Servo_SetPosition(position);
 556              		.loc 1 405 31 is_stmt 0 view .LVU115
 557 008c FFF7FEFF 		bl	Servo_DistanceToPosition
 558              	.LVL54:
 406:Src/main.c    ****         } else {
 559              		.loc 1 406 11 is_stmt 1 view .LVU116
 560 0090 FFF7FEFF 		bl	Servo_SetPosition
 561              	.LVL55:
 406:Src/main.c    ****         } else {
 562              		.loc 1 406 11 is_stmt 0 view .LVU117
 563              	.LBE9:
 404:Src/main.c    ****           uint32_t position = Servo_DistanceToPosition(sensor->distance);
 564              		.loc 1 404 95 view .LVU118
 565 0094 BCE7     		b	.L32
 566              	.LVL56:
 567              	.L35:
 413:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_BLEU_Pin, GPIO_PIN_RESET);
 568              		.loc 1 413 9 is_stmt 1 view .LVU119
 569 0096 0C4C     		ldr	r4, .L44+8
 570 0098 0122     		movs	r2, #1
 571 009a 4FF48051 		mov	r1, #4096
 572 009e 2046     		mov	r0, r4
ARM GAS  /tmp/ccSXuRjF.s 			page 20


 573              	.LVL57:
 413:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_BLEU_Pin, GPIO_PIN_RESET);
 574              		.loc 1 413 9 is_stmt 0 view .LVU120
 575 00a0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 576              	.LVL58:
 414:Src/main.c    ****         
 577              		.loc 1 414 9 is_stmt 1 view .LVU121
 578 00a4 0022     		movs	r2, #0
 579 00a6 4FF40041 		mov	r1, #32768
 580 00aa 2046     		mov	r0, r4
 581 00ac FFF7FEFF 		bl	HAL_GPIO_WritePin
 582              	.LVL59:
 416:Src/main.c    ****         Servo_SetPosition(position);
 583              		.loc 1 416 9 view .LVU122
 416:Src/main.c    ****         Servo_SetPosition(position);
 584              		.loc 1 416 29 is_stmt 0 view .LVU123
 585 00b0 064B     		ldr	r3, .L44+12
 586 00b2 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 587 00b4 FFF7FEFF 		bl	Servo_ValueToPosition
 588              	.LVL60:
 417:Src/main.c    ****         break;
 589              		.loc 1 417 9 is_stmt 1 view .LVU124
 590 00b8 FFF7FEFF 		bl	Servo_SetPosition
 591              	.LVL61:
 418:Src/main.c    ****     }
 592              		.loc 1 418 9 view .LVU125
 593              	.LBE8:
 594              	.LBE7:
 595              		.loc 1 421 1 is_stmt 0 view .LVU126
 596 00bc A8E7     		b	.L32
 597              	.L45:
 598 00be 00BF     		.align	2
 599              	.L44:
 600 00c0 00000000 		.word	lastUpdate.0
 601 00c4 00000000 		.word	currentState
 602 00c8 000C0240 		.word	1073875968
 603 00cc 00000000 		.word	servoPosition
 604              		.cfi_endproc
 605              	.LFE142:
 607              		.section	.text.Error_Handler,"ax",%progbits
 608              		.align	1
 609              		.global	Error_Handler
 610              		.syntax unified
 611              		.thumb
 612              		.thumb_func
 614              	Error_Handler:
 615              	.LFB143:
 422:Src/main.c    **** /* USER CODE END 4 */
 423:Src/main.c    **** 
 424:Src/main.c    **** /**
 425:Src/main.c    ****   * @brief  Cette fonction est exécutée en cas d'erreur.
 426:Src/main.c    ****   * @retval None
 427:Src/main.c    ****   */
 428:Src/main.c    **** void Error_Handler(void)
 429:Src/main.c    **** {
 616              		.loc 1 429 1 is_stmt 1 view -0
 617              		.cfi_startproc
ARM GAS  /tmp/ccSXuRjF.s 			page 21


 618              		@ Volatile: function does not return.
 619              		@ args = 0, pretend = 0, frame = 0
 620              		@ frame_needed = 0, uses_anonymous_args = 0
 621              		@ link register save eliminated.
 430:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 431:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 432:Src/main.c    ****   __disable_irq();
 622              		.loc 1 432 3 view .LVU128
 623              	.LBB10:
 624              	.LBI10:
 625              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
ARM GAS  /tmp/ccSXuRjF.s 			page 22


  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
ARM GAS  /tmp/ccSXuRjF.s 			page 23


 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
ARM GAS  /tmp/ccSXuRjF.s 			page 24


 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
ARM GAS  /tmp/ccSXuRjF.s 			page 25


 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccSXuRjF.s 			page 26


 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
ARM GAS  /tmp/ccSXuRjF.s 			page 27


 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
ARM GAS  /tmp/ccSXuRjF.s 			page 28


 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccSXuRjF.s 			page 29


 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccSXuRjF.s 			page 30


 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
ARM GAS  /tmp/ccSXuRjF.s 			page 31


 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
ARM GAS  /tmp/ccSXuRjF.s 			page 32


 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccSXuRjF.s 			page 33


 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
ARM GAS  /tmp/ccSXuRjF.s 			page 34


 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
ARM GAS  /tmp/ccSXuRjF.s 			page 35


 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccSXuRjF.s 			page 36


 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
ARM GAS  /tmp/ccSXuRjF.s 			page 37


 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
ARM GAS  /tmp/ccSXuRjF.s 			page 38


 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 626              		.loc 2 960 27 view .LVU129
 627              	.LBB11:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 628              		.loc 2 962 3 view .LVU130
 629              		.syntax unified
 630              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 631 0000 72B6     		cpsid i
 632              	@ 0 "" 2
 633              		.thumb
 634              		.syntax unified
 635              	.L47:
 636              	.LBE11:
 637              	.LBE10:
 433:Src/main.c    ****   while (1)
 638              		.loc 1 433 3 view .LVU131
 434:Src/main.c    ****   {
 435:Src/main.c    ****   }
 639              		.loc 1 435 3 view .LVU132
 433:Src/main.c    ****   while (1)
 640              		.loc 1 433 9 view .LVU133
 641 0002 FEE7     		b	.L47
 642              		.cfi_endproc
 643              	.LFE143:
 645              		.section	.text.SystemClock_Config,"ax",%progbits
 646              		.align	1
 647              		.global	SystemClock_Config
 648              		.syntax unified
 649              		.thumb
 650              		.thumb_func
 652              	SystemClock_Config:
 653              	.LFB138:
 234:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 654              		.loc 1 234 1 view -0
 655              		.cfi_startproc
 656              		@ args = 0, pretend = 0, frame = 80
 657              		@ frame_needed = 0, uses_anonymous_args = 0
 658 0000 00B5     		push	{lr}
 659              	.LCFI12:
 660              		.cfi_def_cfa_offset 4
 661              		.cfi_offset 14, -4
 662 0002 95B0     		sub	sp, sp, #84
 663              	.LCFI13:
 664              		.cfi_def_cfa_offset 88
 235:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 665              		.loc 1 235 3 view .LVU135
 235:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 666              		.loc 1 235 22 is_stmt 0 view .LVU136
 667 0004 3022     		movs	r2, #48
 668 0006 0021     		movs	r1, #0
 669 0008 08A8     		add	r0, sp, #32
 670 000a FFF7FEFF 		bl	memset
 671              	.LVL62:
 236:Src/main.c    **** 
 672              		.loc 1 236 3 is_stmt 1 view .LVU137
ARM GAS  /tmp/ccSXuRjF.s 			page 39


 236:Src/main.c    **** 
 673              		.loc 1 236 22 is_stmt 0 view .LVU138
 674 000e 0023     		movs	r3, #0
 675 0010 0393     		str	r3, [sp, #12]
 676 0012 0493     		str	r3, [sp, #16]
 677 0014 0593     		str	r3, [sp, #20]
 678 0016 0693     		str	r3, [sp, #24]
 679 0018 0793     		str	r3, [sp, #28]
 240:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 680              		.loc 1 240 3 is_stmt 1 view .LVU139
 681              	.LBB12:
 240:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 682              		.loc 1 240 3 view .LVU140
 683 001a 0193     		str	r3, [sp, #4]
 240:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 684              		.loc 1 240 3 view .LVU141
 685 001c 184A     		ldr	r2, .L54
 686 001e 116C     		ldr	r1, [r2, #64]
 687 0020 41F08051 		orr	r1, r1, #268435456
 688 0024 1164     		str	r1, [r2, #64]
 240:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 689              		.loc 1 240 3 view .LVU142
 690 0026 126C     		ldr	r2, [r2, #64]
 691 0028 02F08052 		and	r2, r2, #268435456
 692 002c 0192     		str	r2, [sp, #4]
 240:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 693              		.loc 1 240 3 view .LVU143
 694 002e 019A     		ldr	r2, [sp, #4]
 695              	.LBE12:
 240:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 696              		.loc 1 240 3 view .LVU144
 241:Src/main.c    **** 
 697              		.loc 1 241 3 view .LVU145
 698              	.LBB13:
 241:Src/main.c    **** 
 699              		.loc 1 241 3 view .LVU146
 700 0030 0293     		str	r3, [sp, #8]
 241:Src/main.c    **** 
 701              		.loc 1 241 3 view .LVU147
 702 0032 144A     		ldr	r2, .L54+4
 703 0034 1168     		ldr	r1, [r2]
 704 0036 41F48041 		orr	r1, r1, #16384
 705 003a 1160     		str	r1, [r2]
 241:Src/main.c    **** 
 706              		.loc 1 241 3 view .LVU148
 707 003c 1268     		ldr	r2, [r2]
 708 003e 02F48042 		and	r2, r2, #16384
 709 0042 0292     		str	r2, [sp, #8]
 241:Src/main.c    **** 
 710              		.loc 1 241 3 view .LVU149
 711 0044 029A     		ldr	r2, [sp, #8]
 712              	.LBE13:
 241:Src/main.c    **** 
 713              		.loc 1 241 3 view .LVU150
 246:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 714              		.loc 1 246 3 view .LVU151
 246:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
ARM GAS  /tmp/ccSXuRjF.s 			page 40


 715              		.loc 1 246 36 is_stmt 0 view .LVU152
 716 0046 0222     		movs	r2, #2
 717 0048 0892     		str	r2, [sp, #32]
 247:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 718              		.loc 1 247 3 is_stmt 1 view .LVU153
 247:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 719              		.loc 1 247 30 is_stmt 0 view .LVU154
 720 004a 0122     		movs	r2, #1
 721 004c 0B92     		str	r2, [sp, #44]
 248:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 722              		.loc 1 248 3 is_stmt 1 view .LVU155
 248:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 723              		.loc 1 248 41 is_stmt 0 view .LVU156
 724 004e 1022     		movs	r2, #16
 725 0050 0C92     		str	r2, [sp, #48]
 249:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 726              		.loc 1 249 3 is_stmt 1 view .LVU157
 249:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 727              		.loc 1 249 34 is_stmt 0 view .LVU158
 728 0052 0E93     		str	r3, [sp, #56]
 250:Src/main.c    ****   {
 729              		.loc 1 250 3 is_stmt 1 view .LVU159
 250:Src/main.c    ****   {
 730              		.loc 1 250 7 is_stmt 0 view .LVU160
 731 0054 08A8     		add	r0, sp, #32
 732 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
 733              	.LVL63:
 250:Src/main.c    ****   {
 734              		.loc 1 250 6 discriminator 1 view .LVU161
 735 005a 68B9     		cbnz	r0, .L52
 257:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 736              		.loc 1 257 3 is_stmt 1 view .LVU162
 257:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 737              		.loc 1 257 31 is_stmt 0 view .LVU163
 738 005c 0F23     		movs	r3, #15
 739 005e 0393     		str	r3, [sp, #12]
 259:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 740              		.loc 1 259 3 is_stmt 1 view .LVU164
 259:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 741              		.loc 1 259 34 is_stmt 0 view .LVU165
 742 0060 0021     		movs	r1, #0
 743 0062 0491     		str	r1, [sp, #16]
 260:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 744              		.loc 1 260 3 is_stmt 1 view .LVU166
 260:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 745              		.loc 1 260 35 is_stmt 0 view .LVU167
 746 0064 0591     		str	r1, [sp, #20]
 261:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 747              		.loc 1 261 3 is_stmt 1 view .LVU168
 261:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 748              		.loc 1 261 36 is_stmt 0 view .LVU169
 749 0066 0691     		str	r1, [sp, #24]
 262:Src/main.c    **** 
 750              		.loc 1 262 3 is_stmt 1 view .LVU170
 262:Src/main.c    **** 
 751              		.loc 1 262 36 is_stmt 0 view .LVU171
 752 0068 0791     		str	r1, [sp, #28]
ARM GAS  /tmp/ccSXuRjF.s 			page 41


 264:Src/main.c    ****   {
 753              		.loc 1 264 3 is_stmt 1 view .LVU172
 264:Src/main.c    ****   {
 754              		.loc 1 264 7 is_stmt 0 view .LVU173
 755 006a 03A8     		add	r0, sp, #12
 756 006c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 757              	.LVL64:
 264:Src/main.c    ****   {
 758              		.loc 1 264 6 discriminator 1 view .LVU174
 759 0070 20B9     		cbnz	r0, .L53
 268:Src/main.c    **** 
 760              		.loc 1 268 1 view .LVU175
 761 0072 15B0     		add	sp, sp, #84
 762              	.LCFI14:
 763              		.cfi_remember_state
 764              		.cfi_def_cfa_offset 4
 765              		@ sp needed
 766 0074 5DF804FB 		ldr	pc, [sp], #4
 767              	.L52:
 768              	.LCFI15:
 769              		.cfi_restore_state
 252:Src/main.c    ****   }
 770              		.loc 1 252 5 is_stmt 1 view .LVU176
 771 0078 FFF7FEFF 		bl	Error_Handler
 772              	.LVL65:
 773              	.L53:
 266:Src/main.c    ****   }
 774              		.loc 1 266 5 view .LVU177
 775 007c FFF7FEFF 		bl	Error_Handler
 776              	.LVL66:
 777              	.L55:
 778              		.align	2
 779              	.L54:
 780 0080 00380240 		.word	1073887232
 781 0084 00700040 		.word	1073770496
 782              		.cfi_endproc
 783              	.LFE138:
 785              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 786              		.align	2
 787              	.LC13:
 788 0000 53797374 		.ascii	"System ready. Available commands: mode1, mode2, qui"
 788      656D2072 
 788      65616479 
 788      2E204176 
 788      61696C61 
 789 0033 7400     		.ascii	"t\000"
 790              		.section	.text.main,"ax",%progbits
 791              		.align	1
 792              		.global	main
 793              		.syntax unified
 794              		.thumb
 795              		.thumb_func
 797              	main:
 798              	.LFB137:
 145:Src/main.c    **** 
 799              		.loc 1 145 1 view -0
 800              		.cfi_startproc
ARM GAS  /tmp/ccSXuRjF.s 			page 42


 801              		@ args = 0, pretend = 0, frame = 0
 802              		@ frame_needed = 0, uses_anonymous_args = 0
 803 0000 10B5     		push	{r4, lr}
 804              	.LCFI16:
 805              		.cfi_def_cfa_offset 8
 806              		.cfi_offset 4, -8
 807              		.cfi_offset 14, -4
 148:Src/main.c    ****   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 808              		.loc 1 148 3 view .LVU179
 809 0002 204C     		ldr	r4, .L61
 810 0004 0021     		movs	r1, #0
 811 0006 2046     		mov	r0, r4
 812 0008 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 813              	.LVL67:
 149:Src/main.c    ****   
 814              		.loc 1 149 3 view .LVU180
 815 000c 2368     		ldr	r3, [r4]
 816 000e 0022     		movs	r2, #0
 817 0010 5A63     		str	r2, [r3, #52]
 152:Src/main.c    ****   if (!sensor) {
 818              		.loc 1 152 3 view .LVU181
 152:Src/main.c    ****   if (!sensor) {
 819              		.loc 1 152 21 is_stmt 0 view .LVU182
 820 0012 FFF7FEFF 		bl	HC_SR04_get_instance
 821              	.LVL68:
 153:Src/main.c    ****     Error_Handler();  // Si l'initialisation échoue, appeler Error_Handler
 822              		.loc 1 153 3 is_stmt 1 view .LVU183
 153:Src/main.c    ****     Error_Handler();  // Si l'initialisation échoue, appeler Error_Handler
 823              		.loc 1 153 6 is_stmt 0 view .LVU184
 824 0016 90B3     		cbz	r0, .L60
 161:Src/main.c    **** 
 825              		.loc 1 161 3 is_stmt 1 view .LVU185
 826 0018 FFF7FEFF 		bl	HAL_Init
 827              	.LVL69:
 168:Src/main.c    **** 
 828              		.loc 1 168 3 view .LVU186
 829 001c FFF7FEFF 		bl	SystemClock_Config
 830              	.LVL70:
 175:Src/main.c    ****   // MX_TIM6_Init();
 831              		.loc 1 175 3 view .LVU187
 832 0020 FFF7FEFF 		bl	MX_GPIO_Init
 833              	.LVL71:
 177:Src/main.c    ****   // MX_UART4_Init();
 834              		.loc 1 177 3 view .LVU188
 835 0024 FFF7FEFF 		bl	MX_TIM1_Init
 836              	.LVL72:
 179:Src/main.c    ****   MX_TIM3_Init();
 837              		.loc 1 179 3 view .LVU189
 838 0028 FFF7FEFF 		bl	MX_USART2_UART_Init
 839              	.LVL73:
 180:Src/main.c    ****   /* USER CODE BEGIN 2 */
 840              		.loc 1 180 3 view .LVU190
 841 002c FFF7FEFF 		bl	MX_TIM3_Init
 842              	.LVL74:
 184:Src/main.c    ****   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0); // Set initial duty cycle to 0%
 843              		.loc 1 184 3 view .LVU191
 844 0030 144C     		ldr	r4, .L61
ARM GAS  /tmp/ccSXuRjF.s 			page 43


 845 0032 0021     		movs	r1, #0
 846 0034 2046     		mov	r0, r4
 847 0036 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 848              	.LVL75:
 185:Src/main.c    **** 
 849              		.loc 1 185 3 view .LVU192
 850 003a 2368     		ldr	r3, [r4]
 851 003c 0021     		movs	r1, #0
 852 003e 5963     		str	r1, [r3, #52]
 188:Src/main.c    ****   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500); // Position initiale au centre
 853              		.loc 1 188 3 view .LVU193
 854 0040 114C     		ldr	r4, .L61+4
 855 0042 2046     		mov	r0, r4
 856 0044 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 857              	.LVL76:
 189:Src/main.c    ****   
 858              		.loc 1 189 3 view .LVU194
 859 0048 2368     		ldr	r3, [r4]
 860 004a 40F2DC52 		movw	r2, #1500
 861 004e 5A63     		str	r2, [r3, #52]
 192:Src/main.c    **** 
 862              		.loc 1 192 3 view .LVU195
 863 0050 FFF7FEFF 		bl	HC_SR04_init
 864              	.LVL77:
 195:Src/main.c    ****   Servo_SetToMiddle(); // Mettre en position neutre au démarrage
 865              		.loc 1 195 3 view .LVU196
 866 0054 FFF7FEFF 		bl	Servo_Init
 867              	.LVL78:
 196:Src/main.c    **** 
 868              		.loc 1 196 3 view .LVU197
 869 0058 FFF7FEFF 		bl	Servo_SetToMiddle
 870              	.LVL79:
 198:Src/main.c    **** 
 871              		.loc 1 198 3 view .LVU198
 872 005c 0B48     		ldr	r0, .L61+8
 873 005e FFF7FEFF 		bl	sendMessage
 874              	.LVL80:
 875              	.L58:
 204:Src/main.c    **** {
 876              		.loc 1 204 3 view .LVU199
 877              	.LBB14:
 207:Src/main.c    ****   
 878              		.loc 1 207 3 view .LVU200
 207:Src/main.c    ****   
 879              		.loc 1 207 21 is_stmt 0 view .LVU201
 880 0062 FFF7FEFF 		bl	HC_SR04_get_instance
 881              	.LVL81:
 210:Src/main.c    ****   
 882              		.loc 1 210 3 is_stmt 1 view .LVU202
 883 0066 0A4B     		ldr	r3, .L61+12
 884 0068 1968     		ldr	r1, [r3]
 885 006a FFF7FEFF 		bl	HC_SR04_update
 886              	.LVL82:
 213:Src/main.c    ****   
 887              		.loc 1 213 3 view .LVU203
 888 006e FFF7FEFF 		bl	handleSerialCommunication
 889              	.LVL83:
ARM GAS  /tmp/ccSXuRjF.s 			page 44


 216:Src/main.c    ****   
 890              		.loc 1 216 3 view .LVU204
 891 0072 FFF7FEFF 		bl	updateSystem
 892              	.LVL84:
 219:Src/main.c    **** }
 893              		.loc 1 219 3 discriminator 1 view .LVU205
 894 0076 0A20     		movs	r0, #10
 895 0078 FFF7FEFF 		bl	HAL_Delay
 896              	.LVL85:
 897              	.LBE14:
 204:Src/main.c    **** {
 898              		.loc 1 204 9 view .LVU206
 899 007c F1E7     		b	.L58
 900              	.LVL86:
 901              	.L60:
 154:Src/main.c    ****   }
 902              		.loc 1 154 5 view .LVU207
 903 007e FFF7FEFF 		bl	Error_Handler
 904              	.LVL87:
 905              	.L62:
 154:Src/main.c    ****   }
 906              		.loc 1 154 5 is_stmt 0 view .LVU208
 907 0082 00BF     		.align	2
 908              	.L61:
 909 0084 00000000 		.word	htim1
 910 0088 00000000 		.word	htim3
 911 008c 00000000 		.word	.LC13
 912 0090 00000000 		.word	mode
 913              		.cfi_endproc
 914              	.LFE137:
 916              		.section	.bss.lastUpdate.0,"aw",%nobits
 917              		.align	2
 920              	lastUpdate.0:
 921 0000 00000000 		.space	4
 922              		.section	.bss.mode,"aw",%nobits
 923              		.align	2
 926              	mode:
 927 0000 00000000 		.space	4
 928              		.global	servoPosition
 929              		.section	.data.servoPosition,"aw"
 932              	servoPosition:
 933 0000 06       		.byte	6
 934              		.global	currentState
 935              		.section	.bss.currentState,"aw",%nobits
 938              	currentState:
 939 0000 00       		.space	1
 940              		.text
 941              	.Letext0:
 942              		.file 3 "/usr/lib/gcc/arm-none-eabi/13.2.1/include/stdint.h"
 943              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 944              		.file 5 "/usr/lib/gcc/arm-none-eabi/13.2.1/include/stddef.h"
 945              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 946              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 947              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 948              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 949              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 950              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
ARM GAS  /tmp/ccSXuRjF.s 			page 45


 951              		.file 12 "Inc/tim.h"
 952              		.file 13 "Src/module/hcsr04.h"
 953              		.file 14 "Src/module/servo.h"
 954              		.file 15 "/usr/include/newlib/stdio.h"
 955              		.file 16 "/usr/include/newlib/string.h"
 956              		.file 17 "Src/module/usart_comm.h"
 957              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 958              		.file 19 "Inc/usart.h"
 959              		.file 20 "Inc/gpio.h"
 960              		.file 21 "<built-in>"
ARM GAS  /tmp/ccSXuRjF.s 			page 46


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccSXuRjF.s:21     .rodata.parseCommand.str1.4:00000000 $d
     /tmp/ccSXuRjF.s:34     .text.parseCommand:00000000 $t
     /tmp/ccSXuRjF.s:40     .text.parseCommand:00000000 parseCommand
     /tmp/ccSXuRjF.s:141    .text.parseCommand:00000054 $d
     /tmp/ccSXuRjF.s:932    .data.servoPosition:00000000 servoPosition
     /tmp/ccSXuRjF.s:150    .rodata.processCommand.str1.4:00000000 $d
     /tmp/ccSXuRjF.s:181    .text.processCommand:00000000 $t
     /tmp/ccSXuRjF.s:187    .text.processCommand:00000000 processCommand
     /tmp/ccSXuRjF.s:211    .text.processCommand:00000010 $d
     /tmp/ccSXuRjF.s:367    .text.processCommand:000000a8 $d
     /tmp/ccSXuRjF.s:938    .bss.currentState:00000000 currentState
     /tmp/ccSXuRjF.s:926    .bss.mode:00000000 mode
     /tmp/ccSXuRjF.s:383    .text.handleSerialCommunication:00000000 $t
     /tmp/ccSXuRjF.s:389    .text.handleSerialCommunication:00000000 handleSerialCommunication
     /tmp/ccSXuRjF.s:438    .text.updateSystem:00000000 $t
     /tmp/ccSXuRjF.s:444    .text.updateSystem:00000000 updateSystem
     /tmp/ccSXuRjF.s:600    .text.updateSystem:000000c0 $d
     /tmp/ccSXuRjF.s:920    .bss.lastUpdate.0:00000000 lastUpdate.0
     /tmp/ccSXuRjF.s:608    .text.Error_Handler:00000000 $t
     /tmp/ccSXuRjF.s:614    .text.Error_Handler:00000000 Error_Handler
     /tmp/ccSXuRjF.s:646    .text.SystemClock_Config:00000000 $t
     /tmp/ccSXuRjF.s:652    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccSXuRjF.s:780    .text.SystemClock_Config:00000080 $d
     /tmp/ccSXuRjF.s:786    .rodata.main.str1.4:00000000 $d
     /tmp/ccSXuRjF.s:791    .text.main:00000000 $t
     /tmp/ccSXuRjF.s:797    .text.main:00000000 main
     /tmp/ccSXuRjF.s:909    .text.main:00000084 $d
     /tmp/ccSXuRjF.s:917    .bss.lastUpdate.0:00000000 $d
     /tmp/ccSXuRjF.s:923    .bss.mode:00000000 $d
     /tmp/ccSXuRjF.s:939    .bss.currentState:00000000 $d
     /tmp/ccSXuRjF.s:216    .text.processCommand:00000015 $d
     /tmp/ccSXuRjF.s:216    .text.processCommand:00000016 $t

UNDEFINED SYMBOLS
strcmp
sscanf
sendMessage
sprintf
receiveMessage
HAL_GetTick
HC_SR04_get_instance
HAL_GPIO_WritePin
Servo_SetToMiddle
Servo_DistanceToPosition
Servo_SetPosition
Servo_ValueToPosition
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_TIM_PWM_Start
HAL_Init
MX_GPIO_Init
MX_TIM1_Init
MX_USART2_UART_Init
MX_TIM3_Init
ARM GAS  /tmp/ccSXuRjF.s 			page 47


HC_SR04_init
Servo_Init
HC_SR04_update
HAL_Delay
htim1
htim3
