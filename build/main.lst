ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Src/main.c"
  20              		.section	.rodata.parseCommand.str1.4,"aMS",%progbits,1
  21              		.align	2
  22              	.LC0:
  23 0000 6D6F6465 		.ascii	"mode1\000"
  23      3100
  24 0006 0000     		.align	2
  25              	.LC1:
  26 0008 6D6F6465 		.ascii	"mode2\000"
  26      3200
  27 000e 0000     		.align	2
  28              	.LC2:
  29 0010 71756974 		.ascii	"quit\000"
  29      00
  30 0015 000000   		.align	2
  31              	.LC3:
  32 0018 256400   		.ascii	"%d\000"
  33              		.section	.text.parseCommand,"ax",%progbits
  34              		.align	1
  35              		.global	parseCommand
  36              		.syntax unified
  37              		.thumb
  38              		.thumb_func
  40              	parseCommand:
  41              	.LVL0:
  42              	.LFB140:
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * Copyright (c) 2025 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Src/main.c    ****   * in the root directory of this software component.
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 2


  14:Src/main.c    ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   ******************************************************************************
  17:Src/main.c    ****   */
  18:Src/main.c    **** /* USER CODE END Header */
  19:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  20:Src/main.c    **** #include "main.h"
  21:Src/main.c    **** #include "tim.h"
  22:Src/main.c    **** #include "usart.h"
  23:Src/main.c    **** #include "gpio.h"
  24:Src/main.c    **** #include "module/usart_comm.h"
  25:Src/main.c    **** #include "module/hcsr04.h"
  26:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  27:Src/main.c    **** /* USER CODE BEGIN Includes */
  28:Src/main.c    **** #include <stdint.h>
  29:Src/main.c    **** #include <stdio.h>
  30:Src/main.c    **** #include <string.h>
  31:Src/main.c    **** /* USER CODE END Includes */
  32:Src/main.c    **** 
  33:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  34:Src/main.c    **** /* USER CODE BEGIN PTD */
  35:Src/main.c    **** typedef enum {
  36:Src/main.c    ****   STATE_IDLE,    // État initial/neutre
  37:Src/main.c    ****   STATE_MODE1,   // Mode 1: LED bleue + servo positionné selon distance HCSR04
  38:Src/main.c    ****   STATE_MODE2    // Mode 2: LED verte + servo positionné selon consigne série
  39:Src/main.c    **** } SystemState;
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Définition des commandes */
  42:Src/main.c    **** typedef enum {
  43:Src/main.c    ****   CMD_NONE,
  44:Src/main.c    ****   CMD_MODE1,
  45:Src/main.c    ****   CMD_MODE2,
  46:Src/main.c    ****   CMD_QUIT,
  47:Src/main.c    ****   CMD_VALUE      // Pour consigne du mode 2
  48:Src/main.c    **** } Command;
  49:Src/main.c    **** 
  50:Src/main.c    **** SystemState currentState = STATE_IDLE;
  51:Src/main.c    **** uint8_t servoPosition = 6;  // Position par défaut (milieu)
  52:Src/main.c    **** 
  53:Src/main.c    **** /* USER CODE END PTD */
  54:Src/main.c    **** 
  55:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  56:Src/main.c    **** /* USER CODE BEGIN PD */
  57:Src/main.c    **** void processCommand(char* command);
  58:Src/main.c    **** Command parseCommand(char* command);
  59:Src/main.c    **** void updateSystem(void);
  60:Src/main.c    **** void handleSerialCommunication(void);
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE END PD */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  65:Src/main.c    **** /* USER CODE BEGIN PM */
  66:Src/main.c    **** 
  67:Src/main.c    **** /* USER CODE END PM */
  68:Src/main.c    **** 
  69:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  70:Src/main.c    **** 
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 3


  71:Src/main.c    **** /* USER CODE BEGIN PV */
  72:Src/main.c    **** // TIM_HandleTypeDef htim1;
  73:Src/main.c    **** /* USER CODE END PV */
  74:Src/main.c    **** 
  75:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  76:Src/main.c    **** void SystemClock_Config(void);
  77:Src/main.c    **** /* USER CODE BEGIN PFP */
  78:Src/main.c    **** 
  79:Src/main.c    **** /* USER CODE END PFP */
  80:Src/main.c    **** 
  81:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  82:Src/main.c    **** /* USER CODE BEGIN 0 */
  83:Src/main.c    **** 
  84:Src/main.c    **** /* USER CODE END 0 */
  85:Src/main.c    **** 
  86:Src/main.c    **** /**
  87:Src/main.c    ****   * @brief  The application entry point.
  88:Src/main.c    ****   * @retval int
  89:Src/main.c    ****   */
  90:Src/main.c    **** int main(void)
  91:Src/main.c    **** {
  92:Src/main.c    **** 
  93:Src/main.c    ****   /* USER CODE BEGIN 1 */
  94:Src/main.c    **** 
  95:Src/main.c    ****   /* USER CODE END 1 */
  96:Src/main.c    **** 
  97:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  98:Src/main.c    **** 
  99:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 100:Src/main.c    ****   HAL_Init();
 101:Src/main.c    **** 
 102:Src/main.c    ****   /* USER CODE BEGIN Init */
 103:Src/main.c    ****   /* Configure the system clock */
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* USER CODE END Init */
 106:Src/main.c    **** 
 107:Src/main.c    ****   /* Configure the system clock */
 108:Src/main.c    ****   SystemClock_Config();
 109:Src/main.c    **** 
 110:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 111:Src/main.c    ****   
 112:Src/main.c    ****   /* USER CODE END SysInit */
 113:Src/main.c    **** 
 114:Src/main.c    ****   /* Initialize all configured peripherals */
 115:Src/main.c    ****   MX_GPIO_Init();
 116:Src/main.c    ****   MX_TIM6_Init();
 117:Src/main.c    ****   MX_TIM1_Init();
 118:Src/main.c    ****   MX_UART4_Init();
 119:Src/main.c    ****   MX_USART2_UART_Init();
 120:Src/main.c    ****   /* USER CODE BEGIN 2 */
 121:Src/main.c    ****   
 122:Src/main.c    ****   // Lancement de la PWM sur le canal 1 de TIM1
 123:Src/main.c    ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Start PWM on TIM1 Channel 1
 124:Src/main.c    ****   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0); // Set initial duty cycle to 0%
 125:Src/main.c    **** 
 126:Src/main.c    ****   sendMessage("System ready. Available commands: mode1, mode2, quit");
 127:Src/main.c    ****   /* USER CODE END 2 */
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 4


 128:Src/main.c    **** 
 129:Src/main.c    ****   /* Infinite loop */
 130:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 131:Src/main.c    ****   while (1)
 132:Src/main.c    ****   {
 133:Src/main.c    ****     /* USER CODE END WHILE */
 134:Src/main.c    ****      // Gestion de la communication série
 135:Src/main.c    ****      handleSerialCommunication();
 136:Src/main.c    ****     
 137:Src/main.c    ****      // Mise à jour du système selon l'état courant
 138:Src/main.c    ****      updateSystem();
 139:Src/main.c    ****      
 140:Src/main.c    ****      // Petite pause pour éviter de surcharger le CPU
 141:Src/main.c    ****      HAL_Delay(10);
 142:Src/main.c    ****     /* USER CODE BEGIN 3 */
 143:Src/main.c    ****   }
 144:Src/main.c    ****   /* USER CODE END 3 */
 145:Src/main.c    **** }
 146:Src/main.c    **** 
 147:Src/main.c    **** /**
 148:Src/main.c    ****   * @brief System Clock Configuration
 149:Src/main.c    ****   * @retval None
 150:Src/main.c    ****   */
 151:Src/main.c    **** void SystemClock_Config(void)
 152:Src/main.c    **** {
 153:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 154:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 155:Src/main.c    **** 
 156:Src/main.c    ****   /** Configure the main internal regulator output voltage
 157:Src/main.c    ****   */
 158:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 159:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 160:Src/main.c    **** 
 161:Src/main.c    ****   /** Initializes the RCC Oscillators according to the specified parameters
 162:Src/main.c    ****   * in the RCC_OscInitTypeDef structure.
 163:Src/main.c    ****   */
 164:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 165:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 166:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 167:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 168:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 169:Src/main.c    ****   {
 170:Src/main.c    ****     Error_Handler();
 171:Src/main.c    ****   }
 172:Src/main.c    **** 
 173:Src/main.c    ****   /** Initializes the CPU, AHB and APB buses clocks
 174:Src/main.c    ****   */
 175:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 176:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 177:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 178:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 179:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 180:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 181:Src/main.c    **** 
 182:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 183:Src/main.c    ****   {
 184:Src/main.c    ****     Error_Handler();
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 5


 185:Src/main.c    ****   }
 186:Src/main.c    **** }
 187:Src/main.c    **** 
 188:Src/main.c    **** /* USER CODE BEGIN 4 */
 189:Src/main.c    **** /**
 190:Src/main.c    ****  * @brief Gère la réception des commandes via la liaison série
 191:Src/main.c    ****  */
 192:Src/main.c    **** void handleSerialCommunication(void)
 193:Src/main.c    **** {
 194:Src/main.c    ****   char cmdBuffer[32];
 195:Src/main.c    ****   
 196:Src/main.c    ****   // Essayer de recevoir une commande
 197:Src/main.c    ****   int result = receiveMessage(cmdBuffer, sizeof(cmdBuffer));
 198:Src/main.c    ****   
 199:Src/main.c    ****   if (result >= 0) {
 200:Src/main.c    ****     // Commande reçue, la traiter
 201:Src/main.c    ****     processCommand(cmdBuffer);
 202:Src/main.c    ****   }
 203:Src/main.c    **** }
 204:Src/main.c    **** 
 205:Src/main.c    **** /**
 206:Src/main.c    ****  * @brief Analyse la commande reçue
 207:Src/main.c    ****  * @param command Chaîne de caractères contenant la commande
 208:Src/main.c    ****  * @return Type de commande identifiée
 209:Src/main.c    ****  */
 210:Src/main.c    **** Command parseCommand(char* command)
 211:Src/main.c    **** {
  43              		.loc 1 211 1 view -0
  44              		.cfi_startproc
  45              		@ args = 0, pretend = 0, frame = 8
  46              		@ frame_needed = 0, uses_anonymous_args = 0
  47              		.loc 1 211 1 is_stmt 0 view .LVU1
  48 0000 10B5     		push	{r4, lr}
  49              	.LCFI0:
  50              		.cfi_def_cfa_offset 8
  51              		.cfi_offset 4, -8
  52              		.cfi_offset 14, -4
  53 0002 82B0     		sub	sp, sp, #8
  54              	.LCFI1:
  55              		.cfi_def_cfa_offset 16
  56 0004 0446     		mov	r4, r0
 212:Src/main.c    ****   if (strcmp(command, "mode1") == 0) {
  57              		.loc 1 212 3 is_stmt 1 view .LVU2
  58              		.loc 1 212 7 is_stmt 0 view .LVU3
  59 0006 1349     		ldr	r1, .L9
  60 0008 FFF7FEFF 		bl	strcmp
  61              	.LVL1:
  62              		.loc 1 212 6 discriminator 1 view .LVU4
  63 000c D0B1     		cbz	r0, .L4
 213:Src/main.c    ****     return CMD_MODE1;
 214:Src/main.c    ****   }
 215:Src/main.c    ****   else if (strcmp(command, "mode2") == 0) {
  64              		.loc 1 215 8 is_stmt 1 view .LVU5
  65              		.loc 1 215 12 is_stmt 0 view .LVU6
  66 000e 1249     		ldr	r1, .L9+4
  67 0010 2046     		mov	r0, r4
  68 0012 FFF7FEFF 		bl	strcmp
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 6


  69              	.LVL2:
  70              		.loc 1 215 11 discriminator 1 view .LVU7
  71 0016 C0B1     		cbz	r0, .L5
 216:Src/main.c    ****     return CMD_MODE2;
 217:Src/main.c    ****   }
 218:Src/main.c    ****   else if (strcmp(command, "quit") == 0) {
  72              		.loc 1 218 8 is_stmt 1 view .LVU8
  73              		.loc 1 218 12 is_stmt 0 view .LVU9
  74 0018 1049     		ldr	r1, .L9+8
  75 001a 2046     		mov	r0, r4
  76 001c FFF7FEFF 		bl	strcmp
  77              	.LVL3:
  78              		.loc 1 218 11 discriminator 1 view .LVU10
  79 0020 A8B1     		cbz	r0, .L6
  80              	.LBB4:
 219:Src/main.c    ****     return CMD_QUIT;
 220:Src/main.c    ****   }
 221:Src/main.c    ****   else {
 222:Src/main.c    ****     // Vérifier si c'est une valeur numérique (pour le mode 2)
 223:Src/main.c    ****     int value;
  81              		.loc 1 223 5 is_stmt 1 view .LVU11
 224:Src/main.c    ****     if (sscanf(command, "%d", &value) == 1) {
  82              		.loc 1 224 5 view .LVU12
  83              		.loc 1 224 9 is_stmt 0 view .LVU13
  84 0022 01AA     		add	r2, sp, #4
  85 0024 0E49     		ldr	r1, .L9+12
  86 0026 2046     		mov	r0, r4
  87 0028 FFF7FEFF 		bl	sscanf
  88              	.LVL4:
  89              		.loc 1 224 8 discriminator 1 view .LVU14
  90 002c 0128     		cmp	r0, #1
  91 002e 01D0     		beq	.L8
  92              	.L3:
  93              	.LBE4:
 225:Src/main.c    ****       if (value >= 1 && value <= 12) {
 226:Src/main.c    ****         servoPosition = value;
 227:Src/main.c    ****         return CMD_VALUE;
 228:Src/main.c    ****       }
 229:Src/main.c    ****     }
 230:Src/main.c    ****   }
 231:Src/main.c    ****   
 232:Src/main.c    ****   return CMD_NONE;
  94              		.loc 1 232 3 is_stmt 1 view .LVU15
  95              		.loc 1 232 10 is_stmt 0 view .LVU16
  96 0030 0020     		movs	r0, #0
  97 0032 08E0     		b	.L2
  98              	.L8:
  99              	.LBB5:
 225:Src/main.c    ****       if (value >= 1 && value <= 12) {
 100              		.loc 1 225 7 is_stmt 1 view .LVU17
 225:Src/main.c    ****       if (value >= 1 && value <= 12) {
 101              		.loc 1 225 22 is_stmt 0 view .LVU18
 102 0034 019B     		ldr	r3, [sp, #4]
 103 0036 5A1E     		subs	r2, r3, #1
 225:Src/main.c    ****       if (value >= 1 && value <= 12) {
 104              		.loc 1 225 10 view .LVU19
 105 0038 0B2A     		cmp	r2, #11
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 7


 106 003a F9D8     		bhi	.L3
 226:Src/main.c    ****         return CMD_VALUE;
 107              		.loc 1 226 9 is_stmt 1 view .LVU20
 226:Src/main.c    ****         return CMD_VALUE;
 108              		.loc 1 226 23 is_stmt 0 view .LVU21
 109 003c 094A     		ldr	r2, .L9+16
 110 003e 1370     		strb	r3, [r2]
 227:Src/main.c    ****       }
 111              		.loc 1 227 9 is_stmt 1 view .LVU22
 227:Src/main.c    ****       }
 112              		.loc 1 227 16 is_stmt 0 view .LVU23
 113 0040 0420     		movs	r0, #4
 114 0042 00E0     		b	.L2
 115              	.L4:
 116              	.LBE5:
 213:Src/main.c    ****   }
 117              		.loc 1 213 12 view .LVU24
 118 0044 0120     		movs	r0, #1
 119              	.L2:
 233:Src/main.c    **** }
 120              		.loc 1 233 1 view .LVU25
 121 0046 02B0     		add	sp, sp, #8
 122              	.LCFI2:
 123              		.cfi_remember_state
 124              		.cfi_def_cfa_offset 8
 125              		@ sp needed
 126 0048 10BD     		pop	{r4, pc}
 127              	.LVL5:
 128              	.L5:
 129              	.LCFI3:
 130              		.cfi_restore_state
 216:Src/main.c    ****   }
 131              		.loc 1 216 12 view .LVU26
 132 004a 0220     		movs	r0, #2
 133 004c FBE7     		b	.L2
 134              	.L6:
 219:Src/main.c    ****   }
 135              		.loc 1 219 12 view .LVU27
 136 004e 0320     		movs	r0, #3
 137 0050 F9E7     		b	.L2
 138              	.L10:
 139 0052 00BF     		.align	2
 140              	.L9:
 141 0054 00000000 		.word	.LC0
 142 0058 08000000 		.word	.LC1
 143 005c 10000000 		.word	.LC2
 144 0060 18000000 		.word	.LC3
 145 0064 00000000 		.word	servoPosition
 146              		.cfi_endproc
 147              	.LFE140:
 149              		.section	.rodata.processCommand.str1.4,"aMS",%progbits,1
 150              		.align	2
 151              	.LC4:
 152 0000 4D6F6465 		.ascii	"Mode 1 activated: LED blue + servo follows ultrason"
 152      20312061 
 152      63746976 
 152      61746564 
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 8


 152      3A204C45 
 153 0033 69632073 		.ascii	"ic sensor\000"
 153      656E736F 
 153      7200
 154 003d 000000   		.align	2
 155              	.LC5:
 156 0040 416C7265 		.ascii	"Already in Mode 1\000"
 156      61647920 
 156      696E204D 
 156      6F646520 
 156      3100
 157 0052 0000     		.align	2
 158              	.LC6:
 159 0054 4D6F6465 		.ascii	"Mode 2 activated: LED green + servo follows serial "
 159      20322061 
 159      63746976 
 159      61746564 
 159      3A204C45 
 160 0087 696E7075 		.ascii	"input (1-12)\000"
 160      74202831 
 160      2D313229 
 160      00
 161              		.align	2
 162              	.LC7:
 163 0094 416C7265 		.ascii	"Already in Mode 2\000"
 163      61647920 
 163      696E204D 
 163      6F646520 
 163      3200
 164 00a6 0000     		.align	2
 165              	.LC8:
 166 00a8 52657475 		.ascii	"Returned to idle state\000"
 166      726E6564 
 166      20746F20 
 166      69646C65 
 166      20737461 
 167 00bf 00       		.align	2
 168              	.LC9:
 169 00c0 416C7265 		.ascii	"Already in idle state\000"
 169      61647920 
 169      696E2069 
 169      646C6520 
 169      73746174 
 170 00d6 0000     		.align	2
 171              	.LC10:
 172 00d8 53657276 		.ascii	"Servo position set to %d\000"
 172      6F20706F 
 172      73697469 
 172      6F6E2073 
 172      65742074 
 173 00f1 000000   		.align	2
 174              	.LC11:
 175 00f4 4572726F 		.ascii	"Error: Can only set servo position in Mode 2\000"
 175      723A2043 
 175      616E206F 
 175      6E6C7920 
 175      73657420 
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 9


 176 0121 000000   		.align	2
 177              	.LC12:
 178 0124 556E6B6E 		.ascii	"Unknown command. Available: mode1, mode2, quit, or "
 178      6F776E20 
 178      636F6D6D 
 178      616E642E 
 178      20417661 
 179 0157 76616C75 		.ascii	"value (1-12) in Mode 2\000"
 179      65202831 
 179      2D313229 
 179      20696E20 
 179      4D6F6465 
 180              		.section	.text.processCommand,"ax",%progbits
 181              		.align	1
 182              		.global	processCommand
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 187              	processCommand:
 188              	.LVL6:
 189              	.LFB141:
 234:Src/main.c    **** 
 235:Src/main.c    **** /**
 236:Src/main.c    ****  * @brief Traite la commande reçue et met à jour l'état du système
 237:Src/main.c    ****  * @param command Chaîne de caractères contenant la commande
 238:Src/main.c    ****  */
 239:Src/main.c    **** void processCommand(char* command)
 240:Src/main.c    **** {
 190              		.loc 1 240 1 is_stmt 1 view -0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 56
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              		.loc 1 240 1 is_stmt 0 view .LVU29
 195 0000 10B5     		push	{r4, lr}
 196              	.LCFI4:
 197              		.cfi_def_cfa_offset 8
 198              		.cfi_offset 4, -8
 199              		.cfi_offset 14, -4
 200 0002 8EB0     		sub	sp, sp, #56
 201              	.LCFI5:
 202              		.cfi_def_cfa_offset 64
 241:Src/main.c    ****   Command cmd = parseCommand(command);
 203              		.loc 1 241 3 is_stmt 1 view .LVU30
 204              		.loc 1 241 17 is_stmt 0 view .LVU31
 205 0004 FFF7FEFF 		bl	parseCommand
 206              	.LVL7:
 242:Src/main.c    ****   
 243:Src/main.c    ****   switch (cmd) {
 207              		.loc 1 243 3 is_stmt 1 view .LVU32
 208 0008 0428     		cmp	r0, #4
 209 000a 46D8     		bhi	.L11
 210 000c DFE800F0 		tbb	[pc, r0]
 211              	.L14:
 212 0010 42       		.byte	(.L18-.L14)/2
 213 0011 03       		.byte	(.L17-.L14)/2
 214 0012 12       		.byte	(.L16-.L14)/2
 215 0013 21       		.byte	(.L15-.L14)/2
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 10


 216 0014 2F       		.byte	(.L13-.L14)/2
 217 0015 00       		.p2align 1
 218              	.L17:
 244:Src/main.c    ****     case CMD_MODE1:
 245:Src/main.c    ****       if (currentState != STATE_MODE1) {
 219              		.loc 1 245 7 view .LVU33
 220              		.loc 1 245 24 is_stmt 0 view .LVU34
 221 0016 224B     		ldr	r3, .L26
 222 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 223              		.loc 1 245 10 view .LVU35
 224 001a 012B     		cmp	r3, #1
 225 001c 06D0     		beq	.L19
 246:Src/main.c    ****         currentState = STATE_MODE1;
 226              		.loc 1 246 9 is_stmt 1 view .LVU36
 227              		.loc 1 246 22 is_stmt 0 view .LVU37
 228 001e 204B     		ldr	r3, .L26
 229 0020 0122     		movs	r2, #1
 230 0022 1A70     		strb	r2, [r3]
 247:Src/main.c    ****         sendMessage("Mode 1 activated: LED blue + servo follows ultrasonic sensor");
 231              		.loc 1 247 9 is_stmt 1 view .LVU38
 232 0024 1F48     		ldr	r0, .L26+4
 233              	.LVL8:
 234              		.loc 1 247 9 is_stmt 0 view .LVU39
 235 0026 FFF7FEFF 		bl	sendMessage
 236              	.LVL9:
 237 002a 36E0     		b	.L11
 238              	.LVL10:
 239              	.L19:
 248:Src/main.c    ****       } else {
 249:Src/main.c    ****         sendMessage("Already in Mode 1");
 240              		.loc 1 249 9 is_stmt 1 view .LVU40
 241 002c 1E48     		ldr	r0, .L26+8
 242              	.LVL11:
 243              		.loc 1 249 9 is_stmt 0 view .LVU41
 244 002e FFF7FEFF 		bl	sendMessage
 245              	.LVL12:
 246 0032 32E0     		b	.L11
 247              	.LVL13:
 248              	.L16:
 250:Src/main.c    ****       }
 251:Src/main.c    ****       break;
 252:Src/main.c    ****       
 253:Src/main.c    ****     case CMD_MODE2:
 254:Src/main.c    ****       if (currentState != STATE_MODE2) {
 249              		.loc 1 254 7 is_stmt 1 view .LVU42
 250              		.loc 1 254 24 is_stmt 0 view .LVU43
 251 0034 1A4B     		ldr	r3, .L26
 252 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 253              		.loc 1 254 10 view .LVU44
 254 0038 022B     		cmp	r3, #2
 255 003a 06D0     		beq	.L20
 255:Src/main.c    ****         currentState = STATE_MODE2;
 256              		.loc 1 255 9 is_stmt 1 view .LVU45
 257              		.loc 1 255 22 is_stmt 0 view .LVU46
 258 003c 184B     		ldr	r3, .L26
 259 003e 0222     		movs	r2, #2
 260 0040 1A70     		strb	r2, [r3]
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 11


 256:Src/main.c    ****         sendMessage("Mode 2 activated: LED green + servo follows serial input (1-12)");
 261              		.loc 1 256 9 is_stmt 1 view .LVU47
 262 0042 1A48     		ldr	r0, .L26+12
 263              	.LVL14:
 264              		.loc 1 256 9 is_stmt 0 view .LVU48
 265 0044 FFF7FEFF 		bl	sendMessage
 266              	.LVL15:
 267 0048 27E0     		b	.L11
 268              	.LVL16:
 269              	.L20:
 257:Src/main.c    ****       } else {
 258:Src/main.c    ****         sendMessage("Already in Mode 2");
 270              		.loc 1 258 9 is_stmt 1 view .LVU49
 271 004a 1948     		ldr	r0, .L26+16
 272              	.LVL17:
 273              		.loc 1 258 9 is_stmt 0 view .LVU50
 274 004c FFF7FEFF 		bl	sendMessage
 275              	.LVL18:
 276 0050 23E0     		b	.L11
 277              	.LVL19:
 278              	.L15:
 259:Src/main.c    ****       }
 260:Src/main.c    ****       break;
 261:Src/main.c    ****       
 262:Src/main.c    ****     case CMD_QUIT:
 263:Src/main.c    ****       if (currentState != STATE_IDLE) {
 279              		.loc 1 263 7 is_stmt 1 view .LVU51
 280              		.loc 1 263 24 is_stmt 0 view .LVU52
 281 0052 134B     		ldr	r3, .L26
 282 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 283              		.loc 1 263 10 view .LVU53
 284 0056 33B1     		cbz	r3, .L21
 264:Src/main.c    ****         currentState = STATE_IDLE;
 285              		.loc 1 264 9 is_stmt 1 view .LVU54
 286              		.loc 1 264 22 is_stmt 0 view .LVU55
 287 0058 114B     		ldr	r3, .L26
 288 005a 0022     		movs	r2, #0
 289 005c 1A70     		strb	r2, [r3]
 265:Src/main.c    ****         sendMessage("Returned to idle state");
 290              		.loc 1 265 9 is_stmt 1 view .LVU56
 291 005e 1548     		ldr	r0, .L26+20
 292              	.LVL20:
 293              		.loc 1 265 9 is_stmt 0 view .LVU57
 294 0060 FFF7FEFF 		bl	sendMessage
 295              	.LVL21:
 296 0064 19E0     		b	.L11
 297              	.LVL22:
 298              	.L21:
 266:Src/main.c    ****       } else {
 267:Src/main.c    ****         sendMessage("Already in idle state");
 299              		.loc 1 267 9 is_stmt 1 view .LVU58
 300 0066 1448     		ldr	r0, .L26+24
 301              	.LVL23:
 302              		.loc 1 267 9 is_stmt 0 view .LVU59
 303 0068 FFF7FEFF 		bl	sendMessage
 304              	.LVL24:
 305 006c 15E0     		b	.L11
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 12


 306              	.LVL25:
 307              	.L13:
 268:Src/main.c    ****       }
 269:Src/main.c    ****       break;
 270:Src/main.c    ****       
 271:Src/main.c    ****     case CMD_VALUE:
 272:Src/main.c    ****       if (currentState == STATE_MODE2) {
 308              		.loc 1 272 7 is_stmt 1 view .LVU60
 309              		.loc 1 272 24 is_stmt 0 view .LVU61
 310 006e 0C4B     		ldr	r3, .L26
 311 0070 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 312              		.loc 1 272 10 view .LVU62
 313 0072 022B     		cmp	r3, #2
 314 0074 03D0     		beq	.L25
 273:Src/main.c    ****         char response[50];
 274:Src/main.c    ****         sprintf(response, "Servo position set to %d", servoPosition);
 275:Src/main.c    ****         sendMessage(response);
 276:Src/main.c    ****       } else {
 277:Src/main.c    ****         sendMessage("Error: Can only set servo position in Mode 2");
 315              		.loc 1 277 9 is_stmt 1 view .LVU63
 316 0076 1148     		ldr	r0, .L26+28
 317              	.LVL26:
 318              		.loc 1 277 9 is_stmt 0 view .LVU64
 319 0078 FFF7FEFF 		bl	sendMessage
 320              	.LVL27:
 321 007c 0DE0     		b	.L11
 322              	.LVL28:
 323              	.L25:
 324              	.LBB6:
 273:Src/main.c    ****         char response[50];
 325              		.loc 1 273 9 is_stmt 1 view .LVU65
 274:Src/main.c    ****         sendMessage(response);
 326              		.loc 1 274 9 view .LVU66
 327 007e 01AC     		add	r4, sp, #4
 328 0080 0F4B     		ldr	r3, .L26+32
 329 0082 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 330 0084 0F49     		ldr	r1, .L26+36
 331 0086 2046     		mov	r0, r4
 332              	.LVL29:
 274:Src/main.c    ****         sendMessage(response);
 333              		.loc 1 274 9 is_stmt 0 view .LVU67
 334 0088 FFF7FEFF 		bl	sprintf
 335              	.LVL30:
 275:Src/main.c    ****       } else {
 336              		.loc 1 275 9 is_stmt 1 view .LVU68
 337 008c 2046     		mov	r0, r4
 338 008e FFF7FEFF 		bl	sendMessage
 339              	.LVL31:
 340              	.LBE6:
 341 0092 02E0     		b	.L11
 342              	.LVL32:
 343              	.L18:
 278:Src/main.c    ****       }
 279:Src/main.c    ****       break;
 280:Src/main.c    ****       
 281:Src/main.c    ****     case CMD_NONE:
 282:Src/main.c    ****       sendMessage("Unknown command. Available: mode1, mode2, quit, or value (1-12) in Mode 2");
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 13


 344              		.loc 1 282 7 view .LVU69
 345 0094 0C48     		ldr	r0, .L26+40
 346              	.LVL33:
 347              		.loc 1 282 7 is_stmt 0 view .LVU70
 348 0096 FFF7FEFF 		bl	sendMessage
 349              	.LVL34:
 283:Src/main.c    ****       break;
 350              		.loc 1 283 7 is_stmt 1 view .LVU71
 351              	.L11:
 284:Src/main.c    ****   }
 285:Src/main.c    **** }
 352              		.loc 1 285 1 is_stmt 0 view .LVU72
 353 009a 0EB0     		add	sp, sp, #56
 354              	.LCFI6:
 355              		.cfi_def_cfa_offset 8
 356              		@ sp needed
 357 009c 10BD     		pop	{r4, pc}
 358              	.L27:
 359 009e 00BF     		.align	2
 360              	.L26:
 361 00a0 00000000 		.word	currentState
 362 00a4 00000000 		.word	.LC4
 363 00a8 40000000 		.word	.LC5
 364 00ac 54000000 		.word	.LC6
 365 00b0 94000000 		.word	.LC7
 366 00b4 A8000000 		.word	.LC8
 367 00b8 C0000000 		.word	.LC9
 368 00bc F4000000 		.word	.LC11
 369 00c0 00000000 		.word	servoPosition
 370 00c4 D8000000 		.word	.LC10
 371 00c8 24010000 		.word	.LC12
 372              		.cfi_endproc
 373              	.LFE141:
 375              		.section	.text.handleSerialCommunication,"ax",%progbits
 376              		.align	1
 377              		.global	handleSerialCommunication
 378              		.syntax unified
 379              		.thumb
 380              		.thumb_func
 382              	handleSerialCommunication:
 383              	.LFB139:
 193:Src/main.c    ****   char cmdBuffer[32];
 384              		.loc 1 193 1 is_stmt 1 view -0
 385              		.cfi_startproc
 386              		@ args = 0, pretend = 0, frame = 32
 387              		@ frame_needed = 0, uses_anonymous_args = 0
 388 0000 00B5     		push	{lr}
 389              	.LCFI7:
 390              		.cfi_def_cfa_offset 4
 391              		.cfi_offset 14, -4
 392 0002 89B0     		sub	sp, sp, #36
 393              	.LCFI8:
 394              		.cfi_def_cfa_offset 40
 194:Src/main.c    ****   
 395              		.loc 1 194 3 view .LVU74
 197:Src/main.c    ****   
 396              		.loc 1 197 3 view .LVU75
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 14


 197:Src/main.c    ****   
 397              		.loc 1 197 16 is_stmt 0 view .LVU76
 398 0004 2021     		movs	r1, #32
 399 0006 6846     		mov	r0, sp
 400 0008 FFF7FEFF 		bl	receiveMessage
 401              	.LVL35:
 199:Src/main.c    ****     // Commande reçue, la traiter
 402              		.loc 1 199 3 is_stmt 1 view .LVU77
 199:Src/main.c    ****     // Commande reçue, la traiter
 403              		.loc 1 199 6 is_stmt 0 view .LVU78
 404 000c 0028     		cmp	r0, #0
 405 000e 02DA     		bge	.L31
 406              	.LVL36:
 407              	.L28:
 203:Src/main.c    **** 
 408              		.loc 1 203 1 view .LVU79
 409 0010 09B0     		add	sp, sp, #36
 410              	.LCFI9:
 411              		.cfi_remember_state
 412              		.cfi_def_cfa_offset 4
 413              		@ sp needed
 414 0012 5DF804FB 		ldr	pc, [sp], #4
 415              	.LVL37:
 416              	.L31:
 417              	.LCFI10:
 418              		.cfi_restore_state
 201:Src/main.c    ****   }
 419              		.loc 1 201 5 is_stmt 1 view .LVU80
 420 0016 6846     		mov	r0, sp
 421              	.LVL38:
 201:Src/main.c    ****   }
 422              		.loc 1 201 5 is_stmt 0 view .LVU81
 423 0018 FFF7FEFF 		bl	processCommand
 424              	.LVL39:
 203:Src/main.c    **** 
 425              		.loc 1 203 1 view .LVU82
 426 001c F8E7     		b	.L28
 427              		.cfi_endproc
 428              	.LFE139:
 430              		.section	.text.updateSystem,"ax",%progbits
 431              		.align	1
 432              		.global	updateSystem
 433              		.syntax unified
 434              		.thumb
 435              		.thumb_func
 437              	updateSystem:
 438              	.LFB142:
 286:Src/main.c    **** 
 287:Src/main.c    **** 
 288:Src/main.c    **** /**
 289:Src/main.c    ****  * @brief Met à jour l'état du système en fonction du mode actuel
 290:Src/main.c    ****  */
 291:Src/main.c    **** void updateSystem(void)
 292:Src/main.c    **** {
 439              		.loc 1 292 1 is_stmt 1 view -0
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 15


 442              		@ frame_needed = 0, uses_anonymous_args = 0
 443 0000 10B5     		push	{r4, lr}
 444              	.LCFI11:
 445              		.cfi_def_cfa_offset 8
 446              		.cfi_offset 4, -8
 447              		.cfi_offset 14, -4
 293:Src/main.c    ****   static uint32_t lastUpdate = 0;
 448              		.loc 1 293 3 view .LVU84
 294:Src/main.c    ****   uint32_t currentTime = HAL_GetTick();
 449              		.loc 1 294 3 view .LVU85
 450              		.loc 1 294 26 is_stmt 0 view .LVU86
 451 0002 FFF7FEFF 		bl	HAL_GetTick
 452              	.LVL40:
 295:Src/main.c    ****   
 296:Src/main.c    ****   // Mettre à jour l'état toutes les 100ms
 297:Src/main.c    ****   if (currentTime - lastUpdate >= 100) {
 453              		.loc 1 297 3 is_stmt 1 view .LVU87
 454              		.loc 1 297 19 is_stmt 0 view .LVU88
 455 0006 244B     		ldr	r3, .L37
 456 0008 1B68     		ldr	r3, [r3]
 457 000a C31A     		subs	r3, r0, r3
 458              		.loc 1 297 6 view .LVU89
 459 000c 632B     		cmp	r3, #99
 460 000e 19D9     		bls	.L32
 298:Src/main.c    ****     lastUpdate = currentTime;
 461              		.loc 1 298 5 is_stmt 1 view .LVU90
 462              		.loc 1 298 16 is_stmt 0 view .LVU91
 463 0010 214B     		ldr	r3, .L37
 464 0012 1860     		str	r0, [r3]
 299:Src/main.c    ****     
 300:Src/main.c    ****     switch (currentState) {
 465              		.loc 1 300 5 is_stmt 1 view .LVU92
 466 0014 214B     		ldr	r3, .L37+4
 467 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 468 0018 012B     		cmp	r3, #1
 469 001a 14D0     		beq	.L34
 470 001c 022B     		cmp	r3, #2
 471 001e 24D0     		beq	.L35
 472 0020 83B9     		cbnz	r3, .L32
 473              	.LBB7:
 301:Src/main.c    ****       case STATE_IDLE:
 302:Src/main.c    ****         // Éteindre toutes les LEDs
 303:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_BLEU_Pin, GPIO_PIN_RESET);
 474              		.loc 1 303 9 view .LVU93
 475 0022 1F4C     		ldr	r4, .L37+8
 476 0024 0022     		movs	r2, #0
 477 0026 4FF40041 		mov	r1, #32768
 478 002a 2046     		mov	r0, r4
 479              	.LVL41:
 480              		.loc 1 303 9 is_stmt 0 view .LVU94
 481 002c FFF7FEFF 		bl	HAL_GPIO_WritePin
 482              	.LVL42:
 304:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_VERT_Pin, GPIO_PIN_RESET);
 483              		.loc 1 304 9 is_stmt 1 view .LVU95
 484 0030 0022     		movs	r2, #0
 485 0032 4FF48051 		mov	r1, #4096
 486 0036 2046     		mov	r0, r4
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 16


 487 0038 FFF7FEFF 		bl	HAL_GPIO_WritePin
 488              	.LVL43:
 305:Src/main.c    ****         
 306:Src/main.c    ****         // Mettre le servo en position neutre
 307:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 75); // Position neutre (~50%)
 489              		.loc 1 307 9 view .LVU96
 490 003c 194B     		ldr	r3, .L37+12
 491 003e 1B68     		ldr	r3, [r3]
 492 0040 4B22     		movs	r2, #75
 493 0042 5A63     		str	r2, [r3, #52]
 308:Src/main.c    ****         break;
 494              		.loc 1 308 9 view .LVU97
 495              	.L32:
 496              	.LBE7:
 309:Src/main.c    ****         
 310:Src/main.c    ****       case STATE_MODE1:
 311:Src/main.c    ****         // Allumer la LED bleue, éteindre la LED verte
 312:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_BLEU_Pin, GPIO_PIN_SET);
 313:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_VERT_Pin, GPIO_PIN_RESET);
 314:Src/main.c    ****         
 315:Src/main.c    ****         // TODO: Lire la distance du capteur HCSR04 et ajuster la position du servo
 316:Src/main.c    ****         // Pour le moment, on simule avec une position fixe
 317:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 50); // ~33%
 318:Src/main.c    ****         break;
 319:Src/main.c    ****         
 320:Src/main.c    ****       case STATE_MODE2:
 321:Src/main.c    ****         // Allumer la LED verte, éteindre la LED bleue
 322:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_VERT_Pin, GPIO_PIN_SET);
 323:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_BLEU_Pin, GPIO_PIN_RESET);
 324:Src/main.c    ****         
 325:Src/main.c    ****         // Positionner le servo selon la consigne
 326:Src/main.c    ****         uint32_t pulseWidth = 50 + (servoPosition * 10); // Conversion valeur 1-12 en largeur d'imp
 327:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulseWidth);
 328:Src/main.c    ****         break;
 329:Src/main.c    ****     }
 330:Src/main.c    ****   }
 331:Src/main.c    **** }
 497              		.loc 1 331 1 is_stmt 0 view .LVU98
 498 0044 10BD     		pop	{r4, pc}
 499              	.LVL44:
 500              	.L34:
 501              	.LBB8:
 312:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_VERT_Pin, GPIO_PIN_RESET);
 502              		.loc 1 312 9 is_stmt 1 view .LVU99
 503 0046 164C     		ldr	r4, .L37+8
 504 0048 0122     		movs	r2, #1
 505 004a 4FF40041 		mov	r1, #32768
 506 004e 2046     		mov	r0, r4
 507              	.LVL45:
 312:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_VERT_Pin, GPIO_PIN_RESET);
 508              		.loc 1 312 9 is_stmt 0 view .LVU100
 509 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 510              	.LVL46:
 313:Src/main.c    ****         
 511              		.loc 1 313 9 is_stmt 1 view .LVU101
 512 0054 0022     		movs	r2, #0
 513 0056 4FF48051 		mov	r1, #4096
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 17


 514 005a 2046     		mov	r0, r4
 515 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
 516              	.LVL47:
 317:Src/main.c    ****         break;
 517              		.loc 1 317 9 view .LVU102
 518 0060 104B     		ldr	r3, .L37+12
 519 0062 1B68     		ldr	r3, [r3]
 520 0064 3222     		movs	r2, #50
 521 0066 5A63     		str	r2, [r3, #52]
 318:Src/main.c    ****         
 522              		.loc 1 318 9 view .LVU103
 523 0068 ECE7     		b	.L32
 524              	.LVL48:
 525              	.L35:
 322:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_BLEU_Pin, GPIO_PIN_RESET);
 526              		.loc 1 322 9 view .LVU104
 527 006a 0D4C     		ldr	r4, .L37+8
 528 006c 0122     		movs	r2, #1
 529 006e 4FF48051 		mov	r1, #4096
 530 0072 2046     		mov	r0, r4
 531              	.LVL49:
 322:Src/main.c    ****         HAL_GPIO_WritePin(GPIOD, LED_BLEU_Pin, GPIO_PIN_RESET);
 532              		.loc 1 322 9 is_stmt 0 view .LVU105
 533 0074 FFF7FEFF 		bl	HAL_GPIO_WritePin
 534              	.LVL50:
 323:Src/main.c    ****         
 535              		.loc 1 323 9 is_stmt 1 view .LVU106
 536 0078 0022     		movs	r2, #0
 537 007a 4FF40041 		mov	r1, #32768
 538 007e 2046     		mov	r0, r4
 539 0080 FFF7FEFF 		bl	HAL_GPIO_WritePin
 540              	.LVL51:
 326:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulseWidth);
 541              		.loc 1 326 9 view .LVU107
 326:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulseWidth);
 542              		.loc 1 326 51 is_stmt 0 view .LVU108
 543 0084 084B     		ldr	r3, .L37+16
 544 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 545 0088 03EB8303 		add	r3, r3, r3, lsl #2
 546 008c 5B00     		lsls	r3, r3, #1
 326:Src/main.c    ****         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulseWidth);
 547              		.loc 1 326 34 view .LVU109
 548 008e 3233     		adds	r3, r3, #50
 549              	.LVL52:
 327:Src/main.c    ****         break;
 550              		.loc 1 327 9 is_stmt 1 view .LVU110
 551 0090 044A     		ldr	r2, .L37+12
 552 0092 1268     		ldr	r2, [r2]
 553 0094 5363     		str	r3, [r2, #52]
 328:Src/main.c    ****     }
 554              		.loc 1 328 9 view .LVU111
 555              	.LBE8:
 556              		.loc 1 331 1 is_stmt 0 view .LVU112
 557 0096 D5E7     		b	.L32
 558              	.L38:
 559              		.align	2
 560              	.L37:
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 18


 561 0098 00000000 		.word	lastUpdate.0
 562 009c 00000000 		.word	currentState
 563 00a0 000C0240 		.word	1073875968
 564 00a4 00000000 		.word	htim1
 565 00a8 00000000 		.word	servoPosition
 566              		.cfi_endproc
 567              	.LFE142:
 569              		.section	.text.Error_Handler,"ax",%progbits
 570              		.align	1
 571              		.global	Error_Handler
 572              		.syntax unified
 573              		.thumb
 574              		.thumb_func
 576              	Error_Handler:
 577              	.LFB143:
 332:Src/main.c    **** /* USER CODE END 4 */
 333:Src/main.c    **** 
 334:Src/main.c    **** /**
 335:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 336:Src/main.c    ****   * @retval None
 337:Src/main.c    ****   */
 338:Src/main.c    **** void Error_Handler(void)
 339:Src/main.c    **** {
 578              		.loc 1 339 1 is_stmt 1 view -0
 579              		.cfi_startproc
 580              		@ Volatile: function does not return.
 581              		@ args = 0, pretend = 0, frame = 0
 582              		@ frame_needed = 0, uses_anonymous_args = 0
 583              		@ link register save eliminated.
 340:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 341:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 342:Src/main.c    ****   __disable_irq();
 584              		.loc 1 342 3 view .LVU114
 585              	.LBB9:
 586              	.LBI9:
 587              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 19


  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 20


  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 21


 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 22


 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 23


 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 24


 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 25


 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 26


 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 27


 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 28


 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 29


 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 30


 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 31


 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 32


 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 33


 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 34


 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 35


 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 588              		.loc 2 960 27 view .LVU115
 589              	.LBB10:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 590              		.loc 2 962 3 view .LVU116
 591              		.syntax unified
 592              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 593 0000 72B6     		cpsid i
 594              	@ 0 "" 2
 595              		.thumb
 596              		.syntax unified
 597              	.L40:
 598              	.LBE10:
 599              	.LBE9:
 343:Src/main.c    ****   while (1)
 600              		.loc 1 343 3 view .LVU117
 344:Src/main.c    ****   {
 345:Src/main.c    ****   }
 601              		.loc 1 345 3 view .LVU118
 343:Src/main.c    ****   while (1)
 602              		.loc 1 343 9 view .LVU119
 603 0002 FEE7     		b	.L40
 604              		.cfi_endproc
 605              	.LFE143:
 607              		.section	.text.SystemClock_Config,"ax",%progbits
 608              		.align	1
 609              		.global	SystemClock_Config
 610              		.syntax unified
 611              		.thumb
 612              		.thumb_func
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 36


 614              	SystemClock_Config:
 615              	.LFB138:
 152:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 616              		.loc 1 152 1 view -0
 617              		.cfi_startproc
 618              		@ args = 0, pretend = 0, frame = 80
 619              		@ frame_needed = 0, uses_anonymous_args = 0
 620 0000 10B5     		push	{r4, lr}
 621              	.LCFI12:
 622              		.cfi_def_cfa_offset 8
 623              		.cfi_offset 4, -8
 624              		.cfi_offset 14, -4
 625 0002 94B0     		sub	sp, sp, #80
 626              	.LCFI13:
 627              		.cfi_def_cfa_offset 88
 153:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 628              		.loc 1 153 3 view .LVU121
 153:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 629              		.loc 1 153 22 is_stmt 0 view .LVU122
 630 0004 08AC     		add	r4, sp, #32
 631 0006 3022     		movs	r2, #48
 632 0008 0021     		movs	r1, #0
 633 000a 2046     		mov	r0, r4
 634 000c FFF7FEFF 		bl	memset
 635              	.LVL53:
 154:Src/main.c    **** 
 636              		.loc 1 154 3 is_stmt 1 view .LVU123
 154:Src/main.c    **** 
 637              		.loc 1 154 22 is_stmt 0 view .LVU124
 638 0010 0023     		movs	r3, #0
 639 0012 0393     		str	r3, [sp, #12]
 640 0014 0493     		str	r3, [sp, #16]
 641 0016 0593     		str	r3, [sp, #20]
 642 0018 0693     		str	r3, [sp, #24]
 643 001a 0793     		str	r3, [sp, #28]
 158:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 644              		.loc 1 158 3 is_stmt 1 view .LVU125
 645              	.LBB11:
 158:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 646              		.loc 1 158 3 view .LVU126
 647 001c 0193     		str	r3, [sp, #4]
 158:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 648              		.loc 1 158 3 view .LVU127
 649 001e 184A     		ldr	r2, .L47
 650 0020 116C     		ldr	r1, [r2, #64]
 651 0022 41F08051 		orr	r1, r1, #268435456
 652 0026 1164     		str	r1, [r2, #64]
 158:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 653              		.loc 1 158 3 view .LVU128
 654 0028 126C     		ldr	r2, [r2, #64]
 655 002a 02F08052 		and	r2, r2, #268435456
 656 002e 0192     		str	r2, [sp, #4]
 158:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 657              		.loc 1 158 3 view .LVU129
 658 0030 019A     		ldr	r2, [sp, #4]
 659              	.LBE11:
 158:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 37


 660              		.loc 1 158 3 view .LVU130
 159:Src/main.c    **** 
 661              		.loc 1 159 3 view .LVU131
 662              	.LBB12:
 159:Src/main.c    **** 
 663              		.loc 1 159 3 view .LVU132
 664 0032 0293     		str	r3, [sp, #8]
 159:Src/main.c    **** 
 665              		.loc 1 159 3 view .LVU133
 666 0034 134A     		ldr	r2, .L47+4
 667 0036 1168     		ldr	r1, [r2]
 668 0038 41F48041 		orr	r1, r1, #16384
 669 003c 1160     		str	r1, [r2]
 159:Src/main.c    **** 
 670              		.loc 1 159 3 view .LVU134
 671 003e 1268     		ldr	r2, [r2]
 672 0040 02F48042 		and	r2, r2, #16384
 673 0044 0292     		str	r2, [sp, #8]
 159:Src/main.c    **** 
 674              		.loc 1 159 3 view .LVU135
 675 0046 029A     		ldr	r2, [sp, #8]
 676              	.LBE12:
 159:Src/main.c    **** 
 677              		.loc 1 159 3 view .LVU136
 164:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 678              		.loc 1 164 3 view .LVU137
 164:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 679              		.loc 1 164 36 is_stmt 0 view .LVU138
 680 0048 0222     		movs	r2, #2
 681 004a 0892     		str	r2, [sp, #32]
 165:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 682              		.loc 1 165 3 is_stmt 1 view .LVU139
 165:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 683              		.loc 1 165 30 is_stmt 0 view .LVU140
 684 004c 0122     		movs	r2, #1
 685 004e 0B92     		str	r2, [sp, #44]
 166:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 686              		.loc 1 166 3 is_stmt 1 view .LVU141
 166:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 687              		.loc 1 166 41 is_stmt 0 view .LVU142
 688 0050 1022     		movs	r2, #16
 689 0052 0C92     		str	r2, [sp, #48]
 167:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 690              		.loc 1 167 3 is_stmt 1 view .LVU143
 167:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 691              		.loc 1 167 34 is_stmt 0 view .LVU144
 692 0054 0E93     		str	r3, [sp, #56]
 168:Src/main.c    ****   {
 693              		.loc 1 168 3 is_stmt 1 view .LVU145
 168:Src/main.c    ****   {
 694              		.loc 1 168 7 is_stmt 0 view .LVU146
 695 0056 2046     		mov	r0, r4
 696 0058 FFF7FEFF 		bl	HAL_RCC_OscConfig
 697              	.LVL54:
 168:Src/main.c    ****   {
 698              		.loc 1 168 6 discriminator 1 view .LVU147
 699 005c 60B9     		cbnz	r0, .L45
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 38


 175:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 700              		.loc 1 175 3 is_stmt 1 view .LVU148
 175:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 701              		.loc 1 175 31 is_stmt 0 view .LVU149
 702 005e 0F23     		movs	r3, #15
 703 0060 0393     		str	r3, [sp, #12]
 177:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 704              		.loc 1 177 3 is_stmt 1 view .LVU150
 177:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 705              		.loc 1 177 34 is_stmt 0 view .LVU151
 706 0062 0021     		movs	r1, #0
 707 0064 0491     		str	r1, [sp, #16]
 178:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 708              		.loc 1 178 3 is_stmt 1 view .LVU152
 178:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 709              		.loc 1 178 35 is_stmt 0 view .LVU153
 710 0066 0591     		str	r1, [sp, #20]
 179:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 711              		.loc 1 179 3 is_stmt 1 view .LVU154
 179:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 712              		.loc 1 179 36 is_stmt 0 view .LVU155
 713 0068 0691     		str	r1, [sp, #24]
 180:Src/main.c    **** 
 714              		.loc 1 180 3 is_stmt 1 view .LVU156
 180:Src/main.c    **** 
 715              		.loc 1 180 36 is_stmt 0 view .LVU157
 716 006a 0791     		str	r1, [sp, #28]
 182:Src/main.c    ****   {
 717              		.loc 1 182 3 is_stmt 1 view .LVU158
 182:Src/main.c    ****   {
 718              		.loc 1 182 7 is_stmt 0 view .LVU159
 719 006c 03A8     		add	r0, sp, #12
 720 006e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 721              	.LVL55:
 182:Src/main.c    ****   {
 722              		.loc 1 182 6 discriminator 1 view .LVU160
 723 0072 18B9     		cbnz	r0, .L46
 186:Src/main.c    **** 
 724              		.loc 1 186 1 view .LVU161
 725 0074 14B0     		add	sp, sp, #80
 726              	.LCFI14:
 727              		.cfi_remember_state
 728              		.cfi_def_cfa_offset 8
 729              		@ sp needed
 730 0076 10BD     		pop	{r4, pc}
 731              	.L45:
 732              	.LCFI15:
 733              		.cfi_restore_state
 170:Src/main.c    ****   }
 734              		.loc 1 170 5 is_stmt 1 view .LVU162
 735 0078 FFF7FEFF 		bl	Error_Handler
 736              	.LVL56:
 737              	.L46:
 184:Src/main.c    ****   }
 738              		.loc 1 184 5 view .LVU163
 739 007c FFF7FEFF 		bl	Error_Handler
 740              	.LVL57:
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 39


 741              	.L48:
 742              		.align	2
 743              	.L47:
 744 0080 00380240 		.word	1073887232
 745 0084 00700040 		.word	1073770496
 746              		.cfi_endproc
 747              	.LFE138:
 749              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 750              		.align	2
 751              	.LC13:
 752 0000 53797374 		.ascii	"System ready. Available commands: mode1, mode2, qui"
 752      656D2072 
 752      65616479 
 752      2E204176 
 752      61696C61 
 753 0033 7400     		.ascii	"t\000"
 754              		.section	.text.main,"ax",%progbits
 755              		.align	1
 756              		.global	main
 757              		.syntax unified
 758              		.thumb
 759              		.thumb_func
 761              	main:
 762              	.LFB137:
  91:Src/main.c    **** 
 763              		.loc 1 91 1 view -0
 764              		.cfi_startproc
 765              		@ Volatile: function does not return.
 766              		@ args = 0, pretend = 0, frame = 0
 767              		@ frame_needed = 0, uses_anonymous_args = 0
 768 0000 08B5     		push	{r3, lr}
 769              	.LCFI16:
 770              		.cfi_def_cfa_offset 8
 771              		.cfi_offset 3, -8
 772              		.cfi_offset 14, -4
 100:Src/main.c    **** 
 773              		.loc 1 100 3 view .LVU165
 774 0002 FFF7FEFF 		bl	HAL_Init
 775              	.LVL58:
 108:Src/main.c    **** 
 776              		.loc 1 108 3 view .LVU166
 777 0006 FFF7FEFF 		bl	SystemClock_Config
 778              	.LVL59:
 115:Src/main.c    ****   MX_TIM6_Init();
 779              		.loc 1 115 3 view .LVU167
 780 000a FFF7FEFF 		bl	MX_GPIO_Init
 781              	.LVL60:
 116:Src/main.c    ****   MX_TIM1_Init();
 782              		.loc 1 116 3 view .LVU168
 783 000e FFF7FEFF 		bl	MX_TIM6_Init
 784              	.LVL61:
 117:Src/main.c    ****   MX_UART4_Init();
 785              		.loc 1 117 3 view .LVU169
 786 0012 FFF7FEFF 		bl	MX_TIM1_Init
 787              	.LVL62:
 118:Src/main.c    ****   MX_USART2_UART_Init();
 788              		.loc 1 118 3 view .LVU170
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 40


 789 0016 FFF7FEFF 		bl	MX_UART4_Init
 790              	.LVL63:
 119:Src/main.c    ****   /* USER CODE BEGIN 2 */
 791              		.loc 1 119 3 view .LVU171
 792 001a FFF7FEFF 		bl	MX_USART2_UART_Init
 793              	.LVL64:
 123:Src/main.c    ****   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0); // Set initial duty cycle to 0%
 794              		.loc 1 123 3 view .LVU172
 795 001e 094C     		ldr	r4, .L52
 796 0020 0021     		movs	r1, #0
 797 0022 2046     		mov	r0, r4
 798 0024 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 799              	.LVL65:
 124:Src/main.c    **** 
 800              		.loc 1 124 3 view .LVU173
 801 0028 2368     		ldr	r3, [r4]
 802 002a 0022     		movs	r2, #0
 803 002c 5A63     		str	r2, [r3, #52]
 126:Src/main.c    ****   /* USER CODE END 2 */
 804              		.loc 1 126 3 view .LVU174
 805 002e 0648     		ldr	r0, .L52+4
 806 0030 FFF7FEFF 		bl	sendMessage
 807              	.LVL66:
 808              	.L50:
 131:Src/main.c    ****   {
 809              		.loc 1 131 3 view .LVU175
 135:Src/main.c    ****     
 810              		.loc 1 135 6 view .LVU176
 811 0034 FFF7FEFF 		bl	handleSerialCommunication
 812              	.LVL67:
 138:Src/main.c    ****      
 813              		.loc 1 138 6 view .LVU177
 814 0038 FFF7FEFF 		bl	updateSystem
 815              	.LVL68:
 141:Src/main.c    ****     /* USER CODE BEGIN 3 */
 816              		.loc 1 141 6 discriminator 1 view .LVU178
 817 003c 0A20     		movs	r0, #10
 818 003e FFF7FEFF 		bl	HAL_Delay
 819              	.LVL69:
 131:Src/main.c    ****   {
 820              		.loc 1 131 9 view .LVU179
 821 0042 F7E7     		b	.L50
 822              	.L53:
 823              		.align	2
 824              	.L52:
 825 0044 00000000 		.word	htim1
 826 0048 00000000 		.word	.LC13
 827              		.cfi_endproc
 828              	.LFE137:
 830              		.section	.bss.lastUpdate.0,"aw",%nobits
 831              		.align	2
 834              	lastUpdate.0:
 835 0000 00000000 		.space	4
 836              		.global	servoPosition
 837              		.section	.data.servoPosition,"aw"
 840              	servoPosition:
 841 0000 06       		.byte	6
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 41


 842              		.global	currentState
 843              		.section	.bss.currentState,"aw",%nobits
 846              	currentState:
 847 0000 00       		.space	1
 848              		.text
 849              	.Letext0:
 850              		.file 3 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/machine/_defa
 851              		.file 4 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 852              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 853              		.file 6 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/lib/gcc/arm-none-eabi/14.2.1/includ
 854              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 855              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 856              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 857              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 858              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 859              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 860              		.file 13 "Inc/tim.h"
 861              		.file 14 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/stdio.h"
 862              		.file 15 "/Applications/ArmGNUToolchain/14.2.rel1/arm-none-eabi/arm-none-eabi/include/string.h"
 863              		.file 16 "Src/module/usart_comm.h"
 864              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 865              		.file 18 "Inc/usart.h"
 866              		.file 19 "Inc/gpio.h"
 867              		.file 20 "<built-in>"
ARM GAS  /var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s 			page 42


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:21     .rodata.parseCommand.str1.4:00000000 $d
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:34     .text.parseCommand:00000000 $t
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:40     .text.parseCommand:00000000 parseCommand
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:141    .text.parseCommand:00000054 $d
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:840    .data.servoPosition:00000000 servoPosition
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:150    .rodata.processCommand.str1.4:00000000 $d
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:181    .text.processCommand:00000000 $t
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:187    .text.processCommand:00000000 processCommand
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:212    .text.processCommand:00000010 $d
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:361    .text.processCommand:000000a0 $d
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:846    .bss.currentState:00000000 currentState
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:376    .text.handleSerialCommunication:00000000 $t
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:382    .text.handleSerialCommunication:00000000 handleSerialCommunication
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:431    .text.updateSystem:00000000 $t
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:437    .text.updateSystem:00000000 updateSystem
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:561    .text.updateSystem:00000098 $d
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:834    .bss.lastUpdate.0:00000000 lastUpdate.0
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:570    .text.Error_Handler:00000000 $t
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:576    .text.Error_Handler:00000000 Error_Handler
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:608    .text.SystemClock_Config:00000000 $t
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:614    .text.SystemClock_Config:00000000 SystemClock_Config
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:744    .text.SystemClock_Config:00000080 $d
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:750    .rodata.main.str1.4:00000000 $d
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:755    .text.main:00000000 $t
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:761    .text.main:00000000 main
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:825    .text.main:00000044 $d
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:831    .bss.lastUpdate.0:00000000 $d
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:847    .bss.currentState:00000000 $d
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:217    .text.processCommand:00000015 $d
/var/folders/yr/v27j6cl917jdx7ksvb_6h6k00000gn/T//cc2HE4ap.s:217    .text.processCommand:00000016 $t

UNDEFINED SYMBOLS
strcmp
sscanf
sendMessage
sprintf
receiveMessage
HAL_GetTick
HAL_GPIO_WritePin
htim1
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_GPIO_Init
MX_TIM6_Init
MX_TIM1_Init
MX_UART4_Init
MX_USART2_UART_Init
HAL_TIM_PWM_Start
HAL_Delay
