ARM GAS  /tmp/ccMaoy7n.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"hcsr04.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Src/module/hcsr04.c"
  20              		.section	.text.HC_SR04_get_instance,"ax",%progbits
  21              		.align	1
  22              		.global	HC_SR04_get_instance
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	HC_SR04_get_instance:
  28              	.LFB137:
   1:Src/module/hcsr04.c **** 
   2:Src/module/hcsr04.c **** /**
   3:Src/module/hcsr04.c ****  * @file hcsr04.c
   4:Src/module/hcsr04.c ****  * @brief Implémentation des fonctions pour le capteur ultrasonique HC-SR04
   5:Src/module/hcsr04.c ****  */
   6:Src/module/hcsr04.c **** 
   7:Src/module/hcsr04.c ****  #include "hcsr04.h"
   8:Src/module/hcsr04.c ****  #include "gpio.h"
   9:Src/module/hcsr04.c ****  #include "tim.h"
  10:Src/module/hcsr04.c ****  #include <stdio.h>
  11:Src/module/hcsr04.c ****  #include <stdint.h>
  12:Src/module/hcsr04.c ****  #include "tim.h"
  13:Src/module/hcsr04.c ****  #include "usart_comm.h"
  14:Src/module/hcsr04.c ****  
  15:Src/module/hcsr04.c ****  /**
  16:Src/module/hcsr04.c ****   * @brief Instance statique du capteur HC-SR04 (singleton)
  17:Src/module/hcsr04.c ****   */
  18:Src/module/hcsr04.c ****  static HC_SR04 sensor_instance = {0};
  19:Src/module/hcsr04.c ****  
  20:Src/module/hcsr04.c ****  /**
  21:Src/module/hcsr04.c ****   * @brief Récupère l'instance du capteur HC-SR04 (Singleton)
  22:Src/module/hcsr04.c ****   * @return Pointeur vers l'instance unique du capteur HC-SR04
  23:Src/module/hcsr04.c ****   */
  24:Src/module/hcsr04.c ****  HC_SR04* HC_SR04_get_instance(void) {
  29              		.loc 1 24 38 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  25:Src/module/hcsr04.c ****      return &sensor_instance;
ARM GAS  /tmp/ccMaoy7n.s 			page 2


  34              		.loc 1 25 6 view .LVU1
  26:Src/module/hcsr04.c ****  }
  35              		.loc 1 26 2 is_stmt 0 view .LVU2
  36 0000 0048     		ldr	r0, .L2
  37 0002 7047     		bx	lr
  38              	.L3:
  39              		.align	2
  40              	.L2:
  41 0004 00000000 		.word	sensor_instance
  42              		.cfi_endproc
  43              	.LFE137:
  45              		.section	.text.Delay_Microseconds,"ax",%progbits
  46              		.align	1
  47              		.global	Delay_Microseconds
  48              		.syntax unified
  49              		.thumb
  50              		.thumb_func
  52              	Delay_Microseconds:
  53              	.LVL0:
  54              	.LFB138:
  27:Src/module/hcsr04.c ****  
  28:Src/module/hcsr04.c ****  /**
  29:Src/module/hcsr04.c ****   * @brief Génère un délai précis en microsecondes
  30:Src/module/hcsr04.c ****   * @param us Nombre de microsecondes de délai
  31:Src/module/hcsr04.c ****   * @details Utilise le timer TIM1 pour générer un délai précis
  32:Src/module/hcsr04.c ****   */
  33:Src/module/hcsr04.c ****  void Delay_Microseconds(uint32_t us)
  34:Src/module/hcsr04.c ****  {   
  55              		.loc 1 34 2 is_stmt 1 view -0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 0, uses_anonymous_args = 0
  59              		@ link register save eliminated.
  35:Src/module/hcsr04.c ****      __HAL_TIM_SET_COUNTER(&htim1, 0);  // Réinitialiser le compteur
  60              		.loc 1 35 6 view .LVU4
  61 0000 034B     		ldr	r3, .L6
  62 0002 1A68     		ldr	r2, [r3]
  63 0004 0023     		movs	r3, #0
  64 0006 5362     		str	r3, [r2, #36]
  36:Src/module/hcsr04.c ****      while(__HAL_TIM_GET_COUNTER(&htim1) < us); // Attendre le nombre de µs demandé
  65              		.loc 1 36 6 view .LVU5
  66              	.L5:
  67              		.loc 1 36 42 discriminator 1 view .LVU6
  68              		.loc 1 36 12 is_stmt 0 discriminator 1 view .LVU7
  69 0008 536A     		ldr	r3, [r2, #36]
  70              		.loc 1 36 42 discriminator 1 view .LVU8
  71 000a 8342     		cmp	r3, r0
  72 000c FCD3     		bcc	.L5
  37:Src/module/hcsr04.c ****  }
  73              		.loc 1 37 2 view .LVU9
  74 000e 7047     		bx	lr
  75              	.L7:
  76              		.align	2
  77              	.L6:
  78 0010 00000000 		.word	htim1
  79              		.cfi_endproc
  80              	.LFE138:
ARM GAS  /tmp/ccMaoy7n.s 			page 3


  82              		.section	.text.HC_SR04_init,"ax",%progbits
  83              		.align	1
  84              		.global	HC_SR04_init
  85              		.syntax unified
  86              		.thumb
  87              		.thumb_func
  89              	HC_SR04_init:
  90              	.LFB139:
  38:Src/module/hcsr04.c ****  
  39:Src/module/hcsr04.c ****  /**
  40:Src/module/hcsr04.c ****   * @brief Initialise le capteur HC-SR04
  41:Src/module/hcsr04.c ****   * @details Configure les broches GPIO et le timer nécessaires pour le capteur
  42:Src/module/hcsr04.c ****   */
  43:Src/module/hcsr04.c ****  void HC_SR04_init(void) {
  91              		.loc 1 43 26 is_stmt 1 view -0
  92              		.cfi_startproc
  93              		@ args = 0, pretend = 0, frame = 24
  94              		@ frame_needed = 0, uses_anonymous_args = 0
  95 0000 30B5     		push	{r4, r5, lr}
  96              	.LCFI0:
  97              		.cfi_def_cfa_offset 12
  98              		.cfi_offset 4, -12
  99              		.cfi_offset 5, -8
 100              		.cfi_offset 14, -4
 101 0002 87B0     		sub	sp, sp, #28
 102              	.LCFI1:
 103              		.cfi_def_cfa_offset 40
  44:Src/module/hcsr04.c ****      // Configuration Trigger (PA8) en sortie
  45:Src/module/hcsr04.c ****      GPIO_InitTypeDef GPIO_InitStruct = {0};
 104              		.loc 1 45 6 view .LVU11
 105              		.loc 1 45 23 is_stmt 0 view .LVU12
 106 0004 0024     		movs	r4, #0
 107 0006 0194     		str	r4, [sp, #4]
 108 0008 0294     		str	r4, [sp, #8]
 109 000a 0394     		str	r4, [sp, #12]
 110 000c 0494     		str	r4, [sp, #16]
 111 000e 0594     		str	r4, [sp, #20]
  46:Src/module/hcsr04.c ****      GPIO_InitStruct.Pin = GPIO_PIN_8;
 112              		.loc 1 46 6 is_stmt 1 view .LVU13
 113              		.loc 1 46 26 is_stmt 0 view .LVU14
 114 0010 4FF48073 		mov	r3, #256
 115 0014 0193     		str	r3, [sp, #4]
  47:Src/module/hcsr04.c ****      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 116              		.loc 1 47 6 is_stmt 1 view .LVU15
 117              		.loc 1 47 27 is_stmt 0 view .LVU16
 118 0016 0123     		movs	r3, #1
 119 0018 0293     		str	r3, [sp, #8]
  48:Src/module/hcsr04.c ****      GPIO_InitStruct.Pull = GPIO_NOPULL;
 120              		.loc 1 48 6 is_stmt 1 view .LVU17
  49:Src/module/hcsr04.c ****      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 121              		.loc 1 49 6 view .LVU18
  50:Src/module/hcsr04.c ****      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 122              		.loc 1 50 6 view .LVU19
 123 001a 0A4D     		ldr	r5, .L10
 124 001c 01A9     		add	r1, sp, #4
 125 001e 2846     		mov	r0, r5
 126 0020 FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  /tmp/ccMaoy7n.s 			page 4


 127              	.LVL1:
  51:Src/module/hcsr04.c ****  
  52:Src/module/hcsr04.c ****      // Configuration Echo (PA9) en entrée avec pull-down
  53:Src/module/hcsr04.c ****      GPIO_InitStruct.Pin = GPIO_PIN_9;
 128              		.loc 1 53 6 view .LVU20
 129              		.loc 1 53 26 is_stmt 0 view .LVU21
 130 0024 4FF40073 		mov	r3, #512
 131 0028 0193     		str	r3, [sp, #4]
  54:Src/module/hcsr04.c ****      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 132              		.loc 1 54 6 is_stmt 1 view .LVU22
 133              		.loc 1 54 27 is_stmt 0 view .LVU23
 134 002a 0294     		str	r4, [sp, #8]
  55:Src/module/hcsr04.c ****      GPIO_InitStruct.Pull = GPIO_PULLDOWN; // Ajout d'un pull-down pour stabiliser le signal
 135              		.loc 1 55 6 is_stmt 1 view .LVU24
 136              		.loc 1 55 27 is_stmt 0 view .LVU25
 137 002c 0223     		movs	r3, #2
 138 002e 0393     		str	r3, [sp, #12]
  56:Src/module/hcsr04.c ****      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 139              		.loc 1 56 6 is_stmt 1 view .LVU26
 140 0030 01A9     		add	r1, sp, #4
 141 0032 2846     		mov	r0, r5
 142 0034 FFF7FEFF 		bl	HAL_GPIO_Init
 143              	.LVL2:
  57:Src/module/hcsr04.c ****  
  58:Src/module/hcsr04.c ****      // Initialisation du timer pour mesurer le temps
  59:Src/module/hcsr04.c ****      HAL_TIM_Base_Start(&htim1);
 144              		.loc 1 59 6 view .LVU27
 145 0038 0348     		ldr	r0, .L10+4
 146 003a FFF7FEFF 		bl	HAL_TIM_Base_Start
 147              	.LVL3:
  60:Src/module/hcsr04.c ****  }
 148              		.loc 1 60 2 is_stmt 0 view .LVU28
 149 003e 07B0     		add	sp, sp, #28
 150              	.LCFI2:
 151              		.cfi_def_cfa_offset 12
 152              		@ sp needed
 153 0040 30BD     		pop	{r4, r5, pc}
 154              	.L11:
 155 0042 00BF     		.align	2
 156              	.L10:
 157 0044 00000240 		.word	1073872896
 158 0048 00000000 		.word	htim1
 159              		.cfi_endproc
 160              	.LFE139:
 162              		.section	.text.HC_SR04_get_distance,"ax",%progbits
 163              		.align	1
 164              		.global	HC_SR04_get_distance
 165              		.syntax unified
 166              		.thumb
 167              		.thumb_func
 169              	HC_SR04_get_distance:
 170              	.LVL4:
 171              	.LFB140:
  61:Src/module/hcsr04.c ****  
  62:Src/module/hcsr04.c ****  /**
  63:Src/module/hcsr04.c ****   * @brief Mesure la distance avec le capteur HC-SR04
  64:Src/module/hcsr04.c ****   * @param sensor Pointeur vers l'instance du capteur HC-SR04
ARM GAS  /tmp/ccMaoy7n.s 			page 5


  65:Src/module/hcsr04.c ****   * @return Distance mesurée en centimètres, ou -1.0f en cas d'erreur
  66:Src/module/hcsr04.c ****   * @note La plage valide de mesure est de 5 à 25 cm.
  67:Src/module/hcsr04.c ****   */
  68:Src/module/hcsr04.c ****  float HC_SR04_get_distance(HC_SR04* sensor) {
 172              		.loc 1 68 46 is_stmt 1 view -0
 173              		.cfi_startproc
 174              		@ args = 0, pretend = 0, frame = 0
 175              		@ frame_needed = 0, uses_anonymous_args = 0
 176              		.loc 1 68 46 is_stmt 0 view .LVU30
 177 0000 38B5     		push	{r3, r4, r5, lr}
 178              	.LCFI3:
 179              		.cfi_def_cfa_offset 16
 180              		.cfi_offset 3, -16
 181              		.cfi_offset 4, -12
 182              		.cfi_offset 5, -8
 183              		.cfi_offset 14, -4
  69:Src/module/hcsr04.c ****      uint32_t start_time, stop_time;
 184              		.loc 1 69 6 is_stmt 1 view .LVU31
  70:Src/module/hcsr04.c ****  
  71:Src/module/hcsr04.c ****      // Envoi d'une impulsion Trigger de 10 µs
  72:Src/module/hcsr04.c ****      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 185              		.loc 1 72 6 view .LVU32
 186 0002 2D4C     		ldr	r4, .L25
 187 0004 0122     		movs	r2, #1
 188 0006 4FF48071 		mov	r1, #256
 189 000a 2046     		mov	r0, r4
 190              	.LVL5:
 191              		.loc 1 72 6 is_stmt 0 view .LVU33
 192 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
 193              	.LVL6:
  73:Src/module/hcsr04.c ****      Delay_Microseconds(10); // Délai précis en microsecondes
 194              		.loc 1 73 6 is_stmt 1 view .LVU34
 195 0010 0A20     		movs	r0, #10
 196 0012 FFF7FEFF 		bl	Delay_Microseconds
 197              	.LVL7:
  74:Src/module/hcsr04.c ****      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 198              		.loc 1 74 6 view .LVU35
 199 0016 0022     		movs	r2, #0
 200 0018 4FF48071 		mov	r1, #256
 201 001c 2046     		mov	r0, r4
 202 001e FFF7FEFF 		bl	HAL_GPIO_WritePin
 203              	.LVL8:
  75:Src/module/hcsr04.c ****  
  76:Src/module/hcsr04.c ****      // Attendre l'activation de Echo (avec timeout)
  77:Src/module/hcsr04.c ****      uint32_t timeout = HAL_GetTick() + 10; // Timeout de 10 ms
 204              		.loc 1 77 6 view .LVU36
 205              		.loc 1 77 25 is_stmt 0 view .LVU37
 206 0022 FFF7FEFF 		bl	HAL_GetTick
 207              	.LVL9:
 208              		.loc 1 77 15 discriminator 1 view .LVU38
 209 0026 00F10A04 		add	r4, r0, #10
 210              	.LVL10:
  78:Src/module/hcsr04.c ****      while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_RESET) {
 211              		.loc 1 78 6 is_stmt 1 view .LVU39
 212              	.L13:
 213              		.loc 1 78 49 view .LVU40
 214              		.loc 1 78 13 is_stmt 0 view .LVU41
ARM GAS  /tmp/ccMaoy7n.s 			page 6


 215 002a 4FF40071 		mov	r1, #512
 216 002e 2248     		ldr	r0, .L25
 217 0030 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 218              	.LVL11:
 219              		.loc 1 78 49 discriminator 1 view .LVU42
 220 0034 30B9     		cbnz	r0, .L23
  79:Src/module/hcsr04.c ****          if (HAL_GetTick() > timeout) {
 221              		.loc 1 79 10 is_stmt 1 view .LVU43
 222              		.loc 1 79 14 is_stmt 0 view .LVU44
 223 0036 FFF7FEFF 		bl	HAL_GetTick
 224              	.LVL12:
 225              		.loc 1 79 13 discriminator 1 view .LVU45
 226 003a A042     		cmp	r0, r4
 227 003c F5D9     		bls	.L13
  80:Src/module/hcsr04.c ****              return -1.0f; // Timeout, retourner une erreur
 228              		.loc 1 80 21 view .LVU46
 229 003e BFEE000A 		vmov.f32	s0, #-1.0e+0
 230              	.L12:
  81:Src/module/hcsr04.c ****          }
  82:Src/module/hcsr04.c ****      }
  83:Src/module/hcsr04.c ****  
  84:Src/module/hcsr04.c ****      // Capturer le temps de départ
  85:Src/module/hcsr04.c ****      start_time = __HAL_TIM_GET_COUNTER(&htim1);
  86:Src/module/hcsr04.c ****  
  87:Src/module/hcsr04.c ****      // Attendre la fin de l'impulsion Echo (avec timeout)
  88:Src/module/hcsr04.c ****      timeout = HAL_GetTick() + 10; // Timeout de 10 ms
  89:Src/module/hcsr04.c ****      while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET) {
  90:Src/module/hcsr04.c ****          if (HAL_GetTick() > timeout) {
  91:Src/module/hcsr04.c ****              return -1.0f; // Timeout, retourner une erreur
  92:Src/module/hcsr04.c ****          }
  93:Src/module/hcsr04.c ****      }
  94:Src/module/hcsr04.c ****  
  95:Src/module/hcsr04.c ****      // Capturer le temps de fin
  96:Src/module/hcsr04.c ****      stop_time = __HAL_TIM_GET_COUNTER(&htim1);
  97:Src/module/hcsr04.c ****  
  98:Src/module/hcsr04.c ****      // Calcul du temps de vol (µs) et distance en cm
  99:Src/module/hcsr04.c ****      uint32_t duration = stop_time - start_time;
 100:Src/module/hcsr04.c ****      float distance = (duration * 0.0343f) / 2.0f;
 101:Src/module/hcsr04.c ****  
 102:Src/module/hcsr04.c ****      // Si hors de la plage 5-25cm, retourner -1 (erreur)
 103:Src/module/hcsr04.c ****      if (distance < 5 || distance > 25) {
 104:Src/module/hcsr04.c ****          return -1.0f;
 105:Src/module/hcsr04.c ****      }
 106:Src/module/hcsr04.c ****  
 107:Src/module/hcsr04.c ****      return distance;
 108:Src/module/hcsr04.c ****  }
 231              		.loc 1 108 2 view .LVU47
 232 0042 38BD     		pop	{r3, r4, r5, pc}
 233              	.LVL13:
 234              	.L23:
  85:Src/module/hcsr04.c ****  
 235              		.loc 1 85 6 is_stmt 1 view .LVU48
  85:Src/module/hcsr04.c ****  
 236              		.loc 1 85 19 is_stmt 0 view .LVU49
 237 0044 1D4B     		ldr	r3, .L25+4
 238 0046 1B68     		ldr	r3, [r3]
  85:Src/module/hcsr04.c ****  
ARM GAS  /tmp/ccMaoy7n.s 			page 7


 239              		.loc 1 85 17 view .LVU50
 240 0048 5D6A     		ldr	r5, [r3, #36]
 241              	.LVL14:
  88:Src/module/hcsr04.c ****      while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET) {
 242              		.loc 1 88 6 is_stmt 1 view .LVU51
  88:Src/module/hcsr04.c ****      while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET) {
 243              		.loc 1 88 16 is_stmt 0 view .LVU52
 244 004a FFF7FEFF 		bl	HAL_GetTick
 245              	.LVL15:
  88:Src/module/hcsr04.c ****      while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET) {
 246              		.loc 1 88 14 discriminator 1 view .LVU53
 247 004e 00F10A04 		add	r4, r0, #10
 248              	.LVL16:
  89:Src/module/hcsr04.c ****          if (HAL_GetTick() > timeout) {
 249              		.loc 1 89 6 is_stmt 1 view .LVU54
 250              	.L16:
  89:Src/module/hcsr04.c ****          if (HAL_GetTick() > timeout) {
 251              		.loc 1 89 49 view .LVU55
  89:Src/module/hcsr04.c ****          if (HAL_GetTick() > timeout) {
 252              		.loc 1 89 13 is_stmt 0 view .LVU56
 253 0052 4FF40071 		mov	r1, #512
 254 0056 1848     		ldr	r0, .L25
 255 0058 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 256              	.LVL17:
  89:Src/module/hcsr04.c ****          if (HAL_GetTick() > timeout) {
 257              		.loc 1 89 49 discriminator 1 view .LVU57
 258 005c 0128     		cmp	r0, #1
 259 005e 06D1     		bne	.L24
  90:Src/module/hcsr04.c ****              return -1.0f; // Timeout, retourner une erreur
 260              		.loc 1 90 10 is_stmt 1 view .LVU58
  90:Src/module/hcsr04.c ****              return -1.0f; // Timeout, retourner une erreur
 261              		.loc 1 90 14 is_stmt 0 view .LVU59
 262 0060 FFF7FEFF 		bl	HAL_GetTick
 263              	.LVL18:
  90:Src/module/hcsr04.c ****              return -1.0f; // Timeout, retourner une erreur
 264              		.loc 1 90 13 discriminator 1 view .LVU60
 265 0064 A042     		cmp	r0, r4
 266 0066 F4D9     		bls	.L16
  91:Src/module/hcsr04.c ****          }
 267              		.loc 1 91 21 view .LVU61
 268 0068 BFEE000A 		vmov.f32	s0, #-1.0e+0
 269 006c E9E7     		b	.L12
 270              	.L24:
  96:Src/module/hcsr04.c ****  
 271              		.loc 1 96 6 is_stmt 1 view .LVU62
  96:Src/module/hcsr04.c ****  
 272              		.loc 1 96 18 is_stmt 0 view .LVU63
 273 006e 134B     		ldr	r3, .L25+4
 274 0070 1B68     		ldr	r3, [r3]
  96:Src/module/hcsr04.c ****  
 275              		.loc 1 96 16 view .LVU64
 276 0072 5B6A     		ldr	r3, [r3, #36]
 277              	.LVL19:
  99:Src/module/hcsr04.c ****      float distance = (duration * 0.0343f) / 2.0f;
 278              		.loc 1 99 6 is_stmt 1 view .LVU65
  99:Src/module/hcsr04.c ****      float distance = (duration * 0.0343f) / 2.0f;
 279              		.loc 1 99 15 is_stmt 0 view .LVU66
ARM GAS  /tmp/ccMaoy7n.s 			page 8


 280 0074 5B1B     		subs	r3, r3, r5
 281              	.LVL20:
  99:Src/module/hcsr04.c ****      float distance = (duration * 0.0343f) / 2.0f;
 282              		.loc 1 99 15 view .LVU67
 283 0076 00EE103A 		vmov	s0, r3	@ int
 284              	.LVL21:
 100:Src/module/hcsr04.c ****  
 285              		.loc 1 100 6 is_stmt 1 view .LVU68
 100:Src/module/hcsr04.c ****  
 286              		.loc 1 100 33 is_stmt 0 view .LVU69
 287 007a B8EE400A 		vcvt.f32.u32	s0, s0
 288 007e DFED107A 		vldr.32	s15, .L25+8
 289 0082 20EE270A 		vmul.f32	s0, s0, s15
 100:Src/module/hcsr04.c ****  
 290              		.loc 1 100 12 view .LVU70
 291 0086 F6EE007A 		vmov.f32	s15, #5.0e-1
 292 008a 20EE270A 		vmul.f32	s0, s0, s15
 293              	.LVL22:
 103:Src/module/hcsr04.c ****          return -1.0f;
 294              		.loc 1 103 6 is_stmt 1 view .LVU71
 103:Src/module/hcsr04.c ****          return -1.0f;
 295              		.loc 1 103 9 is_stmt 0 view .LVU72
 296 008e F1EE047A 		vmov.f32	s15, #5.0e+0
 297 0092 B4EEE70A 		vcmpe.f32	s0, s15
 298 0096 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 299 009a 09D4     		bmi	.L20
 103:Src/module/hcsr04.c ****          return -1.0f;
 300              		.loc 1 103 23 discriminator 1 view .LVU73
 301 009c F3EE097A 		vmov.f32	s15, #2.5e+1
 302 00a0 B4EEE70A 		vcmpe.f32	s0, s15
 303 00a4 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 304 00a8 CBDD     		ble	.L12
 104:Src/module/hcsr04.c ****      }
 305              		.loc 1 104 17 view .LVU74
 306 00aa BFEE000A 		vmov.f32	s0, #-1.0e+0
 307              	.LVL23:
 104:Src/module/hcsr04.c ****      }
 308              		.loc 1 104 17 view .LVU75
 309 00ae C8E7     		b	.L12
 310              	.LVL24:
 311              	.L20:
 104:Src/module/hcsr04.c ****      }
 312              		.loc 1 104 17 view .LVU76
 313 00b0 BFEE000A 		vmov.f32	s0, #-1.0e+0
 314              	.LVL25:
 104:Src/module/hcsr04.c ****      }
 315              		.loc 1 104 17 view .LVU77
 316 00b4 C5E7     		b	.L12
 317              	.L26:
 318 00b6 00BF     		.align	2
 319              	.L25:
 320 00b8 00000240 		.word	1073872896
 321 00bc 00000000 		.word	htim1
 322 00c0 287E0C3D 		.word	1024228904
 323              		.cfi_endproc
 324              	.LFE140:
 326              		.global	__aeabi_f2d
ARM GAS  /tmp/ccMaoy7n.s 			page 9


 327              		.section	.rodata.HC_SR04_update.str1.4,"aMS",%progbits,1
 328              		.align	2
 329              	.LC0:
 330 0000 44697374 		.ascii	"Distance: %.2f cm\000"
 330      616E6365 
 330      3A20252E 
 330      32662063 
 330      6D00
 331 0012 0000     		.align	2
 332              	.LC1:
 333 0014 44697374 		.ascii	"Distance hors plage (%lu)\000"
 333      616E6365 
 333      20686F72 
 333      7320706C 
 333      61676520 
 334              		.section	.text.HC_SR04_update,"ax",%progbits
 335              		.align	1
 336              		.global	HC_SR04_update
 337              		.syntax unified
 338              		.thumb
 339              		.thumb_func
 341              	HC_SR04_update:
 342              	.LVL26:
 343              	.LFB141:
 109:Src/module/hcsr04.c ****  
 110:Src/module/hcsr04.c ****  /**
 111:Src/module/hcsr04.c ****   * @brief Met à jour périodiquement la distance mesurée par le capteur
 112:Src/module/hcsr04.c ****   * @param sensor Pointeur vers l'instance du capteur HC-SR04
 113:Src/module/hcsr04.c ****   * @param mode Mode d'opération (1 pour activer les mises à jour périodiques)
 114:Src/module/hcsr04.c ****   * @details Cette fonction effectue une mesure toutes les 250ms lorsque mode=1, 
 115:Src/module/hcsr04.c ****   * met à jour les LEDs d'état et envoie la distance via UART
 116:Src/module/hcsr04.c ****   */
 117:Src/module/hcsr04.c ****  void HC_SR04_update(HC_SR04* sensor, int mode) {
 344              		.loc 1 117 49 is_stmt 1 view -0
 345              		.cfi_startproc
 346              		@ args = 0, pretend = 0, frame = 32
 347              		@ frame_needed = 0, uses_anonymous_args = 0
 118:Src/module/hcsr04.c ****      if (mode == 1) {
 348              		.loc 1 118 6 view .LVU79
 349              		.loc 1 118 9 is_stmt 0 view .LVU80
 350 0000 0129     		cmp	r1, #1
 351 0002 00D0     		beq	.L39
 352 0004 7047     		bx	lr
 353              	.L39:
 117:Src/module/hcsr04.c ****      if (mode == 1) {
 354              		.loc 1 117 49 view .LVU81
 355 0006 10B5     		push	{r4, lr}
 356              	.LCFI4:
 357              		.cfi_def_cfa_offset 8
 358              		.cfi_offset 4, -8
 359              		.cfi_offset 14, -4
 360 0008 88B0     		sub	sp, sp, #32
 361              	.LCFI5:
 362              		.cfi_def_cfa_offset 40
 363 000a 0446     		mov	r4, r0
 364              	.LBB2:
 119:Src/module/hcsr04.c ****          static uint32_t last_update = 0;
ARM GAS  /tmp/ccMaoy7n.s 			page 10


 365              		.loc 1 119 10 is_stmt 1 view .LVU82
 120:Src/module/hcsr04.c ****          uint32_t current_time = HAL_GetTick();
 366              		.loc 1 120 10 view .LVU83
 367              		.loc 1 120 34 is_stmt 0 view .LVU84
 368 000c FFF7FEFF 		bl	HAL_GetTick
 369              	.LVL27:
 121:Src/module/hcsr04.c ****          
 122:Src/module/hcsr04.c ****          if (current_time - last_update >= 250) {
 370              		.loc 1 122 10 is_stmt 1 view .LVU85
 371              		.loc 1 122 27 is_stmt 0 view .LVU86
 372 0010 274B     		ldr	r3, .L42
 373 0012 1B68     		ldr	r3, [r3]
 374 0014 C31A     		subs	r3, r0, r3
 375              		.loc 1 122 13 view .LVU87
 376 0016 F92B     		cmp	r3, #249
 377 0018 01D8     		bhi	.L40
 378              	.LVL28:
 379              	.L27:
 380              		.loc 1 122 13 view .LVU88
 381              	.LBE2:
 123:Src/module/hcsr04.c ****              // Force la mise à jour de last_update
 124:Src/module/hcsr04.c ****              last_update = current_time;
 125:Src/module/hcsr04.c ****              
 126:Src/module/hcsr04.c ****              // Mettre à jour la distance mesurée
 127:Src/module/hcsr04.c ****              sensor->distance = HC_SR04_get_distance(sensor);
 128:Src/module/hcsr04.c ****              
 129:Src/module/hcsr04.c ****              // Envoyer la distance via UART
 130:Src/module/hcsr04.c ****              char message[32];
 131:Src/module/hcsr04.c ****              if (sensor->distance >= 5 && sensor->distance <= 25) {
 132:Src/module/hcsr04.c ****                  sprintf(message, "Distance: %.2f cm", sensor->distance);
 133:Src/module/hcsr04.c ****                  sendMessage(message);
 134:Src/module/hcsr04.c ****                  
 135:Src/module/hcsr04.c ****                  // Indiquer l'état avec les LEDs
 136:Src/module/hcsr04.c ****                  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);   // LED ORANGE ON
 137:Src/module/hcsr04.c ****                  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); // LED ROUGE OFF
 138:Src/module/hcsr04.c ****              } else {
 139:Src/module/hcsr04.c ****                  // Ajoutez un compteur pour voir si cette section est exécutée plusieurs fois
 140:Src/module/hcsr04.c ****                  static uint32_t error_count = 0;
 141:Src/module/hcsr04.c ****                  sprintf(message, "Distance hors plage (%lu)", ++error_count);
 142:Src/module/hcsr04.c ****                  sendMessage(message);
 143:Src/module/hcsr04.c ****                  
 144:Src/module/hcsr04.c ****                  // LEDs pour indiquer erreur
 145:Src/module/hcsr04.c ****                  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET); // LED ORANGE OFF
 146:Src/module/hcsr04.c ****                  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);   // LED ROUGE ON
 147:Src/module/hcsr04.c ****              }
 148:Src/module/hcsr04.c ****          }
 149:Src/module/hcsr04.c ****      }
 150:Src/module/hcsr04.c ****  }...
 382              		.loc 1 150 2 view .LVU89
 383 001a 08B0     		add	sp, sp, #32
 384              	.LCFI6:
 385              		.cfi_remember_state
 386              		.cfi_def_cfa_offset 8
 387              		@ sp needed
 388 001c 10BD     		pop	{r4, pc}
 389              	.LVL29:
 390              	.L40:
ARM GAS  /tmp/ccMaoy7n.s 			page 11


 391              	.LCFI7:
 392              		.cfi_restore_state
 393              	.LBB6:
 394              	.LBB3:
 124:Src/module/hcsr04.c ****              last_update = current_time;
 395              		.loc 1 124 14 is_stmt 1 view .LVU90
 124:Src/module/hcsr04.c ****              last_update = current_time;
 396              		.loc 1 124 26 is_stmt 0 view .LVU91
 397 001e 244B     		ldr	r3, .L42
 398 0020 1860     		str	r0, [r3]
 127:Src/module/hcsr04.c ****              sensor->distance = HC_SR04_get_distance(sensor);
 399              		.loc 1 127 14 is_stmt 1 view .LVU92
 127:Src/module/hcsr04.c ****              sensor->distance = HC_SR04_get_distance(sensor);
 400              		.loc 1 127 33 is_stmt 0 view .LVU93
 401 0022 2046     		mov	r0, r4
 402              	.LVL30:
 127:Src/module/hcsr04.c ****              sensor->distance = HC_SR04_get_distance(sensor);
 403              		.loc 1 127 33 view .LVU94
 404 0024 FFF7FEFF 		bl	HC_SR04_get_distance
 405              	.LVL31:
 127:Src/module/hcsr04.c ****              sensor->distance = HC_SR04_get_distance(sensor);
 406              		.loc 1 127 31 discriminator 1 view .LVU95
 407 0028 84ED050A 		vstr.32	s0, [r4, #20]
 130:Src/module/hcsr04.c ****              char message[32];
 408              		.loc 1 130 14 is_stmt 1 view .LVU96
 131:Src/module/hcsr04.c ****              if (sensor->distance >= 5 && sensor->distance <= 25) {
 409              		.loc 1 131 14 view .LVU97
 131:Src/module/hcsr04.c ****              if (sensor->distance >= 5 && sensor->distance <= 25) {
 410              		.loc 1 131 17 is_stmt 0 view .LVU98
 411 002c F1EE047A 		vmov.f32	s15, #5.0e+0
 412 0030 B4EEE70A 		vcmpe.f32	s0, s15
 413 0034 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 414 0038 06DB     		blt	.L29
 131:Src/module/hcsr04.c ****              if (sensor->distance >= 5 && sensor->distance <= 25) {
 415              		.loc 1 131 40 discriminator 1 view .LVU99
 416 003a F3EE097A 		vmov.f32	s15, #2.5e+1
 417 003e B4EEE70A 		vcmpe.f32	s0, s15
 418 0042 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 419 0046 18D9     		bls	.L41
 420              	.L29:
 421              	.LBB4:
 140:Src/module/hcsr04.c ****                  static uint32_t error_count = 0;
 422              		.loc 1 140 18 is_stmt 1 view .LVU100
 141:Src/module/hcsr04.c ****                  sprintf(message, "Distance hors plage (%lu)", ++error_count);
 423              		.loc 1 141 18 view .LVU101
 424 0048 1A4B     		ldr	r3, .L42+4
 425 004a 1A68     		ldr	r2, [r3]
 426 004c 0132     		adds	r2, r2, #1
 427 004e 1A60     		str	r2, [r3]
 428 0050 1949     		ldr	r1, .L42+8
 429 0052 6846     		mov	r0, sp
 430 0054 FFF7FEFF 		bl	sprintf
 431              	.LVL32:
 142:Src/module/hcsr04.c ****                  sendMessage(message);
 432              		.loc 1 142 18 view .LVU102
 433 0058 6846     		mov	r0, sp
 434 005a FFF7FEFF 		bl	sendMessage
ARM GAS  /tmp/ccMaoy7n.s 			page 12


 435              	.LVL33:
 145:Src/module/hcsr04.c ****                  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET); // LED ORANGE OFF
 436              		.loc 1 145 18 view .LVU103
 437 005e 174C     		ldr	r4, .L42+12
 438              	.LVL34:
 145:Src/module/hcsr04.c ****                  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET); // LED ORANGE OFF
 439              		.loc 1 145 18 is_stmt 0 view .LVU104
 440 0060 0022     		movs	r2, #0
 441 0062 4FF40051 		mov	r1, #8192
 442 0066 2046     		mov	r0, r4
 443 0068 FFF7FEFF 		bl	HAL_GPIO_WritePin
 444              	.LVL35:
 146:Src/module/hcsr04.c ****                  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);   // LED ROUGE ON
 445              		.loc 1 146 18 is_stmt 1 view .LVU105
 446 006c 0122     		movs	r2, #1
 447 006e 4FF48041 		mov	r1, #16384
 448 0072 2046     		mov	r0, r4
 449 0074 FFF7FEFF 		bl	HAL_GPIO_WritePin
 450              	.LVL36:
 451              	.LBE4:
 452              	.LBE3:
 453              	.LBE6:
 454              		.loc 1 150 2 is_stmt 0 view .LVU106
 455 0078 CFE7     		b	.L27
 456              	.LVL37:
 457              	.L41:
 458              	.LBB7:
 459              	.LBB5:
 132:Src/module/hcsr04.c ****                  sprintf(message, "Distance: %.2f cm", sensor->distance);
 460              		.loc 1 132 18 is_stmt 1 view .LVU107
 461 007a 10EE100A 		vmov	r0, s0
 462 007e FFF7FEFF 		bl	__aeabi_f2d
 463              	.LVL38:
 464 0082 0246     		mov	r2, r0
 465 0084 0B46     		mov	r3, r1
 466 0086 0E49     		ldr	r1, .L42+16
 467 0088 6846     		mov	r0, sp
 468 008a FFF7FEFF 		bl	sprintf
 469              	.LVL39:
 133:Src/module/hcsr04.c ****                  sendMessage(message);
 470              		.loc 1 133 18 view .LVU108
 471 008e 6846     		mov	r0, sp
 472 0090 FFF7FEFF 		bl	sendMessage
 473              	.LVL40:
 136:Src/module/hcsr04.c ****                  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);   // LED ORANGE ON
 474              		.loc 1 136 18 view .LVU109
 475 0094 094C     		ldr	r4, .L42+12
 476              	.LVL41:
 136:Src/module/hcsr04.c ****                  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);   // LED ORANGE ON
 477              		.loc 1 136 18 is_stmt 0 view .LVU110
 478 0096 0122     		movs	r2, #1
 479 0098 4FF40051 		mov	r1, #8192
 480 009c 2046     		mov	r0, r4
 481 009e FFF7FEFF 		bl	HAL_GPIO_WritePin
 482              	.LVL42:
 137:Src/module/hcsr04.c ****                  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); // LED ROUGE OFF
 483              		.loc 1 137 18 is_stmt 1 view .LVU111
ARM GAS  /tmp/ccMaoy7n.s 			page 13


 484 00a2 0022     		movs	r2, #0
 485 00a4 4FF48041 		mov	r1, #16384
 486 00a8 2046     		mov	r0, r4
 487 00aa FFF7FEFF 		bl	HAL_GPIO_WritePin
 488              	.LVL43:
 489 00ae B4E7     		b	.L27
 490              	.L43:
 491              		.align	2
 492              	.L42:
 493 00b0 00000000 		.word	last_update.1
 494 00b4 00000000 		.word	error_count.0
 495 00b8 14000000 		.word	.LC1
 496 00bc 000C0240 		.word	1073875968
 497 00c0 00000000 		.word	.LC0
 498              	.LBE5:
 499              	.LBE7:
 500              		.cfi_endproc
 501              	.LFE141:
 503              		.section	.bss.error_count.0,"aw",%nobits
 504              		.align	2
 507              	error_count.0:
 508 0000 00000000 		.space	4
 509              		.section	.bss.last_update.1,"aw",%nobits
 510              		.align	2
 513              	last_update.1:
 514 0000 00000000 		.space	4
 515              		.section	.bss.sensor_instance,"aw",%nobits
 516              		.align	2
 519              	sensor_instance:
 520 0000 00000000 		.space	24
 520      00000000 
 520      00000000 
 520      00000000 
 520      00000000 
 521              		.text
 522              	.Letext0:
 523              		.file 2 "/usr/lib/gcc/arm-none-eabi/13.2.1/include/stdint.h"
 524              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 525              		.file 4 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 526              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 527              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 528              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 529              		.file 8 "Src/module/hcsr04.h"
 530              		.file 9 "/usr/include/newlib/stdio.h"
 531              		.file 10 "Src/module/usart_comm.h"
 532              		.file 11 "Inc/tim.h"
 533              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/ccMaoy7n.s 			page 14


DEFINED SYMBOLS
                            *ABS*:00000000 hcsr04.c
     /tmp/ccMaoy7n.s:21     .text.HC_SR04_get_instance:00000000 $t
     /tmp/ccMaoy7n.s:27     .text.HC_SR04_get_instance:00000000 HC_SR04_get_instance
     /tmp/ccMaoy7n.s:41     .text.HC_SR04_get_instance:00000004 $d
     /tmp/ccMaoy7n.s:519    .bss.sensor_instance:00000000 sensor_instance
     /tmp/ccMaoy7n.s:46     .text.Delay_Microseconds:00000000 $t
     /tmp/ccMaoy7n.s:52     .text.Delay_Microseconds:00000000 Delay_Microseconds
     /tmp/ccMaoy7n.s:78     .text.Delay_Microseconds:00000010 $d
     /tmp/ccMaoy7n.s:83     .text.HC_SR04_init:00000000 $t
     /tmp/ccMaoy7n.s:89     .text.HC_SR04_init:00000000 HC_SR04_init
     /tmp/ccMaoy7n.s:157    .text.HC_SR04_init:00000044 $d
     /tmp/ccMaoy7n.s:163    .text.HC_SR04_get_distance:00000000 $t
     /tmp/ccMaoy7n.s:169    .text.HC_SR04_get_distance:00000000 HC_SR04_get_distance
     /tmp/ccMaoy7n.s:320    .text.HC_SR04_get_distance:000000b8 $d
     /tmp/ccMaoy7n.s:328    .rodata.HC_SR04_update.str1.4:00000000 $d
     /tmp/ccMaoy7n.s:335    .text.HC_SR04_update:00000000 $t
     /tmp/ccMaoy7n.s:341    .text.HC_SR04_update:00000000 HC_SR04_update
     /tmp/ccMaoy7n.s:493    .text.HC_SR04_update:000000b0 $d
     /tmp/ccMaoy7n.s:513    .bss.last_update.1:00000000 last_update.1
     /tmp/ccMaoy7n.s:507    .bss.error_count.0:00000000 error_count.0
     /tmp/ccMaoy7n.s:504    .bss.error_count.0:00000000 $d
     /tmp/ccMaoy7n.s:510    .bss.last_update.1:00000000 $d
     /tmp/ccMaoy7n.s:516    .bss.sensor_instance:00000000 $d

UNDEFINED SYMBOLS
htim1
HAL_GPIO_Init
HAL_TIM_Base_Start
HAL_GPIO_WritePin
HAL_GetTick
HAL_GPIO_ReadPin
__aeabi_f2d
sprintf
sendMessage
